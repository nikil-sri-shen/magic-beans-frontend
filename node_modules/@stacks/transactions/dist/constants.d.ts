export declare enum ChainID {
    Testnet = 2147483648,
    Mainnet = 1
}
export declare const DEFAULT_CHAIN_ID = ChainID.Mainnet;
export declare const MAX_STRING_LENGTH_BYTES = 128;
export declare const CLARITY_INT_SIZE = 128;
export declare const CLARITY_INT_BYTE_SIZE = 16;
export declare const COINBASE_BYTES_LENGTH = 32;
export declare const VRF_PROOF_BYTES_LENGTH = 80;
export declare const RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;
export declare const COMPRESSED_PUBKEY_LENGTH_BYTES = 32;
export declare const UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;
export declare const MEMO_MAX_LENGTH_BYTES = 34;
export declare const DEFAULT_CORE_NODE_API_URL = "https://api.mainnet.hiro.so";
export declare enum StacksMessageType {
    Address = 0,
    Principal = 1,
    LengthPrefixedString = 2,
    MemoString = 3,
    AssetInfo = 4,
    PostCondition = 5,
    PublicKey = 6,
    LengthPrefixedList = 7,
    Payload = 8,
    MessageSignature = 9,
    StructuredDataSignature = 10,
    TransactionAuthField = 11
}
type WhenMessageTypeMap<T> = Record<StacksMessageType, T>;
export declare function whenMessageType(messageType: StacksMessageType): <T>(messageTypeMap: WhenMessageTypeMap<T>) => T;
export declare enum PayloadType {
    TokenTransfer = 0,
    SmartContract = 1,
    VersionedSmartContract = 6,
    ContractCall = 2,
    PoisonMicroblock = 3,
    Coinbase = 4,
    CoinbaseToAltRecipient = 5,
    TenureChange = 7,
    NakamotoCoinbase = 8
}
export declare enum ClarityVersion {
    Clarity1 = 1,
    Clarity2 = 2
}
export declare enum AnchorMode {
    OnChainOnly = 1,
    OffChainOnly = 2,
    Any = 3
}
export declare const AnchorModeNames: readonly ["onChainOnly", "offChainOnly", "any"];
export type AnchorModeName = (typeof AnchorModeNames)[number];
export declare function anchorModeFromNameOrValue(mode: AnchorModeName | AnchorMode): AnchorMode;
export declare enum TransactionVersion {
    Mainnet = 0,
    Testnet = 128
}
export declare const DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;
export declare enum PostConditionMode {
    Allow = 1,
    Deny = 2
}
export declare enum PostConditionType {
    STX = 0,
    Fungible = 1,
    NonFungible = 2
}
export declare enum AuthType {
    Standard = 4,
    Sponsored = 5
}
export declare enum AddressHashMode {
    SerializeP2PKH = 0,
    SerializeP2SH = 1,
    SerializeP2WPKH = 2,
    SerializeP2WSH = 3
}
export type SingleSigHashMode = AddressHashMode.SerializeP2PKH | AddressHashMode.SerializeP2WPKH;
export type MultiSigHashMode = AddressHashMode.SerializeP2SH | AddressHashMode.SerializeP2WSH;
export declare enum AddressVersion {
    MainnetSingleSig = 22,
    MainnetMultiSig = 20,
    TestnetSingleSig = 26,
    TestnetMultiSig = 21
}
export declare enum PubKeyEncoding {
    Compressed = 0,
    Uncompressed = 1
}
export declare enum FungibleConditionCode {
    Equal = 1,
    Greater = 2,
    GreaterEqual = 3,
    Less = 4,
    LessEqual = 5
}
export declare enum NonFungibleConditionCode {
    Sends = 16,
    DoesNotSend = 17
}
export declare enum PostConditionPrincipalID {
    Origin = 1,
    Standard = 2,
    Contract = 3
}
export declare enum AssetType {
    STX = 0,
    Fungible = 1,
    NonFungible = 2
}
export declare enum TxRejectedReason {
    Serialization = "Serialization",
    Deserialization = "Deserialization",
    SignatureValidation = "SignatureValidation",
    FeeTooLow = "FeeTooLow",
    BadNonce = "BadNonce",
    NotEnoughFunds = "NotEnoughFunds",
    NoSuchContract = "NoSuchContract",
    NoSuchPublicFunction = "NoSuchPublicFunction",
    BadFunctionArgument = "BadFunctionArgument",
    ContractAlreadyExists = "ContractAlreadyExists",
    PoisonMicroblocksDoNotConflict = "PoisonMicroblocksDoNotConflict",
    PoisonMicroblockHasUnknownPubKeyHash = "PoisonMicroblockHasUnknownPubKeyHash",
    PoisonMicroblockIsInvalid = "PoisonMicroblockIsInvalid",
    BadAddressVersionByte = "BadAddressVersionByte",
    NoCoinbaseViaMempool = "NoCoinbaseViaMempool",
    ServerFailureNoSuchChainTip = "ServerFailureNoSuchChainTip",
    TooMuchChaining = "TooMuchChaining",
    ConflictingNonceInMempool = "ConflictingNonceInMempool",
    BadTransactionVersion = "BadTransactionVersion",
    TransferRecipientCannotEqualSender = "TransferRecipientCannotEqualSender",
    TransferAmountMustBePositive = "TransferAmountMustBePositive",
    ServerFailureDatabase = "ServerFailureDatabase",
    EstimatorError = "EstimatorError",
    TemporarilyBlacklisted = "TemporarilyBlacklisted",
    ServerFailureOther = "ServerFailureOther"
}
export {};
