{"version":3,"file":"index.js","mappings":"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","sources":["webpack://StacksTransactions/webpack/universalModuleDefinition","webpack://StacksTransactions/webpack/runtime/create fake namespace object","webpack://StacksTransactions/../../node_modules/@noble/hashes/_assert.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/_sha2.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/cryptoBrowser.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/sha256.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/utils.js","webpack://StacksTransactions/../../node_modules/base-x/src/index.js","webpack://StacksTransactions/../../node_modules/c32check/lib/address.js","webpack://StacksTransactions/../../node_modules/c32check/lib/base58check.js","webpack://StacksTransactions/../../node_modules/c32check/lib/checksum.js","webpack://StacksTransactions/../../node_modules/c32check/lib/encoding.js","webpack://StacksTransactions/../../node_modules/c32check/lib/index.js","webpack://StacksTransactions/../../node_modules/cross-fetch/dist/browser-polyfill.js","webpack://StacksTransactions/./src/authorization.ts","webpack://StacksTransactions/../network/dist/esm/fetch.js","webpack://StacksTransactions/../network/dist/esm/network.js","webpack://StacksTransactions/./src/builders.ts","webpack://StacksTransactions/./src/bytesReader.ts","webpack://StacksTransactions/./src/clarity/prettyPrint.ts","webpack://StacksTransactions/./src/cl.ts","webpack://StacksTransactions/./src/clarity/clarityValue.ts","webpack://StacksTransactions/./src/clarity/constants.ts","webpack://StacksTransactions/./src/clarity/deserialize.ts","webpack://StacksTransactions/./src/clarity/serialize.ts","webpack://StacksTransactions/./src/clarity/types/booleanCV.ts","webpack://StacksTransactions/./src/clarity/types/bufferCV.ts","webpack://StacksTransactions/./src/clarity/types/intCV.ts","webpack://StacksTransactions/./src/clarity/types/listCV.ts","webpack://StacksTransactions/./src/clarity/types/optionalCV.ts","webpack://StacksTransactions/./src/clarity/types/principalCV.ts","webpack://StacksTransactions/./src/clarity/types/responseCV.ts","webpack://StacksTransactions/./src/clarity/types/stringCV.ts","webpack://StacksTransactions/./src/clarity/types/tupleCV.ts","webpack://StacksTransactions/./src/common.ts","webpack://StacksTransactions/./src/constants.ts","webpack://StacksTransactions/./src/contract-abi.ts","webpack://StacksTransactions/./src/errors.ts","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/hmac.js","webpack://StacksTransactions/../common/dist/esm/signatures.js","webpack://StacksTransactions/./src/keys.ts","webpack://StacksTransactions/../common/dist/esm/keys.js","webpack://StacksTransactions/./src/payload.ts","webpack://StacksTransactions/./src/pc.ts","webpack://StacksTransactions/./src/postcondition-types.ts","webpack://StacksTransactions/./src/postcondition.ts","webpack://StacksTransactions/./src/signature.ts","webpack://StacksTransactions/./src/signer.ts","webpack://StacksTransactions/./src/structuredDataSignature.ts","webpack://StacksTransactions/./src/transaction.ts","webpack://StacksTransactions/./src/types.ts","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/ripemd160.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/_u64.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/sha512.js","webpack://StacksTransactions/./src/utils.ts","webpack://StacksTransactions/../../node_modules/lodash.clonedeep/index.js","webpack://StacksTransactions/../common/dist/esm/buffer.js","webpack://StacksTransactions/../common/dist/esm/constants.js","webpack://StacksTransactions/../common/dist/esm/utils.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/_assert.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/_sha2.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/sha256.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/cryptoBrowser.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/utils.js","webpack://StacksTransactions/../../node_modules/@noble/secp256k1/lib/esm/index.js","webpack://StacksTransactions/webpack/bootstrap","webpack://StacksTransactions/webpack/runtime/compat get default export","webpack://StacksTransactions/webpack/runtime/define property getters","webpack://StacksTransactions/webpack/runtime/global","webpack://StacksTransactions/webpack/runtime/hasOwnProperty shorthand","webpack://StacksTransactions/webpack/runtime/make namespace object","webpack://StacksTransactions/webpack/runtime/node module decorator"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StacksTransactions\"] = factory();\n\telse\n\t\troot[\"StacksTransactions\"] = factory();\n})(this, () => {\nreturn ","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32ToB58 = exports.b58ToC32 = exports.c32addressDecode = exports.c32address = exports.versions = void 0;\nconst checksum_1 = require(\"./checksum\");\nconst base58check = require(\"./base58check\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.versions = {\n    mainnet: {\n        p2pkh: 22,\n        p2sh: 20, // 'M'\n    },\n    testnet: {\n        p2pkh: 26,\n        p2sh: 21, // 'N'\n    },\n};\n// address conversion : bitcoin to stacks\nconst ADDR_BITCOIN_TO_STACKS = {};\nADDR_BITCOIN_TO_STACKS[0] = exports.versions.mainnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[5] = exports.versions.mainnet.p2sh;\nADDR_BITCOIN_TO_STACKS[111] = exports.versions.testnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[196] = exports.versions.testnet.p2sh;\n// address conversion : stacks to bitcoin\nconst ADDR_STACKS_TO_BITCOIN = {};\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2pkh] = 0;\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2sh] = 5;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2pkh] = 111;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2sh] = 196;\n/**\n * Make a c32check address with the given version and hash160\n * The only difference between a c32check string and c32 address\n * is that the letter 'S' is pre-pended.\n * @param {number} version - the address version number\n * @param {string} hash160hex - the hash160 to encode (must be a hash160)\n * @returns {string} the address\n */\nfunction c32address(version, hash160hex) {\n    if (!hash160hex.match(/^[0-9a-fA-F]{40}$/)) {\n        throw new Error('Invalid argument: not a hash160 hex string');\n    }\n    const c32string = (0, checksum_1.c32checkEncode)(version, hash160hex);\n    return `S${c32string}`;\n}\nexports.c32address = c32address;\n/**\n * Decode a c32 address into its version and hash160\n * @param {string} c32addr - the c32check-encoded address\n * @returns {[number, string]} a tuple with the version and hash160\n */\nfunction c32addressDecode(c32addr) {\n    if (c32addr.length <= 5) {\n        throw new Error('Invalid c32 address: invalid length');\n    }\n    if (c32addr[0] != 'S') {\n        throw new Error('Invalid c32 address: must start with \"S\"');\n    }\n    return (0, checksum_1.c32checkDecode)(c32addr.slice(1));\n}\nexports.c32addressDecode = c32addressDecode;\n/*\n * Convert a base58check address to a c32check address.\n * Try to convert the version number if one is not given.\n * @param {string} b58check - the base58check encoded address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the c32 address with the given version number (or the\n *   semantically-equivalent c32 version number, if not given)\n */\nfunction b58ToC32(b58check, version = -1) {\n    const addrInfo = base58check.decode(b58check);\n    const hash160String = (0, utils_1.bytesToHex)(addrInfo.data);\n    const addrVersion = parseInt((0, utils_1.bytesToHex)(addrInfo.prefix), 16);\n    let stacksVersion;\n    if (version < 0) {\n        stacksVersion = addrVersion;\n        if (ADDR_BITCOIN_TO_STACKS[addrVersion] !== undefined) {\n            stacksVersion = ADDR_BITCOIN_TO_STACKS[addrVersion];\n        }\n    }\n    else {\n        stacksVersion = version;\n    }\n    return c32address(stacksVersion, hash160String);\n}\nexports.b58ToC32 = b58ToC32;\n/*\n * Convert a c32check address to a base58check address.\n * @param {string} c32string - the c32check address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the base58 address with the given version number (or the\n *    semantically-equivalent bitcoin version number, if not given)\n */\nfunction c32ToB58(c32string, version = -1) {\n    const addrInfo = c32addressDecode(c32string);\n    const stacksVersion = addrInfo[0];\n    const hash160String = addrInfo[1];\n    let bitcoinVersion;\n    if (version < 0) {\n        bitcoinVersion = stacksVersion;\n        if (ADDR_STACKS_TO_BITCOIN[stacksVersion] !== undefined) {\n            bitcoinVersion = ADDR_STACKS_TO_BITCOIN[stacksVersion];\n        }\n    }\n    else {\n        bitcoinVersion = version;\n    }\n    let prefix = bitcoinVersion.toString(16);\n    if (prefix.length === 1) {\n        prefix = `0${prefix}`;\n    }\n    return base58check.encode(hash160String, prefix);\n}\nexports.c32ToB58 = c32ToB58;\n","/*\n * From https://github.com/wzbg/base58check\n * @Author: zyc\n * @Date:   2016-09-11 23:36:05\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst basex = require(\"base-x\");\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nfunction encode(data, prefix = '00') {\n    const dataBytes = typeof data === 'string' ? (0, utils_1.hexToBytes)(data) : data;\n    const prefixBytes = typeof prefix === 'string' ? (0, utils_1.hexToBytes)(prefix) : data;\n    if (!(dataBytes instanceof Uint8Array) || !(prefixBytes instanceof Uint8Array)) {\n        throw new TypeError('Argument must be of type Uint8Array or string');\n    }\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    return basex(ALPHABET).encode([...prefixBytes, ...dataBytes, ...checksum.slice(0, 4)]);\n}\nexports.encode = encode;\nfunction decode(string) {\n    const bytes = basex(ALPHABET).decode(string);\n    const prefixBytes = bytes.slice(0, 1);\n    const dataBytes = bytes.slice(1, -4);\n    // todo: for better performance replace spread with `concatBytes` method\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    bytes.slice(-4).forEach((check, index) => {\n        if (check !== checksum[index]) {\n            throw new Error('Invalid checksum');\n        }\n    });\n    return { prefix: prefixBytes, data: dataBytes };\n}\nexports.decode = decode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32checkDecode = exports.c32checkEncode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst encoding_1 = require(\"./encoding\");\n/**\n * Get the c32check checksum of a hex-encoded string\n * @param {string} dataHex - the hex string\n * @returns {string} the c32 checksum, as a bin-encoded string\n */\nfunction c32checksum(dataHex) {\n    const dataHash = (0, sha256_1.sha256)((0, sha256_1.sha256)((0, utils_1.hexToBytes)(dataHex)));\n    const checksum = (0, utils_1.bytesToHex)(dataHash.slice(0, 4));\n    return checksum;\n}\n/**\n * Encode a hex string as a c32check string.  This is a lot like how\n * base58check works in Bitcoin-land, but this algorithm uses the\n * z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * calculate the c32checksum of version + data\n * * c32encode version + data + c32checksum\n * @param {number} version - the version string (between 0 and 31)\n * @param {string} data - the data to encode\n * @returns {string} the c32check representation\n */\nfunction c32checkEncode(version, data) {\n    if (version < 0 || version >= 32) {\n        throw new Error('Invalid version (must be between 0 and 31)');\n    }\n    if (!data.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Invalid data (not a hex string)');\n    }\n    data = data.toLowerCase();\n    if (data.length % 2 !== 0) {\n        data = `0${data}`;\n    }\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    const checksumHex = c32checksum(`${versionHex}${data}`);\n    const c32str = (0, encoding_1.c32encode)(`${data}${checksumHex}`);\n    return `${encoding_1.c32[version]}${c32str}`;\n}\nexports.c32checkEncode = c32checkEncode;\n/*\n * Decode a c32check string back into its version and data payload.  This is\n * a lot like how base58check works in Bitcoin-land, but this algorithm uses\n * the z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * extract the version, data, and checksum\n * * verify the checksum matches c32checksum(version + data)\n * * return data\n * @param {string} c32data - the c32check-encoded string\n * @returns {array} [version (number), data (string)].  The returned data\n * will be a hex string.  Throws an exception if the checksum does not match.\n */\nfunction c32checkDecode(c32data) {\n    c32data = (0, encoding_1.c32normalize)(c32data);\n    const dataHex = (0, encoding_1.c32decode)(c32data.slice(1));\n    const versionChar = c32data[0];\n    const version = encoding_1.c32.indexOf(versionChar);\n    const checksum = dataHex.slice(-8);\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    if (c32checksum(`${versionHex}${dataHex.substring(0, dataHex.length - 8)}`) !== checksum) {\n        throw new Error('Invalid c32check string: checksum mismatch');\n    }\n    return [version, dataHex.substring(0, dataHex.length - 8)];\n}\nexports.c32checkDecode = c32checkDecode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32decode = exports.c32normalize = exports.c32encode = exports.c32 = void 0;\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.c32 = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\nconst hex = '0123456789abcdef';\n/**\n * Encode a hex string as a c32 string.  Note that the hex string is assumed\n * to be big-endian (and the resulting c32 string will be as well).\n * @param {string} inputHex - the input to encode\n * @param {number} minLength - the minimum length of the c32 string\n * @returns {string} the c32check-encoded representation of the data, as a string\n */\nfunction c32encode(inputHex, minLength) {\n    // must be hex\n    if (!inputHex.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Not a hex-encoded string');\n    }\n    if (inputHex.length % 2 !== 0) {\n        inputHex = `0${inputHex}`;\n    }\n    inputHex = inputHex.toLowerCase();\n    let res = [];\n    let carry = 0;\n    for (let i = inputHex.length - 1; i >= 0; i--) {\n        if (carry < 4) {\n            const currentCode = hex.indexOf(inputHex[i]) >> carry;\n            let nextCode = 0;\n            if (i !== 0) {\n                nextCode = hex.indexOf(inputHex[i - 1]);\n            }\n            // carry = 0, nextBits is 1, carry = 1, nextBits is 2\n            const nextBits = 1 + carry;\n            const nextLowBits = nextCode % (1 << nextBits) << (5 - nextBits);\n            const curC32Digit = exports.c32[currentCode + nextLowBits];\n            carry = nextBits;\n            res.unshift(curC32Digit);\n        }\n        else {\n            carry = 0;\n        }\n    }\n    let C32leadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            C32leadingZeros++;\n        }\n    }\n    res = res.slice(C32leadingZeros);\n    const zeroPrefix = new TextDecoder().decode((0, utils_1.hexToBytes)(inputHex)).match(/^\\u0000*/);\n    const numLeadingZeroBytesInHex = zeroPrefix ? zeroPrefix[0].length : 0;\n    for (let i = 0; i < numLeadingZeroBytesInHex; i++) {\n        res.unshift(exports.c32[0]);\n    }\n    if (minLength) {\n        const count = minLength - res.length;\n        for (let i = 0; i < count; i++) {\n            res.unshift(exports.c32[0]);\n        }\n    }\n    return res.join('');\n}\nexports.c32encode = c32encode;\n/*\n * Normalize a c32 string\n * @param {string} c32input - the c32-encoded input string\n * @returns {string} the canonical representation of the c32 input string\n */\nfunction c32normalize(c32input) {\n    // must be upper-case\n    // replace all O's with 0's\n    // replace all I's and L's with 1's\n    return c32input.toUpperCase().replace(/O/g, '0').replace(/L|I/g, '1');\n}\nexports.c32normalize = c32normalize;\n/*\n * Decode a c32 string back into a hex string.  Note that the c32 input\n * string is assumed to be big-endian (and the resulting hex string will\n * be as well).\n * @param {string} c32input - the c32-encoded input to decode\n * @param {number} minLength - the minimum length of the output hex string (in bytes)\n * @returns {string} the hex-encoded representation of the data, as a string\n */\nfunction c32decode(c32input, minLength) {\n    c32input = c32normalize(c32input);\n    // must result in a c32 string\n    if (!c32input.match(`^[${exports.c32}]*$`)) {\n        throw new Error('Not a c32-encoded string');\n    }\n    const zeroPrefix = c32input.match(`^${exports.c32[0]}*`);\n    const numLeadingZeroBytes = zeroPrefix ? zeroPrefix[0].length : 0;\n    let res = [];\n    let carry = 0;\n    let carryBits = 0;\n    for (let i = c32input.length - 1; i >= 0; i--) {\n        if (carryBits === 4) {\n            res.unshift(hex[carry]);\n            carryBits = 0;\n            carry = 0;\n        }\n        const currentCode = exports.c32.indexOf(c32input[i]) << carryBits;\n        const currentValue = currentCode + carry;\n        const currentHexDigit = hex[currentValue % 16];\n        carryBits += 1;\n        carry = currentValue >> 4;\n        if (carry > 1 << carryBits) {\n            throw new Error('Panic error in decoding.');\n        }\n        res.unshift(currentHexDigit);\n    }\n    // one last carry\n    res.unshift(hex[carry]);\n    if (res.length % 2 === 1) {\n        res.unshift('0');\n    }\n    let hexLeadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            hexLeadingZeros++;\n        }\n    }\n    res = res.slice(hexLeadingZeros - (hexLeadingZeros % 2));\n    let hexStr = res.join('');\n    for (let i = 0; i < numLeadingZeroBytes; i++) {\n        hexStr = `00${hexStr}`;\n    }\n    if (minLength) {\n        const count = minLength * 2 - hexStr.length;\n        for (let i = 0; i < count; i += 2) {\n            hexStr = `00${hexStr}`;\n        }\n    }\n    return hexStr;\n}\nexports.c32decode = c32decode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b58ToC32 = exports.c32ToB58 = exports.versions = exports.c32normalize = exports.c32addressDecode = exports.c32address = exports.c32checkDecode = exports.c32checkEncode = exports.c32decode = exports.c32encode = void 0;\nconst encoding_1 = require(\"./encoding\");\nObject.defineProperty(exports, \"c32encode\", { enumerable: true, get: function () { return encoding_1.c32encode; } });\nObject.defineProperty(exports, \"c32decode\", { enumerable: true, get: function () { return encoding_1.c32decode; } });\nObject.defineProperty(exports, \"c32normalize\", { enumerable: true, get: function () { return encoding_1.c32normalize; } });\nconst checksum_1 = require(\"./checksum\");\nObject.defineProperty(exports, \"c32checkEncode\", { enumerable: true, get: function () { return checksum_1.c32checkEncode; } });\nObject.defineProperty(exports, \"c32checkDecode\", { enumerable: true, get: function () { return checksum_1.c32checkDecode; } });\nconst address_1 = require(\"./address\");\nObject.defineProperty(exports, \"c32address\", { enumerable: true, get: function () { return address_1.c32address; } });\nObject.defineProperty(exports, \"c32addressDecode\", { enumerable: true, get: function () { return address_1.c32addressDecode; } });\nObject.defineProperty(exports, \"c32ToB58\", { enumerable: true, get: function () { return address_1.c32ToB58; } });\nObject.defineProperty(exports, \"b58ToC32\", { enumerable: true, get: function () { return address_1.b58ToC32; } });\nObject.defineProperty(exports, \"versions\", { enumerable: true, get: function () { return address_1.versions; } });\n","(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(typeof self !== 'undefined' ? self : this);\n","import {\n  bytesToHex,\n  concatArray,\n  hexToBytes,\n  IntegerType,\n  intToBigInt,\n  intToBytes,\n  writeUInt16BE,\n} from '@stacks/common';\nimport {\n  AddressHashMode,\n  AuthType,\n  MultiSigHashMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  SingleSigHashMode,\n  StacksMessageType,\n} from './constants';\n\nimport { cloneDeep, leftPadHex, txidFromData } from './utils';\nimport {\n  TransactionAuthField,\n  serializeMessageSignature,\n  deserializeMessageSignature,\n} from './signature';\nimport {\n  addressFromPublicKeys,\n  createEmptyAddress,\n  createLPList,\n  deserializeLPList,\n  serializeLPList,\n} from './types';\n\nimport {\n  createStacksPublicKey,\n  getPublicKey,\n  isCompressed,\n  publicKeyFromSignatureVrs,\n  signWithKey,\n  StacksPrivateKey,\n  StacksPublicKey,\n} from './keys';\n\nimport { MessageSignature } from './common';\nimport { DeserializationError, SigningError, VerificationError } from './errors';\nimport { BytesReader } from './bytesReader';\n\nexport function emptyMessageSignature(): MessageSignature {\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: bytesToHex(new Uint8Array(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES)),\n  };\n}\n\nexport interface SingleSigSpendingCondition {\n  hashMode: SingleSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  keyEncoding: PubKeyEncoding;\n  signature: MessageSignature;\n}\n\nexport interface SingleSigSpendingConditionOpts\n  extends Omit<SingleSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport interface MultiSigSpendingCondition {\n  hashMode: MultiSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  fields: TransactionAuthField[];\n  signaturesRequired: number;\n}\n\nexport interface MultiSigSpendingConditionOpts\n  extends Omit<MultiSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport type SpendingCondition = SingleSigSpendingCondition | MultiSigSpendingCondition;\n\nexport type SpendingConditionOpts = SingleSigSpendingConditionOpts | MultiSigSpendingConditionOpts;\n\nexport function createSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  pubKey: string,\n  nonce: IntegerType,\n  fee: IntegerType\n): SingleSigSpendingCondition {\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    hashMode,\n    1,\n    [createStacksPublicKey(pubKey)]\n  ).hash160;\n  const keyEncoding = isCompressed(createStacksPublicKey(pubKey))\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce, false),\n    fee: intToBigInt(fee, false),\n    keyEncoding,\n    signature: emptyMessageSignature(),\n  };\n}\n\nexport function createMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  numSigs: number,\n  pubKeys: string[],\n  nonce: IntegerType,\n  fee: IntegerType\n): MultiSigSpendingCondition {\n  const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    hashMode,\n    numSigs,\n    stacksPublicKeys\n  ).hash160;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce, false),\n    fee: intToBigInt(fee, false),\n    fields: [],\n    signaturesRequired: numSigs,\n  };\n}\n\nexport function isSingleSig(\n  condition: SpendingConditionOpts\n): condition is SingleSigSpendingConditionOpts {\n  return 'signature' in condition;\n}\n\nfunction clearCondition(condition: SpendingConditionOpts): SpendingCondition {\n  const cloned = cloneDeep(condition);\n  cloned.nonce = 0;\n  cloned.fee = 0;\n\n  if (isSingleSig(cloned)) {\n    cloned.signature = emptyMessageSignature();\n  } else {\n    cloned.fields = [];\n  }\n\n  return {\n    ...cloned,\n    nonce: BigInt(0),\n    fee: BigInt(0),\n  };\n}\n\nexport function serializeSingleSigSpendingCondition(\n  condition: SingleSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, false, 8),\n    intToBytes(condition.fee, false, 8),\n    condition.keyEncoding as number,\n    serializeMessageSignature(condition.signature),\n  ];\n  return concatArray(bytesArray);\n}\n\nexport function serializeMultiSigSpendingCondition(\n  condition: MultiSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, false, 8),\n    intToBytes(condition.fee, false, 8),\n  ];\n\n  const fields = createLPList(condition.fields);\n  bytesArray.push(serializeLPList(fields));\n\n  const numSigs = new Uint8Array(2);\n  writeUInt16BE(numSigs, condition.signaturesRequired, 0);\n  bytesArray.push(numSigs);\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  bytesReader: BytesReader\n): SingleSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n  const fee = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n\n  const keyEncoding = bytesReader.readUInt8Enum(PubKeyEncoding, n => {\n    throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n  });\n  if (hashMode === AddressHashMode.SerializeP2WPKH && keyEncoding != PubKeyEncoding.Compressed) {\n    throw new DeserializationError(\n      'Failed to parse singlesig spending condition: incomaptible hash mode and key encoding'\n    );\n  }\n  const signature = deserializeMessageSignature(bytesReader);\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature,\n  };\n}\n\nexport function deserializeMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  bytesReader: BytesReader\n): MultiSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n  const fee = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n\n  const fields = deserializeLPList(bytesReader, StacksMessageType.TransactionAuthField)\n    .values as TransactionAuthField[];\n\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of fields) {\n    switch (field.contents.type) {\n      case StacksMessageType.PublicKey:\n        if (!isCompressed(field.contents)) haveUncompressed = true;\n        break;\n      case StacksMessageType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        numSigs += 1;\n        if (numSigs === 65536)\n          throw new VerificationError(\n            'Failed to parse multisig spending condition: too many signatures'\n          );\n        break;\n    }\n  }\n  const signaturesRequired = bytesReader.readUInt16BE();\n\n  // Partially signed multi-sig tx can be serialized and deserialized without exception (Incorrect number of signatures)\n  // No need to check numSigs !== signaturesRequired to throw Incorrect number of signatures error\n\n  if (haveUncompressed && hashMode === AddressHashMode.SerializeP2SH)\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields,\n    signaturesRequired,\n  };\n}\n\nexport function serializeSpendingCondition(condition: SpendingConditionOpts): Uint8Array {\n  if (isSingleSig(condition)) {\n    return serializeSingleSigSpendingCondition(condition);\n  }\n  return serializeMultiSigSpendingCondition(condition);\n}\n\nexport function deserializeSpendingCondition(bytesReader: BytesReader): SpendingCondition {\n  const hashMode = bytesReader.readUInt8Enum(AddressHashMode, n => {\n    throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n  });\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    return deserializeSingleSigSpendingCondition(hashMode, bytesReader);\n  } else {\n    return deserializeMultiSigSpendingCondition(hashMode, bytesReader);\n  }\n}\n\nexport function makeSigHashPreSign(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType\n): string {\n  // new hash combines the previous hash and all the new data this signature will add. This\n  // includes:\n  // * the previous hash\n  // * the auth flag\n  // * the tx fee (big-endian 8-byte number)\n  // * nonce (big-endian 8-byte number)\n  const hashLength = 32 + 1 + 8 + 8;\n\n  const sigHash =\n    curSigHash +\n    bytesToHex(new Uint8Array([authType])) +\n    bytesToHex(intToBytes(fee, false, 8)) +\n    bytesToHex(intToBytes(nonce, false, 8));\n\n  if (hexToBytes(sigHash).byteLength !== hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(hexToBytes(sigHash));\n}\n\nfunction makeSigHashPostSign(\n  curSigHash: string,\n  pubKey: StacksPublicKey,\n  signature: MessageSignature\n): string {\n  // new hash combines the previous hash and all the new data this signature will add.  This\n  // includes:\n  // * the public key compression flag\n  // * the signature\n  const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n\n  const pubKeyEncoding = isCompressed(pubKey)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature.data;\n\n  const sigHashBytes = hexToBytes(sigHash);\n  if (sigHashBytes.byteLength > hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(sigHashBytes);\n}\n\nexport function nextSignature(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  privateKey: StacksPrivateKey\n): {\n  nextSig: MessageSignature;\n  nextSigHash: string;\n} {\n  const sigHashPreSign = makeSigHashPreSign(curSigHash, authType, fee, nonce);\n\n  const signature = signWithKey(privateKey, sigHashPreSign);\n  const publicKey = getPublicKey(privateKey);\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    nextSig: signature,\n    nextSigHash,\n  };\n}\n\nexport function nextVerification(\n  initialSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  pubKeyEncoding: PubKeyEncoding,\n  signature: MessageSignature\n) {\n  const sigHashPreSign = makeSigHashPreSign(initialSigHash, authType, fee, nonce);\n\n  const publicKey = createStacksPublicKey(\n    publicKeyFromSignatureVrs(sigHashPreSign, signature, pubKeyEncoding)\n  );\n\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    pubKey: publicKey,\n    nextSigHash,\n  };\n}\n\nfunction newInitialSigHash(): SpendingCondition {\n  const spendingCondition = createSingleSigSpendingCondition(\n    AddressHashMode.SerializeP2PKH,\n    '',\n    0,\n    0\n  );\n  spendingCondition.signer = createEmptyAddress().hash160;\n  spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n  spendingCondition.signature = emptyMessageSignature();\n  return spendingCondition;\n}\n\nfunction verify(\n  condition: SpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  if (isSingleSig(condition)) {\n    return verifySingleSig(condition, initialSigHash, authType);\n  } else {\n    return verifyMultiSig(condition, initialSigHash, authType);\n  }\n}\n\nfunction verifySingleSig(\n  condition: SingleSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const { pubKey, nextSigHash } = nextVerification(\n    initialSigHash,\n    authType,\n    condition.fee,\n    condition.nonce,\n    condition.keyEncoding,\n    condition.signature\n  );\n\n  // address version arg doesn't matter for signer hash generation\n  const addrBytes = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    condition.hashMode,\n    1,\n    [pubKey]\n  ).hash160;\n\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return nextSigHash;\n}\n\nfunction verifyMultiSig(\n  condition: MultiSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const publicKeys: StacksPublicKey[] = [];\n  let curSigHash = initialSigHash;\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of condition.fields) {\n    let foundPubKey: StacksPublicKey;\n\n    switch (field.contents.type) {\n      case StacksMessageType.PublicKey:\n        if (!isCompressed(field.contents)) haveUncompressed = true;\n        foundPubKey = field.contents;\n        break;\n      case StacksMessageType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        const { pubKey, nextSigHash } = nextVerification(\n          curSigHash,\n          authType,\n          condition.fee,\n          condition.nonce,\n          field.pubKeyEncoding,\n          field.contents\n        );\n        curSigHash = nextSigHash;\n        foundPubKey = pubKey;\n\n        numSigs += 1;\n        if (numSigs === 65536) throw new VerificationError('Too many signatures');\n\n        break;\n    }\n    publicKeys.push(foundPubKey);\n  }\n\n  if (numSigs !== condition.signaturesRequired)\n    throw new VerificationError('Incorrect number of signatures');\n\n  if (haveUncompressed && condition.hashMode === AddressHashMode.SerializeP2SH)\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n\n  const addrBytes = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    condition.hashMode,\n    condition.signaturesRequired,\n    publicKeys\n  ).hash160;\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return curSigHash;\n}\n\nexport type Authorization = StandardAuthorization | SponsoredAuthorization;\n\nexport interface StandardAuthorization {\n  authType: AuthType.Standard;\n  spendingCondition: SpendingCondition;\n}\n\nexport interface SponsoredAuthorization {\n  authType: AuthType.Sponsored;\n  spendingCondition: SpendingCondition;\n  sponsorSpendingCondition: SpendingCondition;\n}\n\nexport function createStandardAuth(spendingCondition: SpendingCondition): StandardAuthorization {\n  return {\n    authType: AuthType.Standard,\n    spendingCondition,\n  };\n}\n\nexport function createSponsoredAuth(\n  spendingCondition: SpendingCondition,\n  sponsorSpendingCondition?: SpendingCondition\n): Authorization {\n  return {\n    authType: AuthType.Sponsored,\n    spendingCondition,\n    sponsorSpendingCondition: sponsorSpendingCondition\n      ? sponsorSpendingCondition\n      : createSingleSigSpendingCondition(AddressHashMode.SerializeP2PKH, '0'.repeat(66), 0, 0),\n  };\n}\n\nexport function intoInitialSighashAuth(auth: Authorization): Authorization {\n  if (auth.spendingCondition) {\n    switch (auth.authType) {\n      case AuthType.Standard:\n        return createStandardAuth(clearCondition(auth.spendingCondition));\n      case AuthType.Sponsored:\n        return createSponsoredAuth(clearCondition(auth.spendingCondition), newInitialSigHash());\n      default:\n        throw new SigningError('Unexpected authorization type for signing');\n    }\n  }\n\n  throw new Error('Authorization missing SpendingCondition');\n}\n\nexport function verifyOrigin(auth: Authorization, initialSigHash: string): string {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    case AuthType.Sponsored:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    default:\n      throw new SigningError('Invalid origin auth type');\n  }\n}\n\nexport function setFee(auth: Authorization, amount: IntegerType): Authorization {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      const spendingCondition = {\n        ...auth.spendingCondition,\n        fee: intToBigInt(amount, false),\n      };\n      return { ...auth, spendingCondition };\n    case AuthType.Sponsored:\n      const sponsorSpendingCondition = {\n        ...auth.sponsorSpendingCondition,\n        fee: intToBigInt(amount, false),\n      };\n      return { ...auth, sponsorSpendingCondition };\n  }\n}\n\nexport function getFee(auth: Authorization): bigint {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return auth.spendingCondition.fee;\n    case AuthType.Sponsored:\n      return auth.sponsorSpendingCondition.fee;\n  }\n}\n\nexport function setNonce(auth: Authorization, nonce: IntegerType): Authorization {\n  const spendingCondition = {\n    ...auth.spendingCondition,\n    nonce: intToBigInt(nonce, false),\n  };\n\n  return {\n    ...auth,\n    spendingCondition,\n  };\n}\n\nexport function setSponsorNonce(auth: SponsoredAuthorization, nonce: IntegerType): Authorization {\n  const sponsorSpendingCondition = {\n    ...auth.sponsorSpendingCondition,\n    nonce: intToBigInt(nonce, false),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition,\n  };\n}\n\nexport function setSponsor(\n  auth: SponsoredAuthorization,\n  sponsorSpendingCondition: SpendingConditionOpts\n): Authorization {\n  const sc = {\n    ...sponsorSpendingCondition,\n    nonce: intToBigInt(sponsorSpendingCondition.nonce, false),\n    fee: intToBigInt(sponsorSpendingCondition.fee, false),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition: sc,\n  };\n}\n\nexport function serializeAuthorization(auth: Authorization): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(auth.authType);\n\n  switch (auth.authType) {\n    case AuthType.Standard:\n      bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n      break;\n    case AuthType.Sponsored:\n      bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n      bytesArray.push(serializeSpendingCondition(auth.sponsorSpendingCondition));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAuthorization(bytesReader: BytesReader) {\n  const authType = bytesReader.readUInt8Enum(AuthType, n => {\n    throw new DeserializationError(`Could not parse ${n} as AuthType`);\n  });\n\n  let spendingCondition;\n  switch (authType) {\n    case AuthType.Standard:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      return createStandardAuth(spendingCondition);\n    case AuthType.Sponsored:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      const sponsorSpendingCondition = deserializeSpendingCondition(bytesReader);\n      return createSponsoredAuth(spendingCondition, sponsorSpendingCondition);\n  }\n}\n","import 'cross-fetch/polyfill';\nconst defaultFetchOpts = {\n    referrerPolicy: 'origin',\n    headers: {\n        'x-hiro-product': 'stacksjs',\n    },\n};\nexport const getFetchOptions = () => {\n    return defaultFetchOpts;\n};\nexport const setFetchOptions = (ops) => {\n    return Object.assign(defaultFetchOpts, ops);\n};\nexport async function fetchWrapper(input, init) {\n    const fetchOpts = {};\n    Object.assign(fetchOpts, defaultFetchOpts, init);\n    const fetchResult = await fetch(input, fetchOpts);\n    return fetchResult;\n}\nexport function hostMatches(host, pattern) {\n    if (typeof pattern === 'string')\n        return pattern === host;\n    return pattern.exec(host);\n}\nexport function createApiKeyMiddleware({ apiKey, host = /(.*)api(.*)(\\.stacks\\.co|\\.hiro\\.so)$/i, httpHeader = 'x-api-key', }) {\n    return {\n        pre: context => {\n            const reqUrl = new URL(context.url);\n            if (!hostMatches(reqUrl.host, host))\n                return;\n            const headers = new Headers(context.init.headers);\n            headers.set(httpHeader, apiKey);\n            context.init.headers = headers;\n        },\n    };\n}\nfunction argsForCreateFetchFn(args) {\n    let fetchLib = fetchWrapper;\n    let middlewares = [];\n    if (args.length > 0 && typeof args[0] === 'function') {\n        fetchLib = args.shift();\n    }\n    if (args.length > 0) {\n        middlewares = args;\n    }\n    return { fetchLib, middlewares };\n}\nexport function createFetchFn(...args) {\n    const { fetchLib, middlewares } = argsForCreateFetchFn(args);\n    const fetchFn = async (url, init) => {\n        let fetchParams = { url, init: init ?? {} };\n        for (const middleware of middlewares) {\n            if (typeof middleware.pre === 'function') {\n                const result = await Promise.resolve(middleware.pre({\n                    fetch: fetchLib,\n                    ...fetchParams,\n                }));\n                fetchParams = result ?? fetchParams;\n            }\n        }\n        let response = await fetchLib(fetchParams.url, fetchParams.init);\n        for (const middleware of middlewares) {\n            if (typeof middleware.post === 'function') {\n                const result = await Promise.resolve(middleware.post({\n                    fetch: fetchLib,\n                    url: fetchParams.url,\n                    init: fetchParams.init,\n                    response: response?.clone() ?? response,\n                }));\n                response = result ?? response;\n            }\n        }\n        return response;\n    };\n    return fetchFn;\n}\n//# sourceMappingURL=fetch.js.map","import { TransactionVersion, ChainID } from '@stacks/common';\nimport { createFetchFn } from './fetch';\nexport const HIRO_MAINNET_DEFAULT = 'https://api.mainnet.hiro.so';\nexport const HIRO_TESTNET_DEFAULT = 'https://api.testnet.hiro.so';\nexport const HIRO_MOCKNET_DEFAULT = 'http://localhost:3999';\nexport const StacksNetworks = ['mainnet', 'testnet', 'devnet', 'mocknet'];\nexport class StacksNetwork {\n    constructor(networkConfig) {\n        this.version = TransactionVersion.Mainnet;\n        this.chainId = ChainID.Mainnet;\n        this.bnsLookupUrl = 'https://api.mainnet.hiro.so';\n        this.broadcastEndpoint = '/v2/transactions';\n        this.transferFeeEstimateEndpoint = '/v2/fees/transfer';\n        this.transactionFeeEstimateEndpoint = '/v2/fees/transaction';\n        this.accountEndpoint = '/v2/accounts';\n        this.contractAbiEndpoint = '/v2/contracts/interface';\n        this.readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n        this.isMainnet = () => this.version === TransactionVersion.Mainnet;\n        this.getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;\n        this.getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;\n        this.getTransactionFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transactionFeeEstimateEndpoint}`;\n        this.getAccountApiUrl = (address) => `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;\n        this.getAccountExtendedBalancesApiUrl = (address) => `${this.coreApiUrl}/extended/v1/address/${address}/balances`;\n        this.getAbiApiUrl = (address, contract) => `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;\n        this.getReadOnlyFunctionCallApiUrl = (contractAddress, contractName, functionName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;\n        this.getInfoUrl = () => `${this.coreApiUrl}/v2/info`;\n        this.getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;\n        this.getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;\n        this.getRewardsUrl = (address, options) => {\n            let url = `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}`;\n            if (options) {\n                url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n            }\n            return url;\n        };\n        this.getRewardsTotalUrl = (address) => `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}/total`;\n        this.getRewardHoldersUrl = (address, options) => {\n            let url = `${this.coreApiUrl}/extended/v1/burnchain/reward_slot_holders/${address}`;\n            if (options) {\n                url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n            }\n            return url;\n        };\n        this.getStackerInfoUrl = (contractAddress, contractName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}\n    ${contractAddress}/${contractName}/get-stacker-info`;\n        this.getDataVarUrl = (contractAddress, contractName, dataVarName) => `${this.coreApiUrl}/v2/data_var/${contractAddress}/${contractName}/${dataVarName}?proof=0`;\n        this.getMapEntryUrl = (contractAddress, contractName, mapName) => `${this.coreApiUrl}/v2/map_entry/${contractAddress}/${contractName}/${mapName}?proof=0`;\n        this.coreApiUrl = networkConfig.url;\n        this.fetchFn = networkConfig.fetchFn ?? createFetchFn();\n    }\n    getNameInfo(fullyQualifiedName) {\n        const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;\n        return this.fetchFn(nameLookupURL)\n            .then(resp => {\n            if (resp.status === 404) {\n                throw new Error('Name not found');\n            }\n            else if (resp.status !== 200) {\n                throw new Error(`Bad response status: ${resp.status}`);\n            }\n            else {\n                return resp.json();\n            }\n        })\n            .then(nameInfo => {\n            if (nameInfo.address) {\n                return Object.assign({}, nameInfo, { address: nameInfo.address });\n            }\n            else {\n                return nameInfo;\n            }\n        });\n    }\n}\nStacksNetwork.fromName = (networkName) => {\n    switch (networkName) {\n        case 'mainnet':\n            return new StacksMainnet();\n        case 'testnet':\n            return new StacksTestnet();\n        case 'devnet':\n            return new StacksDevnet();\n        case 'mocknet':\n            return new StacksMocknet();\n        default:\n            throw new Error(`Invalid network name provided. Must be one of the following: ${StacksNetworks.join(', ')}`);\n    }\n};\nStacksNetwork.fromNameOrNetwork = (network) => {\n    if (typeof network !== 'string' && 'version' in network) {\n        return network;\n    }\n    return StacksNetwork.fromName(network);\n};\nexport class StacksMainnet extends StacksNetwork {\n    constructor(opts) {\n        super({\n            url: opts?.url ?? HIRO_MAINNET_DEFAULT,\n            fetchFn: opts?.fetchFn,\n        });\n        this.version = TransactionVersion.Mainnet;\n        this.chainId = ChainID.Mainnet;\n    }\n}\nexport class StacksTestnet extends StacksNetwork {\n    constructor(opts) {\n        super({\n            url: opts?.url ?? HIRO_TESTNET_DEFAULT,\n            fetchFn: opts?.fetchFn,\n        });\n        this.version = TransactionVersion.Testnet;\n        this.chainId = ChainID.Testnet;\n    }\n}\nexport class StacksMocknet extends StacksNetwork {\n    constructor(opts) {\n        super({\n            url: opts?.url ?? HIRO_MOCKNET_DEFAULT,\n            fetchFn: opts?.fetchFn,\n        });\n        this.version = TransactionVersion.Testnet;\n        this.chainId = ChainID.Testnet;\n    }\n}\nexport const StacksDevnet = StacksMocknet;\n//# sourceMappingURL=network.js.map","import { bytesToHex, hexToBytes, IntegerType, intToBigInt } from '@stacks/common';\nimport {\n  StacksNetwork,\n  StacksMainnet,\n  StacksNetworkName,\n  StacksTestnet,\n  FetchFn,\n  createFetchFn,\n} from '@stacks/network';\nimport { c32address } from 'c32check';\nimport {\n  Authorization,\n  createMultiSigSpendingCondition,\n  createSingleSigSpendingCondition,\n  createSponsoredAuth,\n  createStandardAuth,\n  SpendingCondition,\n  MultiSigSpendingCondition,\n} from './authorization';\nimport { ClarityValue, deserializeCV, NoneCV, PrincipalCV, serializeCV } from './clarity';\nimport {\n  AddressHashMode,\n  AddressVersion,\n  AnchorMode,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  PayloadType,\n  PostConditionMode,\n  SingleSigHashMode,\n  TransactionVersion,\n  TxRejectedReason,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  StacksMessageType,\n  ClarityVersion,\n  AnchorModeName,\n} from './constants';\nimport { ClarityAbi, validateContractCall } from './contract-abi';\nimport { NoEstimateAvailableError } from './errors';\nimport {\n  createStacksPrivateKey,\n  getPublicKey,\n  pubKeyfromPrivKey,\n  publicKeyFromBytes,\n  publicKeyToAddress,\n  publicKeyToString,\n} from './keys';\nimport {\n  createContractCallPayload,\n  createSmartContractPayload,\n  createTokenTransferPayload,\n  Payload,\n  serializePayload,\n} from './payload';\nimport {\n  createFungiblePostCondition,\n  createNonFungiblePostCondition,\n  createSTXPostCondition,\n} from './postcondition';\nimport {\n  AssetInfo,\n  createContractPrincipal,\n  createStandardPrincipal,\n  FungiblePostCondition,\n  NonFungiblePostCondition,\n  PostCondition,\n  STXPostCondition,\n} from './postcondition-types';\nimport { TransactionSigner } from './signer';\nimport { StacksTransaction } from './transaction';\nimport { createLPList } from './types';\nimport { cvToHex, omit, parseReadOnlyResponse, validateTxId } from './utils';\n\n/**\n * Lookup the nonce for an address from a core node\n *\n * @param {string} address - the c32check address to look up\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to look up address on\n *\n * @return a promise that resolves to an integer\n */\nexport async function getNonce(\n  address: string,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? new StacksMainnet());\n  const url = derivedNetwork.getAccountApiUrl(address);\n\n  const response = await derivedNetwork.fetchFn(url);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const responseText = await response.text();\n  const result = JSON.parse(responseText) as { nonce: string };\n  return BigInt(result.nonce);\n}\n\n/**\n * @deprecated Use the new {@link estimateTransaction} function instead.\n *\n * Estimate the total transaction fee in microstacks for a token transfer\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateTransfer(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  if (transaction.payload.payloadType !== PayloadType.TokenTransfer) {\n    throw new Error(\n      `Transaction fee estimation only possible with ${\n        PayloadType[PayloadType.TokenTransfer]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  return estimateTransferUnsafe(transaction, network);\n}\n\n/**\n * @deprecated Use the new {@link estimateTransaction} function instead.\n * @internal\n */\nexport async function estimateTransferUnsafe(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = BigInt(transaction.serialize().byteLength);\n  const feeRate = BigInt(feeRateResult);\n  return feeRate * txBytes;\n}\n\ninterface FeeEstimation {\n  fee: number;\n  fee_rate: number;\n}\ninterface FeeEstimateResponse {\n  cost_scalar_change_by_byte: bigint;\n  estimated_cost: {\n    read_count: bigint;\n    read_length: bigint;\n    runtime: bigint;\n    write_count: bigint;\n    write_length: bigint;\n  };\n  estimated_cost_scalar: bigint;\n  estimations: [FeeEstimation, FeeEstimation, FeeEstimation];\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a Stacks transaction\n *\n * @param {StacksTransaction} transaction - the transaction to estimate fees for\n * @param {number} estimatedLen - is an optional argument that provides the endpoint with an\n * estimation of the final length (in bytes) of the transaction, including any post-conditions\n * and signatures\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction fees for\n *\n * @return a promise that resolves to FeeEstimate\n */\nexport async function estimateTransaction(\n  transactionPayload: Payload,\n  estimatedLen?: number,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<[FeeEstimation, FeeEstimation, FeeEstimation]> {\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      transaction_payload: bytesToHex(serializePayload(transactionPayload)),\n      ...(estimatedLen ? { estimated_len: estimatedLen } : {}),\n    }),\n  };\n\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? new StacksMainnet());\n  const url = derivedNetwork.getTransactionFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, options);\n\n  if (!response.ok) {\n    const body = await response.text().then(str => {\n      try {\n        return JSON.parse(str);\n      } catch (error) {\n        return str;\n      }\n    });\n\n    if (\n      body?.reason === 'NoEstimateAvailable' ||\n      (typeof body === 'string' && body.includes('NoEstimateAvailable'))\n    ) {\n      throw new NoEstimateAvailableError(body?.reason_data?.message ?? '');\n    }\n\n    throw new Error(\n      `Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${body}\"`\n    );\n  }\n\n  const data: FeeEstimateResponse = await response.json();\n  return data.estimations;\n}\n\nexport type SerializationRejection = {\n  error: string;\n  reason: TxRejectedReason.Serialization;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type DeserializationRejection = {\n  error: string;\n  reason: TxRejectedReason.Deserialization;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type SignatureValidationRejection = {\n  error: string;\n  reason: TxRejectedReason.SignatureValidation;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type BadNonceRejection = {\n  error: string;\n  reason: TxRejectedReason.BadNonce;\n  reason_data: {\n    expected: number;\n    actual: number;\n    is_origin: boolean;\n    principal: boolean;\n  };\n  txid: string;\n};\n\nexport type FeeTooLowRejection = {\n  error: string;\n  reason: TxRejectedReason.FeeTooLow;\n  reason_data: {\n    expected: number;\n    actual: number;\n  };\n  txid: string;\n};\n\nexport type NotEnoughFundsRejection = {\n  error: string;\n  reason: TxRejectedReason.NotEnoughFunds;\n  reason_data: {\n    expected: string;\n    actual: string;\n  };\n  txid: string;\n};\n\nexport type NoSuchContractRejection = {\n  error: string;\n  reason: TxRejectedReason.NoSuchContract;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type NoSuchPublicFunctionRejection = {\n  error: string;\n  reason: TxRejectedReason.NoSuchPublicFunction;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type BadFunctionArgumentRejection = {\n  error: string;\n  reason: TxRejectedReason.BadFunctionArgument;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type ContractAlreadyExistsRejection = {\n  error: string;\n  reason: TxRejectedReason.ContractAlreadyExists;\n  reason_data: {\n    contract_identifier: string;\n  };\n  txid: string;\n};\n\nexport type PoisonMicroblocksDoNotConflictRejection = {\n  error: string;\n  reason: TxRejectedReason.PoisonMicroblocksDoNotConflict;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type PoisonMicroblockHasUnknownPubKeyHashRejection = {\n  error: string;\n  reason: TxRejectedReason.PoisonMicroblockHasUnknownPubKeyHash;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type PoisonMicroblockIsInvalidRejection = {\n  error: string;\n  reason: TxRejectedReason.PoisonMicroblockIsInvalid;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type BadAddressVersionByteRejection = {\n  error: string;\n  reason: TxRejectedReason.BadAddressVersionByte;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type NoCoinbaseViaMempoolRejection = {\n  error: string;\n  reason: TxRejectedReason.NoCoinbaseViaMempool;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type ServerFailureNoSuchChainTipRejection = {\n  error: string;\n  reason: TxRejectedReason.ServerFailureNoSuchChainTip;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type TooMuchChainingRejection = {\n  error: string;\n  reason: TxRejectedReason.TooMuchChaining;\n  reason_data: {\n    actual: number;\n    expected: number;\n    is_origin: boolean;\n    message: string;\n    principal: string;\n  };\n  txid: string;\n};\n\nexport type ConflictingNonceInMempoolRejection = {\n  error: string;\n  reason: TxRejectedReason.ConflictingNonceInMempool;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type BadTransactionVersionRejection = {\n  error: string;\n  reason: TxRejectedReason.BadTransactionVersion;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type TransferRecipientCannotEqualSenderRejection = {\n  error: string;\n  reason: TxRejectedReason.TransferRecipientCannotEqualSender;\n  reason_data: {\n    recipient: string;\n  };\n  txid: string;\n};\n\nexport type TransferAmountMustBePositiveRejection = {\n  error: string;\n  reason: TxRejectedReason.TransferAmountMustBePositive;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type ServerFailureDatabaseRejection = {\n  error: string;\n  reason: TxRejectedReason.ServerFailureDatabase;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type EstimatorErrorRejection = {\n  error: string;\n  reason: TxRejectedReason.EstimatorError;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type TemporarilyBlacklistedRejection = {\n  error: string;\n  reason: TxRejectedReason.TemporarilyBlacklisted;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type ServerFailureOtherRejection = {\n  error: string;\n  reason: TxRejectedReason.ServerFailureOther;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type TxBroadcastResultOk = {\n  txid: string;\n  error?: undefined;\n  reason?: undefined;\n  reason_data?: undefined;\n};\n\nexport type TxBroadcastResultRejected =\n  | SerializationRejection\n  | DeserializationRejection\n  | SignatureValidationRejection\n  | BadNonceRejection\n  | FeeTooLowRejection\n  | NotEnoughFundsRejection\n  | NoSuchContractRejection\n  | NoSuchPublicFunctionRejection\n  | BadFunctionArgumentRejection\n  | ContractAlreadyExistsRejection\n  | PoisonMicroblocksDoNotConflictRejection\n  | PoisonMicroblockHasUnknownPubKeyHashRejection\n  | PoisonMicroblockIsInvalidRejection\n  | BadAddressVersionByteRejection\n  | NoCoinbaseViaMempoolRejection\n  | ServerFailureNoSuchChainTipRejection\n  | TooMuchChainingRejection\n  | ConflictingNonceInMempoolRejection\n  | BadTransactionVersionRejection\n  | TransferRecipientCannotEqualSenderRejection\n  | TransferAmountMustBePositiveRejection\n  | ServerFailureDatabaseRejection\n  | EstimatorErrorRejection\n  | TemporarilyBlacklistedRejection\n  | ServerFailureOtherRejection;\n\nexport type TxBroadcastResult = TxBroadcastResultOk | TxBroadcastResultRejected;\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to broadcast\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastTransaction(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork,\n  attachment?: Uint8Array\n): Promise<TxBroadcastResult> {\n  const rawTx = transaction.serialize();\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getBroadcastApiUrl();\n\n  return broadcastRawTransaction(rawTx, url, attachment, derivedNetwork.fetchFn);\n}\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {Uint8Array} rawTx - the raw serialized transaction bytes to broadcast\n * @param {string} url - the broadcast endpoint URL\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastRawTransaction(\n  rawTx: Uint8Array,\n  url: string,\n  attachment?: Uint8Array,\n  fetchFn: FetchFn = createFetchFn()\n): Promise<TxBroadcastResult> {\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': attachment ? 'application/json' : 'application/octet-stream' },\n    body: attachment\n      ? JSON.stringify({\n          tx: bytesToHex(rawTx),\n          attachment: bytesToHex(attachment),\n        })\n      : rawTx,\n  };\n\n  const response = await fetchFn(url, options);\n  if (!response.ok) {\n    try {\n      return (await response.json()) as TxBroadcastResult;\n    } catch (e) {\n      throw Error(`Failed to broadcast transaction: ${(e as Error).message}`);\n    }\n  }\n\n  const text = await response.text();\n  // Replace extra quotes around txid string\n  const txid = text.replace(/[\"]+/g, '');\n  if (!validateTxId(txid)) throw new Error(text);\n  return { txid } as TxBroadcastResult;\n}\n\n/**\n * Fetch a contract's ABI\n *\n * @param {string} address - the contracts address\n * @param {string} contractName - the contracts name\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a ClarityAbi if the operation succeeds\n */\nexport async function getAbi(\n  address: string,\n  contractName: string,\n  network: StacksNetworkName | StacksNetwork\n): Promise<ClarityAbi> {\n  const options = {\n    method: 'GET',\n  };\n\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network);\n  const url = derivedNetwork.getAbiApiUrl(address, contractName);\n\n  const response = await derivedNetwork.fetchFn(url, options);\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error fetching contract ABI for contract \"${contractName}\" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return JSON.parse(await response.text()) as ClarityAbi;\n}\n\nfunction deriveNetwork(transaction: StacksTransaction) {\n  switch (transaction.version) {\n    case TransactionVersion.Mainnet:\n      return new StacksMainnet();\n    case TransactionVersion.Testnet:\n      return new StacksTestnet();\n  }\n}\n\nexport interface MultiSigOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys?: string[];\n}\n\n/**\n * STX token transfer transaction options\n */\nexport interface TokenTransferOptions {\n  /** the address of the recipient of the token transfer */\n  recipient: string | PrincipalCV;\n  /** the amount to be transfered in microstacks */\n  amount: IntegerType;\n  /** the transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the network that the transaction will ultimately be broadcast to */\n  network?: StacksNetworkName | StacksNetwork;\n  /** the transaction anchorMode, which specifies whether it should be\n   * included in an anchor block or a microblock */\n  anchorMode: AnchorModeName | AnchorMode;\n  /** an arbitrary string to include in the transaction, must be less than 34 bytes */\n  memo?: string;\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n}\n\nexport interface UnsignedTokenTransferOptions extends TokenTransferOptions {\n  publicKey: string;\n}\n\nexport interface SignedTokenTransferOptions extends TokenTransferOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * Generates an unsigned Stacks token transfer transaction\n *\n * Returns a Stacks token transfer transaction.\n *\n * @param {UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {Promise<StacksTransaction>}\n */\nexport async function makeUnsignedSTXTokenTransfer(\n  txOptions: UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: new StacksMainnet(),\n    memo: '',\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createTokenTransferPayload(options.recipient, options.amount, options.memo);\n\n  let authorization: Authorization | null = null;\n  let spendingCondition: SpendingCondition | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = createSponsoredAuth(spendingCondition);\n  } else {\n    authorization = createStandardAuth(spendingCondition);\n  }\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n\n  const transaction = new StacksTransaction(\n    network.version,\n    authorization,\n    payload,\n    undefined, // no post conditions on STX transfers (see SIP-005)\n    undefined, // no post conditions on STX transfers (see SIP-005)\n    options.anchorMode,\n    network.chainId\n  );\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const fee = await estimateTransactionFeeWithFallback(transaction, network);\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a signed Stacks token transfer transaction\n *\n * Returns a signed Stacks token transfer transaction.\n *\n * @param {SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {StacksTransaction}\n */\nexport async function makeSTXTokenTransfer(\n  txOptions: SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    // txOptions is SignedTokenTransferOptions\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    // txOptions is SignedMultiSigTokenTransferOptions\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedSTXTokenTransfer(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== bytesToHex(pubKey.data));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBytes(hexToBytes(key)));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Contract deploy transaction options\n */\nexport interface BaseContractDeployOptions {\n  clarityVersion?: ClarityVersion;\n  contractName: string;\n  /** the Clarity code to be deployed */\n  codeBody: string;\n  /** transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the network that the transaction will ultimately be broadcast to */\n  network?: StacksNetworkName | StacksNetwork;\n  /** the transaction anchorMode, which specifies whether it should be\n   * included in an anchor block or a microblock */\n  anchorMode: AnchorModeName | AnchorMode;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: PostCondition[];\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n}\n\nexport interface UnsignedContractDeployOptions extends BaseContractDeployOptions {\n  /** a hex string of the public key of the transaction sender */\n  publicKey: string;\n}\n\nexport interface SignedContractDeployOptions extends BaseContractDeployOptions {\n  senderKey: string;\n}\n\n/** @deprecated Use {@link SignedContractDeployOptions} or {@link UnsignedContractDeployOptions} instead. */\nexport interface ContractDeployOptions extends SignedContractDeployOptions {}\n\nexport interface UnsignedMultiSigContractDeployOptions extends BaseContractDeployOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigContractDeployOptions extends BaseContractDeployOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * @deprecated Use the new {@link estimateTransaction} function insterad.\n *\n * Estimate the total transaction fee in microstacks for a contract deploy\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractDeploy(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  if (\n    transaction.payload.payloadType !== PayloadType.SmartContract &&\n    transaction.payload.payloadType !== PayloadType.VersionedSmartContract\n  ) {\n    throw new Error(\n      `Contract deploy fee estimation only possible with ${\n        PayloadType[PayloadType.SmartContract]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract deploy fee estimation is fully implemented on Stacks\n  // blockchain core\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, fetchOptions);\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error estimating contract deploy fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = intToBigInt(transaction.serialize().byteLength, false);\n  const feeRate = intToBigInt(feeRateResult, false);\n  return feeRate * txBytes;\n}\n\n/**\n * Generates a Clarity smart contract deploy transaction\n *\n * @param {SignedContractDeployOptions | SignedMultiSigContractDeployOptions} txOptions - an options object for the contract deploy\n *\n * Returns a signed Stacks smart contract deploy transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractDeploy(\n  txOptions: SignedContractDeployOptions | SignedMultiSigContractDeployOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    // txOptions is SignedContractDeployOptions\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedContractDeploy({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    // txOptions is SignedMultiSigContractDeployOptions\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedContractDeploy(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== bytesToHex(pubKey.data));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBytes(hexToBytes(key)));\n    }\n\n    return transaction;\n  }\n}\n\nexport async function makeUnsignedContractDeploy(\n  txOptions: UnsignedContractDeployOptions | UnsignedMultiSigContractDeployOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: new StacksMainnet(),\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n    clarityVersion: ClarityVersion.Clarity2,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createSmartContractPayload(\n    options.contractName,\n    options.codeBody,\n    options.clarityVersion\n  );\n\n  let authorization: Authorization | null = null;\n\n  let spendingCondition: SpendingCondition | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = createSponsoredAuth(spendingCondition);\n  } else {\n    authorization = createStandardAuth(spendingCondition);\n  }\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n  const lpPostConditions = createLPList(postConditions);\n\n  const transaction = new StacksTransaction(\n    network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    network.chainId\n  );\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const fee = await estimateTransactionFeeWithFallback(transaction, network);\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Contract function call transaction options\n */\nexport interface ContractCallOptions {\n  /** the Stacks address of the contract */\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  /** transaction fee in microstacks */\n  fee?: IntegerType;\n  feeEstimateApiUrl?: string;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the Stacks blockchain network that will ultimately be used to broadcast this transaction */\n  network?: StacksNetworkName | StacksNetwork;\n  /** the transaction anchorMode, which specifies whether it should be\n   * included in an anchor block or a microblock */\n  anchorMode: AnchorModeName | AnchorMode;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: PostCondition[];\n  /** set to true to validate that the supplied function args match those specified in\n   * the published contract */\n  validateWithAbi?: boolean | ClarityAbi;\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n}\n\nexport interface UnsignedContractCallOptions extends ContractCallOptions {\n  publicKey: string;\n}\n\nexport interface SignedContractCallOptions extends ContractCallOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * @deprecated Use the new {@link estimateTransaction} function insterad.\n *\n * Estimate the total transaction fee in microstacks for a contract function call\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractFunctionCall(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  if (transaction.payload.payloadType !== PayloadType.ContractCall) {\n    throw new Error(\n      `Contract call fee estimation only possible with ${\n        PayloadType[PayloadType.ContractCall]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract call fee estimation is fully implemented on Stacks\n  // blockchain core\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, fetchOptions);\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error estimating contract call fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = intToBigInt(transaction.serialize().byteLength, false);\n  const feeRate = intToBigInt(feeRateResult, false);\n  return feeRate * txBytes;\n}\n\n/**\n * Generates an unsigned Clarity smart contract function call transaction\n *\n * @param {UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions} txOptions - an options object for the contract call\n *\n * @returns {Promise<StacksTransaction>}\n */\nexport async function makeUnsignedContractCall(\n  txOptions: UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: new StacksMainnet(),\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createContractCallPayload(\n    options.contractAddress,\n    options.contractName,\n    options.functionName,\n    options.functionArgs\n  );\n\n  if (options?.validateWithAbi) {\n    let abi: ClarityAbi;\n    if (typeof options.validateWithAbi === 'boolean') {\n      if (options?.network) {\n        abi = await getAbi(options.contractAddress, options.contractName, options.network);\n      } else {\n        throw new Error('Network option must be provided in order to validate with ABI');\n      }\n    } else {\n      abi = options.validateWithAbi;\n    }\n\n    validateContractCall(payload, abi);\n  }\n\n  let spendingCondition: SpendingCondition | null = null;\n  let authorization: Authorization | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = createSponsoredAuth(spendingCondition);\n  } else {\n    authorization = createStandardAuth(spendingCondition);\n  }\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    network.chainId\n  );\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const fee = await estimateTransactionFeeWithFallback(transaction, network);\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion =\n      network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a Clarity smart contract function call transaction\n *\n * @param {SignedContractCallOptions | SignedMultiSigContractCallOptions} txOptions - an options object for the contract function call\n *\n * Returns a signed Stacks smart contract function call transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractCall(\n  txOptions: SignedContractCallOptions | SignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedContractCall({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedContractCall(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== bytesToHex(pubKey.data));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBytes(hexToBytes(key)));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Generates a STX post condition with a standard principal\n *\n * Returns a STX post condition object\n *\n * @param address - the c32check address\n * @param conditionCode - the condition code\n * @param amount - the amount of STX tokens (denoted in micro-STX)\n */\nexport function makeStandardSTXPostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType\n): STXPostCondition {\n  return createSTXPostCondition(createStandardPrincipal(address), conditionCode, amount);\n}\n\n/**\n * Generates a STX post condition with a contract principal\n *\n * Returns a STX post condition object\n *\n * @param address - the c32check address of the contract\n * @param contractName - the name of the contract\n * @param conditionCode - the condition code\n * @param amount - the amount of STX tokens (denoted in micro-STX)\n *\n * @return {STXPostCondition}\n */\nexport function makeContractSTXPostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType\n): STXPostCondition {\n  return createSTXPostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount\n  );\n}\n\n/**\n * Generates a fungible token post condition with a standard principal\n *\n * Returns a fungible token post condition object\n *\n * @param address - the c32check address\n * @param conditionCode - the condition code\n * @param amount - the amount of fungible tokens (in their respective base unit)\n * @param assetInfo - asset info describing the fungible token\n */\nexport function makeStandardFungiblePostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a fungible token post condition with a contract principal\n *\n * Returns a fungible token post condition object\n *\n * @param address - the c32check address\n * @param contractName - the name of the contract\n * @param conditionCode - the condition code\n * @param amount - the amount of fungible tokens (in their respective base unit)\n * @param assetInfo - asset info describing the fungible token\n */\nexport function makeContractFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a standard principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param {String} address - the c32check address\n * @param {FungibleConditionCode} conditionCode - the condition code\n * @param {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param {ClarityValue} assetId - asset identifier of the nft instance (typically a uint/buffer/string)\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeStandardNonFungiblePostCondition(\n  address: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetId: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    assetInfo,\n    assetId\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a contract principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param {String} address - the c32check address\n * @param {String} contractName - the name of the contract\n * @param {FungibleConditionCode} conditionCode - the condition code\n * @param {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param {ClarityValue} assetId - asset identifier of the nft instance (typically a uint/buffer/string)\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeContractNonFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetId: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    assetInfo,\n    assetId\n  );\n}\n\n/**\n * Read only function options\n *\n * @param {String} contractAddress - the c32check address of the contract\n * @param {String} contractName - the contract name\n * @param {String} functionName - name of the function to be called\n * @param {[ClarityValue]} functionArgs - an array of Clarity values as arguments to the function call\n * @param {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param {String} senderAddress - the c32check address of the sender\n */\n\nexport interface ReadOnlyFunctionOptions {\n  contractName: string;\n  contractAddress: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  /** the network that the contract which contains the function is deployed to */\n  network?: StacksNetworkName | StacksNetwork;\n  /** address of the sender */\n  senderAddress: string;\n}\n\n/**\n * Calls a function as read-only from a contract interface\n * It is not necessary that the function is defined as read-only in the contract\n *\n * @param {ReadOnlyFunctionOptions} readOnlyFunctionOptions - the options object\n *\n * Returns an object with a status bool (okay) and a result string that is a serialized clarity value in hex format.\n *\n * @return {ClarityValue}\n */\nexport async function callReadOnlyFunction(\n  readOnlyFunctionOptions: ReadOnlyFunctionOptions\n): Promise<ClarityValue> {\n  const defaultOptions = {\n    network: new StacksMainnet(),\n  };\n\n  const options = Object.assign(defaultOptions, readOnlyFunctionOptions);\n\n  const { contractName, contractAddress, functionName, functionArgs, senderAddress } = options;\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n  const url = network.getReadOnlyFunctionCallApiUrl(contractAddress, contractName, functionName);\n\n  const args = functionArgs.map(arg => cvToHex(arg));\n\n  const body = JSON.stringify({\n    sender: senderAddress,\n    arguments: args,\n  });\n\n  const response = await network.fetchFn(url, {\n    method: 'POST',\n    body,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return response.json().then(responseJson => parseReadOnlyResponse(responseJson));\n}\n\nexport interface GetContractMapEntryOptions {\n  /** the contracts address */\n  contractAddress: string;\n  /** the contracts name */\n  contractName: string;\n  /** the map name */\n  mapName: string;\n  /** key to lookup in the map */\n  mapKey: ClarityValue;\n  /** the network that has the contract */\n  network?: StacksNetworkName | StacksNetwork;\n}\n\n/**\n * Fetch data from a contract data map.\n * @param getContractMapEntryOptions - the options object\n * @returns\n * Promise that resolves to a ClarityValue if the operation succeeds.\n * Resolves to NoneCV if the map does not contain the given key, if the map does not exist, or if the contract prinicipal does not exist\n */\nexport async function getContractMapEntry<T extends ClarityValue = ClarityValue>(\n  getContractMapEntryOptions: GetContractMapEntryOptions\n): Promise<T | NoneCV> {\n  const defaultOptions = {\n    network: new StacksMainnet(),\n  };\n  const { contractAddress, contractName, mapName, mapKey, network } = Object.assign(\n    defaultOptions,\n    getContractMapEntryOptions\n  );\n\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network);\n  const url = derivedNetwork.getMapEntryUrl(contractAddress, contractName, mapName);\n\n  const serializedKeyBytes = serializeCV(mapKey);\n  const serializedKeyHex = '0x' + bytesToHex(serializedKeyBytes);\n\n  const fetchOptions: RequestInit = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n    body: JSON.stringify(serializedKeyHex), // endpoint expects a JSON string atom (quote wrapped string)\n  };\n\n  const response = await derivedNetwork.fetchFn(url, fetchOptions);\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${serializedKeyHex}\". Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const responseBody = await response.text();\n  const responseJson: { data?: string } = JSON.parse(responseBody);\n  if (!responseJson.data) {\n    throw new Error(\n      `Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${serializedKeyHex}\". Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the response: \"${responseBody}\"`\n    );\n  }\n  let deserializedCv: T;\n  try {\n    deserializedCv = deserializeCV<T>(responseJson.data);\n  } catch (error) {\n    throw new Error(`Error deserializing Clarity value \"${responseJson.data}\": ${error}`);\n  }\n  return deserializedCv;\n}\n\n/**\n * Sponsored transaction options\n */\nexport interface SponsorOptionsOpts {\n  /** the origin-signed transaction */\n  transaction: StacksTransaction;\n  /** the sponsor's private key */\n  sponsorPrivateKey: string;\n  /** the transaction fee amount to sponsor */\n  fee?: IntegerType;\n  /** the nonce of the sponsor account */\n  sponsorNonce?: IntegerType;\n  /** the hashmode of the sponsor's address */\n  sponsorAddressHashmode?: AddressHashMode;\n  /** the Stacks blockchain network that this transaction will ultimately be broadcast to */\n  network?: StacksNetworkName | StacksNetwork;\n}\n\n/**\n * Constructs and signs a sponsored transaction as the sponsor\n *\n * @param {SponsorOptionsOpts} sponsorOptions - the sponsor options object\n *\n * Returns a signed sponsored transaction.\n *\n * @return {ClarityValue}\n */\nexport async function sponsorTransaction(\n  sponsorOptions: SponsorOptionsOpts\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: 0 as IntegerType,\n    sponsorNonce: 0 as IntegerType,\n    sponsorAddressHashmode: AddressHashMode.SerializeP2PKH as SingleSigHashMode,\n    network:\n      sponsorOptions.transaction.version === TransactionVersion.Mainnet\n        ? new StacksMainnet()\n        : new StacksTestnet(),\n  };\n\n  const options = Object.assign(defaultOptions, sponsorOptions);\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n  const sponsorPubKey = pubKeyfromPrivKey(options.sponsorPrivateKey);\n\n  if (sponsorOptions.fee === undefined || sponsorOptions.fee === null) {\n    let txFee = 0;\n    switch (options.transaction.payload.payloadType) {\n      case PayloadType.TokenTransfer:\n      case PayloadType.SmartContract:\n      case PayloadType.VersionedSmartContract:\n      case PayloadType.ContractCall:\n        const estimatedLen = estimateTransactionByteLength(options.transaction);\n        try {\n          txFee = (await estimateTransaction(options.transaction.payload, estimatedLen, network))[1]\n            .fee;\n        } catch (e) {\n          throw e;\n        }\n        break;\n      default:\n        throw new Error(\n          `Sponsored transactions not supported for transaction type ${\n            PayloadType[options.transaction.payload.payloadType]\n          }`\n        );\n    }\n    options.transaction.setFee(txFee);\n    options.fee = txFee;\n  }\n\n  if (sponsorOptions.sponsorNonce === undefined || sponsorOptions.sponsorNonce === null) {\n    const addressVersion =\n      network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n\n    const senderAddress = publicKeyToAddress(addressVersion, sponsorPubKey);\n    const sponsorNonce = await getNonce(senderAddress, network);\n    options.sponsorNonce = sponsorNonce;\n  }\n\n  const sponsorSpendingCondition = createSingleSigSpendingCondition(\n    options.sponsorAddressHashmode,\n    publicKeyToString(sponsorPubKey),\n    options.sponsorNonce,\n    options.fee\n  );\n\n  options.transaction.setSponsor(sponsorSpendingCondition);\n\n  const privKey = createStacksPrivateKey(options.sponsorPrivateKey);\n  const signer = TransactionSigner.createSponsorSigner(\n    options.transaction,\n    sponsorSpendingCondition\n  );\n  signer.signSponsor(privKey);\n\n  return signer.transaction;\n}\n\n/**\n * Estimates transaction byte length\n * Context:\n * 1) Multi-sig transaction byte length increases by adding signatures\n *    which causes the incorrect fee estimation because the fee value is set while creating unsigned transaction\n * 2) Single-sig transaction byte length remain same due to empty message signature which allocates the space for signature\n * @param {transaction} - StacksTransaction object to be estimated\n * @return {number} Estimated transaction byte length\n */\nexport function estimateTransactionByteLength(transaction: StacksTransaction): number {\n  const hashMode = transaction.auth.spendingCondition.hashMode;\n  // List of Multi-sig transaction hash modes\n  const multiSigHashModes = [AddressHashMode.SerializeP2SH, AddressHashMode.SerializeP2WSH];\n\n  // Check if its a Multi-sig transaction\n  if (multiSigHashModes.includes(hashMode)) {\n    const multiSigSpendingCondition: MultiSigSpendingCondition = transaction.auth\n      .spendingCondition as MultiSigSpendingCondition;\n\n    // Find number of existing signatures if the transaction is signed or partially signed\n    const existingSignatures = multiSigSpendingCondition.fields.filter(\n      field => field.contents.type === StacksMessageType.MessageSignature\n    ).length; // existingSignatures will be 0 if its a unsigned transaction\n\n    // Estimate total signature bytes size required for this multi-sig transaction\n    // Formula: totalSignatureLength = (signaturesRequired - existingSignatures) * (SIG_LEN_BYTES + 1 byte of type of signature)\n    const totalSignatureLength =\n      (multiSigSpendingCondition.signaturesRequired - existingSignatures) *\n      (RECOVERABLE_ECDSA_SIG_LENGTH_BYTES + 1);\n\n    return transaction.serialize().byteLength + totalSignatureLength;\n  } else {\n    // Single-sig transaction\n    // Signature space already allocated by empty message signature\n    return transaction.serialize().byteLength;\n  }\n}\n\n/**\n * Estimates the fee using {@link estimateTransfer} as a fallback if\n * {@link estimateTransaction} does not get an estimation due to the\n * {@link NoEstimateAvailableError} error.\n */\nexport async function estimateTransactionFeeWithFallback(\n  transaction: StacksTransaction,\n  network: StacksNetwork\n): Promise<bigint | number> {\n  try {\n    const estimatedLen = estimateTransactionByteLength(transaction);\n    return (await estimateTransaction(transaction.payload, estimatedLen, network))[1].fee;\n  } catch (error) {\n    if (error instanceof NoEstimateAvailableError) {\n      return await estimateTransferUnsafe(transaction, network);\n    }\n    throw error;\n  }\n}\n","import { bytesToHex, readUInt16BE, readUInt32BE, readUInt8 } from '@stacks/common';\n\nfunction createEnumChecker<T extends string, TEnumValue extends number>(enumVariable: {\n  [key in T]: TEnumValue;\n}): (value: number) => value is TEnumValue {\n  // Create a set of valid enum number values.\n  const enumValues = Object.values<number>(enumVariable).filter(v => typeof v === 'number');\n  const enumValueSet = new Set<number>(enumValues);\n  return (value: number): value is TEnumValue => enumValueSet.has(value);\n}\n\nconst enumCheckFunctions = new Map<object, (value: number) => boolean>();\n\n/**\n * @ignore\n * Type guard to check if a given value is a valid enum value.\n * @param enumVariable - Literal `enum` type.\n * @param value - A value to check against the enum's values.\n * @example\n * ```ts\n * enum Color {\n *   Purple = 3,\n *   Orange = 5\n * }\n * const val: number = 3;\n * if (isEnum(Color, val)) {\n *   // `val` is known as enum type `Color`, e.g.:\n *   const colorVal: Color = val;\n * }\n * ```\n */\nexport function isEnum<T extends string, TEnumValue extends number>(\n  enumVariable: { [key in T]: TEnumValue },\n  value: number\n): value is TEnumValue {\n  const checker = enumCheckFunctions.get(enumVariable);\n  if (checker !== undefined) {\n    return checker(value);\n  }\n  const newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\n\n/** @ignore */\nexport class BytesReader {\n  source: Uint8Array;\n  consumed: number = 0;\n\n  constructor(arr: Uint8Array) {\n    this.source = arr;\n  }\n\n  readBytes(length: number): Uint8Array {\n    const view = this.source.subarray(this.consumed, this.consumed + length);\n    this.consumed += length;\n    return view;\n  }\n\n  readUInt32BE(): number {\n    return readUInt32BE(this.readBytes(4), 0);\n  }\n\n  readUInt8(): number {\n    return readUInt8(this.readBytes(1), 0);\n  }\n\n  readUInt16BE(): number {\n    return readUInt16BE(this.readBytes(2), 0);\n  }\n\n  readBigUIntLE(length: number): bigint {\n    const bytes = this.readBytes(length).slice().reverse();\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  readBigUIntBE(length: number): bigint {\n    const bytes = this.readBytes(length);\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  // todo: remove or implement with DataView?\n  // readBigUInt64BE(): bigint {\n  //   return this.source.readBigUInt64BE();\n  // }\n\n  get readOffset(): number {\n    return this.consumed;\n  }\n\n  set readOffset(val: number) {\n    this.consumed = val;\n  }\n\n  get internalBytes(): Uint8Array {\n    return this.source;\n  }\n\n  readUInt8Enum<T extends string, TEnumValue extends number>(\n    enumVariable: { [key in T]: TEnumValue },\n    invalidEnumErrorFormatter: (val: number) => Error\n  ): TEnumValue {\n    const num = this.readUInt8();\n    if (isEnum(enumVariable, num)) {\n      return num;\n    }\n    throw invalidEnumErrorFormatter(num);\n  }\n}\n","/*\n  Format Clarity Values into Clarity style readable strings\n  eg:\n  `Cl.uint(1)` => u1\n  `Cl.list(Cl.uint(1))` => (list u1)\n  `Cl.tuple({ id: u1 })` => { id: u1 }\n*/\n\nimport { bytesToHex } from '@stacks/common';\nimport { ClarityType, ClarityValue, ListCV, TupleCV, principalToString } from '.';\n\nfunction formatSpace(space: number, depth: number, end = false) {\n  if (!space) return ' ';\n  return `\\n${' '.repeat(space * (depth - (end ? 1 : 0)))}`;\n}\n\n/**\n * @description format List clarity values in clarity style strings\n * with the ability to prettify the result with line break end space indentation\n * @example\n * ```ts\n * formatList(Cl.list([Cl.uint(1)]))\n * // (list u1)\n *\n * formatList(Cl.list([Cl.uint(1)]), 2)\n * // (list\n * //   u1\n * // )\n * ```\n */\nfunction formatList(cv: ListCV, space: number, depth = 1): string {\n  if (cv.list.length === 0) return '(list)';\n\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = space ? formatSpace(space, depth, true) : '';\n\n  const items = cv.list.map(v => prettyPrintWithDepth(v, space, depth)).join(spaceBefore);\n\n  return `(list${spaceBefore}${items}${endSpace})`;\n}\n\n/**\n * @description format Tuple clarity values in clarity style strings\n * the keys are alphabetically sorted\n * with the ability to prettify the result with line break end space indentation\n * @example\n * ```ts\n * formatTuple(Cl.tuple({ id: Cl.uint(1), age: Cl.uint(20) }))\n * // { age: 20, id: u1 }\n *\n * formatTuple(Cl.tuple({ id: Cl.uint(1), age: Cl.uint(20) }, 2))\n * // {\n * //   age: 20,\n * //   id: u1\n * // }\n * ```\n */\nfunction formatTuple(cv: TupleCV, space: number, depth = 1): string {\n  if (Object.keys(cv.data).length === 0) return '{}';\n\n  const items: string[] = [];\n  for (const [key, value] of Object.entries(cv.data)) {\n    items.push(`${key}: ${prettyPrintWithDepth(value, space, depth)}`);\n  }\n\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = formatSpace(space, depth, true);\n\n  return `{${spaceBefore}${items.sort().join(`,${spaceBefore}`)}${endSpace}}`;\n}\n\nfunction exhaustiveCheck(param: never): never {\n  throw new Error(`invalid clarity value type: ${param}`);\n}\n\n// the exported function should not expose the `depth` argument\nfunction prettyPrintWithDepth(cv: ClarityValue, space = 0, depth: number): string {\n  if (cv.type === ClarityType.BoolFalse) return 'false';\n  if (cv.type === ClarityType.BoolTrue) return 'true';\n\n  if (cv.type === ClarityType.Int) return cv.value.toString();\n  if (cv.type === ClarityType.UInt) return `u${cv.value.toString()}`;\n\n  if (cv.type === ClarityType.StringASCII) return `\"${cv.data}\"`;\n  if (cv.type === ClarityType.StringUTF8) return `u\"${cv.data}\"`;\n\n  if (cv.type === ClarityType.PrincipalContract) return `'${principalToString(cv)}`;\n  if (cv.type === ClarityType.PrincipalStandard) return `'${principalToString(cv)}`;\n\n  if (cv.type === ClarityType.Buffer) return `0x${bytesToHex(cv.buffer)}`;\n\n  if (cv.type === ClarityType.OptionalNone) return 'none';\n  if (cv.type === ClarityType.OptionalSome)\n    return `(some ${prettyPrintWithDepth(cv.value, space, depth)})`;\n\n  if (cv.type === ClarityType.ResponseOk)\n    return `(ok ${prettyPrintWithDepth(cv.value, space, depth)})`;\n  if (cv.type === ClarityType.ResponseErr)\n    return `(err ${prettyPrintWithDepth(cv.value, space, depth)})`;\n\n  if (cv.type === ClarityType.List) {\n    return formatList(cv, space, depth + 1);\n  }\n  if (cv.type === ClarityType.Tuple) {\n    return formatTuple(cv, space, depth + 1);\n  }\n\n  // make sure that we exhausted all ClarityTypes\n  exhaustiveCheck(cv);\n}\n\n/**\n * @description format clarity values in clarity style strings\n * with the ability to prettify the result with line break end space indentation\n * @param cv The Clarity Value to format\n * @param space The indentation size of the output string. There's no indentation and no line breaks if space = 0\n * @example\n * ```ts\n * prettyPrint(Cl.tuple({ id: Cl.uint(1), age: Cl.some(Cl.uint(42)) }))\n * // { age: (some u42), id: u1 }\n *\n * prettyPrint(Cl.tuple({ id: Cl.uint(1), age: Cl.some(Cl.uint(42)) }, 2))\n * // {\n * //   age: (some u42),\n * //   id: u1\n * // }\n * ```\n */\nexport function prettyPrint(cv: ClarityValue, space = 0): string {\n  return prettyPrintWithDepth(cv, space, 0);\n}\n","import { asciiToBytes, hexToBytes, utf8ToBytes } from '@stacks/common';\nimport {\n  boolCV,\n  bufferCV,\n  contractPrincipalCV,\n  deserializeCV,\n  intCV,\n  listCV,\n  noneCV,\n  responseErrorCV,\n  responseOkCV,\n  serializeCV,\n  someCV,\n  standardPrincipalCV,\n  stringAsciiCV,\n  stringUtf8CV,\n  tupleCV,\n  uintCV,\n} from './clarity';\n\nexport { prettyPrint } from './clarity/prettyPrint';\n\n// todo: https://github.com/hirosystems/clarinet/issues/786\n\n// Primitives //////////////////////////////////////////////////////////////////\n/**\n * `Cl.bool` — Creates a Clarity boolean type, represented as a JS object\n *\n * Alias for {@link boolCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bool(true);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const bool = boolCV;\n/**\n * `Cl.int` — Creates a Clarity `int` type, represented as a JS object\n *\n * Alias for {@link intCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.int(-100);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const int = intCV;\n/**\n * `Cl.uInt` — Creates a Clarity `uint` type, represented as a JS object\n *\n * Alias for {@link uintCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.uint(100);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const uint = uintCV;\n\n/**\n * `Cl.principal` — Creates a Clarity principal type, represented as a JS object\n * @param address - A Stacks address (optionally with a contract name in the string)\n *\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.principal('ST000000000000000000002AMW42H');\n * Cl.principal('ST000000000000000000002AMW42H.asset');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport function principal(address: string) {\n  const [addr, name] = address.split('.');\n  return name ? contractPrincipalCV(addr, name) : standardPrincipalCV(addr);\n}\n/**\n * `Cl.address` — Creates a Clarity principal type, represented as a JS object\n * @param address - A Stacks address (optionally with a contract name in the string)\n *\n * Alias for {@link principal | `Cl.principal`}\n *\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.address('ST000000000000000000002AMW42H');\n * Cl.address('ST000000000000000000002AMW42H.asset');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const address = principal;\n/**\n * `Cl.contractPrincipal` — Creates a Clarity contract `principal` type, represented as a JS object\n *\n * Alias for {@link contractPrincipalCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.contractPrincipal('ST000000000000000000002AMW42H', 'asset');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const contractPrincipal = contractPrincipalCV;\n/**\n * `Cl.standardPrincipal` — Creates a Clarity standard `principal` type, represented as a JS object\n *\n * Alias for {@link standardPrincipalCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.standardPrincipal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const standardPrincipal = standardPrincipalCV;\n// todo: add .principal method that detects `.` inside string for both standard and contract principals\n\n// Sequences ///////////////////////////////////////////////////////////////////\n/**\n * `Cl.list` — Creates a Clarity `list` type, represented as a JS object\n *\n * Alias for {@link listCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.list([Cl.int(100), Cl.int(200)]);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const list = listCV;\n/**\n * `Cl.stringAscii` — Creates a Clarity `string-ascii` type, represented as a JS object\n *\n * Alias for {@link stringAsciiCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.stringAscii('hello world');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const stringAscii = stringAsciiCV;\n/**\n * `Cl.stringUtf8` — Creates a Clarity `string-utf8` type, represented as a JS object\n *\n * Alias for {@link stringUtf8CV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.stringUtf8('hello world');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const stringUtf8 = stringUtf8CV;\n/**\n * `Cl.buffer` — Creates a Clarity `buffer` type, represented as a JS object\n *\n * Alias for {@link bufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.buffer(Uint8Array.from([0x01, 0x02, 0x03]));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const buffer = bufferCV;\n/**\n * `Cl.bufferFromHex` — Converts bytes (from a hex string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as a hex string\n * @returns input encoded as a {@link BufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bufferFromHex('a1b2c3');\n * ```\n */\nexport const bufferFromHex = (hex: string) => bufferCV(hexToBytes(hex));\n/**\n * `Cl.bufferFromAscii` — Converts bytes (from an ASCII string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as an ASCII string\n * @returns input encoded as a {@link BufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bufferFromAscii('hello world');\n * ```\n */\nexport const bufferFromAscii = (ascii: string) => bufferCV(asciiToBytes(ascii));\n/**\n * `Cl.bufferFromUtf8` — Converts bytes (from an UTF-8 string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as a UTF-8 string\n * @returns input encoded as a {@link BufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bufferFromUtf8('hello world');\n * ```\n */\nexport const bufferFromUtf8 = (utf8: string) => bufferCV(utf8ToBytes(utf8));\n\n// Composites //////////////////////////////////////////////////////////////////\n/**\n * `Cl.none` — Creates a Clarity optional `none` type, represented as a JS object\n *\n * Alias for {@link noneCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.none();\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const none = noneCV;\n/**\n * `Cl.some` — Creates a Clarity optional `some` type, represented as a JS object\n *\n * Alias for {@link someCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.some(Cl.uint(100));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const some = someCV;\n/**\n * `Cl.ok` — Creates a Clarity response `ok` type, represented as a JS object\n *\n * Alias for {@link responseOkCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.ok(Cl.uint(100));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const ok = responseOkCV;\n/**\n * `Cl.error` — Creates a Clarity response `error` type, represented as a JS object\n *\n * Alias for {@link responseErrorCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.error(Cl.uint(9900));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const error = responseErrorCV;\n/**\n * `Cl.tuple` — Creates a Clarity `tuple` type, represented as a JS object\n *\n * Alias for {@link tupleCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.tuple({\n *   a: Cl.uint(100),\n *   b: Cl.stringUtf8('hello world'),\n * })\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const tuple = tupleCV;\n\n// Methods /////////////////////////////////////////////////////////////////////\n/**\n * `Cl.serialize` — Serializes a Clarity JS object to the equivalent hex-encoded representation\n *\n * Alias for {@link serializeCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.serialize(Cl.uint(100));\n * ```\n * @see {@link deserialize}\n */\nexport const serialize = serializeCV;\n/**\n * `Cl.deserialize` — Deserializes a hex string to the equivalent Clarity JS object\n *\n * Alias for {@link deserializeCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.deserialize(\"0c00000001016103\");\n * ```\n * @see {@link serialize}\n */\nexport const deserialize = deserializeCV;\n\n// todo: add `deserializeReadable` methods that translates enums into name strings\n","import {\n  BooleanCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseErrorCV,\n  ResponseOkCV,\n  ListCV,\n  TupleCV,\n  StringAsciiCV,\n  StringUtf8CV,\n  NoneCV,\n  SomeCV,\n  TrueCV,\n  FalseCV,\n} from '.';\n\nimport { principalToString } from './types/principalCV';\nimport { ClarityType } from './constants';\nimport { asciiToBytes, bytesToAscii, bytesToHex, utf8ToBytes } from '@stacks/common';\n\nexport type ClarityValue =\n  | BooleanCV\n  | BufferCV\n  | IntCV\n  | UIntCV\n  | StandardPrincipalCV\n  | ContractPrincipalCV\n  | ResponseErrorCV\n  | ResponseOkCV\n  | NoneCV\n  | SomeCV\n  | ListCV\n  | TupleCV\n  | StringAsciiCV\n  | StringUtf8CV;\n\nexport function cvToString(val: ClarityValue, encoding: 'tryAscii' | 'hex' = 'hex'): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return 'true';\n    case ClarityType.BoolFalse:\n      return 'false';\n    case ClarityType.Int:\n      return val.value.toString();\n    case ClarityType.UInt:\n      return `u${val.value.toString()}`;\n    case ClarityType.Buffer:\n      if (encoding === 'tryAscii') {\n        const str = bytesToAscii(val.buffer);\n        if (/[ -~]/.test(str)) {\n          return JSON.stringify(str);\n        }\n      }\n      return `0x${bytesToHex(val.buffer)}`;\n    case ClarityType.OptionalNone:\n      return 'none';\n    case ClarityType.OptionalSome:\n      return `(some ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseErr:\n      return `(err ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseOk:\n      return `(ok ${cvToString(val.value, encoding)})`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return `(list ${val.list.map(v => cvToString(v, encoding)).join(' ')})`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${cvToString(val.data[key], encoding)})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `\"${val.data}\"`;\n    case ClarityType.StringUTF8:\n      return `u\"${val.data}\"`;\n  }\n}\n\n/**\n * @param strictJsonCompat If true then ints and uints are returned as JSON serializable numbers when\n * less than or equal to 53 bit length, otherwise string wrapped integers when larger than 53 bits.\n * If false, they are returned as js native `bigint`s which are _not_ JSON serializable.\n */\nexport function cvToValue(val: ClarityValue, strictJsonCompat: boolean = false): any {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return true;\n    case ClarityType.BoolFalse:\n      return false;\n    case ClarityType.Int:\n    case ClarityType.UInt:\n      if (strictJsonCompat) {\n        return val.value.toString();\n      }\n      return val.value;\n    case ClarityType.Buffer:\n      return `0x${bytesToHex(val.buffer)}`;\n    case ClarityType.OptionalNone:\n      return null;\n    case ClarityType.OptionalSome:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseErr:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseOk:\n      return cvToJSON(val.value);\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return val.list.map(v => cvToJSON(v));\n    case ClarityType.Tuple:\n      const result: { [key: string]: any } = {};\n      Object.keys(val.data).forEach(key => {\n        result[key] = cvToJSON(val.data[key]);\n      });\n      return result;\n    case ClarityType.StringASCII:\n      return val.data;\n    case ClarityType.StringUTF8:\n      return val.data;\n  }\n}\n\nexport function cvToJSON(val: ClarityValue): any {\n  switch (val.type) {\n    case ClarityType.ResponseErr:\n      return { type: getCVTypeString(val), value: cvToValue(val, true), success: false };\n    case ClarityType.ResponseOk:\n      return { type: getCVTypeString(val), value: cvToValue(val, true), success: true };\n    default:\n      return { type: getCVTypeString(val), value: cvToValue(val, true) };\n  }\n}\n\nexport function getCVTypeString(val: ClarityValue): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return 'bool';\n    case ClarityType.Int:\n      return 'int';\n    case ClarityType.UInt:\n      return 'uint';\n    case ClarityType.Buffer:\n      return `(buff ${val.buffer.length})`;\n    case ClarityType.OptionalNone:\n      return '(optional none)';\n    case ClarityType.OptionalSome:\n      return `(optional ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseErr:\n      return `(response UnknownType ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseOk:\n      return `(response ${getCVTypeString(val.value)} UnknownType)`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return 'principal';\n    case ClarityType.List:\n      return `(list ${val.list.length} ${\n        val.list.length ? getCVTypeString(val.list[0]) : 'UnknownType'\n      })`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${getCVTypeString(val.data[key])})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `(string-ascii ${asciiToBytes(val.data).length})`;\n    case ClarityType.StringUTF8:\n      return `(string-utf8 ${utf8ToBytes(val.data).length})`;\n  }\n}\n\ntype ClarityTypetoValue = {\n  [ClarityType.OptionalNone]: NoneCV;\n  [ClarityType.OptionalSome]: SomeCV;\n  [ClarityType.ResponseOk]: ResponseOkCV;\n  [ClarityType.ResponseErr]: ResponseErrorCV;\n  [ClarityType.BoolTrue]: TrueCV;\n  [ClarityType.BoolFalse]: FalseCV;\n  [ClarityType.Int]: IntCV;\n  [ClarityType.UInt]: UIntCV;\n  [ClarityType.StringASCII]: StringAsciiCV;\n  [ClarityType.StringUTF8]: StringUtf8CV;\n  [ClarityType.PrincipalStandard]: StandardPrincipalCV;\n  [ClarityType.PrincipalContract]: ContractPrincipalCV;\n  [ClarityType.List]: ListCV;\n  [ClarityType.Tuple]: TupleCV;\n  [ClarityType.Buffer]: BufferCV;\n};\n\n/**\n * Narrow down the type of a generic ClarityValue\n * @example\n * ```ts\n * // some functions can return a generic `ClarityValue` type\n * let value = callReadOnlyFunction();\n * //  ^ ClarityValue\n * // use `isClarityType` to narrow down the type\n * assert(isClarityType(value, ClarityType.Int))\n * console.log(value)\n * //          ^ IntCV\n * ```\n */\nexport function isClarityType<T extends ClarityType>(\n  input: ClarityValue,\n  withType: T\n): input is ClarityTypetoValue[T] {\n  return input.type === withType;\n}\n","/**\n * Type IDs corresponding to each of the Clarity value types as described here:\n * {@link https://github.com/blockstack/blockstack-core/blob/sip/sip-005/sip/sip-005-blocks-and-transactions.md#clarity-value-representation}\n */\nexport enum ClarityType {\n  Int = 0x00,\n  UInt = 0x01,\n  Buffer = 0x02,\n  BoolTrue = 0x03,\n  BoolFalse = 0x04,\n  PrincipalStandard = 0x05,\n  PrincipalContract = 0x06,\n  ResponseOk = 0x07,\n  ResponseErr = 0x08,\n  OptionalNone = 0x09,\n  OptionalSome = 0x0a,\n  List = 0x0b,\n  Tuple = 0x0c,\n  StringASCII = 0x0d,\n  StringUTF8 = 0x0e,\n}\n","import {\n  ClarityType,\n  ClarityValue,\n  intCV,\n  uintCV,\n  bufferCV,\n  trueCV,\n  falseCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCVFromAddress,\n  responseOkCV,\n  responseErrorCV,\n  noneCV,\n  someCV,\n  listCV,\n  tupleCV,\n} from '.';\nimport { BytesReader as BytesReader } from '../bytesReader';\nimport { deserializeAddress, deserializeLPString } from '../types';\nimport { DeserializationError } from '../errors';\nimport { stringAsciiCV, stringUtf8CV } from './types/stringCV';\nimport { bytesToAscii, bytesToUtf8, hexToBytes } from '@stacks/common';\n\n/**\n * Deserializes clarity value to clarity type\n *\n * @param {value} Uint8Array | string value to be converted to clarity type\n **\n * @returns {ClarityType} returns the clarity type instance\n *\n * @example\n * ```\n *  import { intCV, serializeCV, deserializeCV } from '@stacks/transactions';\n *\n *  const serialized = serializeCV(intCV(100)); // Similarly works for other clarity types as well like listCV, booleanCV ...\n *\n *  // <Uint8Array 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64>\n *\n *  const deserialized = deserializeCV(serialized);\n *  // { type: 0, value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport default function deserializeCV<T extends ClarityValue = ClarityValue>(\n  serializedClarityValue: BytesReader | Uint8Array | string\n): T {\n  let bytesReader: BytesReader;\n  if (typeof serializedClarityValue === 'string') {\n    const hasHexPrefix = serializedClarityValue.slice(0, 2).toLowerCase() === '0x';\n    bytesReader = new BytesReader(\n      hexToBytes(hasHexPrefix ? serializedClarityValue.slice(2) : serializedClarityValue)\n    );\n  } else if (serializedClarityValue instanceof Uint8Array) {\n    bytesReader = new BytesReader(serializedClarityValue);\n  } else {\n    bytesReader = serializedClarityValue;\n  }\n  const type = bytesReader.readUInt8Enum(ClarityType, n => {\n    throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n  });\n\n  switch (type) {\n    case ClarityType.Int:\n      return intCV(bytesReader.readBytes(16)) as T;\n\n    case ClarityType.UInt:\n      return uintCV(bytesReader.readBytes(16)) as T;\n\n    case ClarityType.Buffer:\n      const bufferLength = bytesReader.readUInt32BE();\n      return bufferCV(bytesReader.readBytes(bufferLength)) as T;\n\n    case ClarityType.BoolTrue:\n      return trueCV() as T;\n\n    case ClarityType.BoolFalse:\n      return falseCV() as T;\n\n    case ClarityType.PrincipalStandard:\n      const sAddress = deserializeAddress(bytesReader);\n      return standardPrincipalCVFromAddress(sAddress) as T;\n\n    case ClarityType.PrincipalContract:\n      const cAddress = deserializeAddress(bytesReader);\n      const contractName = deserializeLPString(bytesReader);\n      return contractPrincipalCVFromAddress(cAddress, contractName) as T;\n\n    case ClarityType.ResponseOk:\n      return responseOkCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityType.ResponseErr:\n      return responseErrorCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityType.OptionalNone:\n      return noneCV() as T;\n\n    case ClarityType.OptionalSome:\n      return someCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityType.List:\n      const listLength = bytesReader.readUInt32BE();\n      const listContents: ClarityValue[] = [];\n      for (let i = 0; i < listLength; i++) {\n        listContents.push(deserializeCV(bytesReader));\n      }\n      return listCV(listContents) as T;\n\n    case ClarityType.Tuple:\n      const tupleLength = bytesReader.readUInt32BE();\n      const tupleContents: { [key: string]: ClarityValue } = {};\n      for (let i = 0; i < tupleLength; i++) {\n        const clarityName = deserializeLPString(bytesReader).content;\n        if (clarityName === undefined) {\n          throw new DeserializationError('\"content\" is undefined');\n        }\n        tupleContents[clarityName] = deserializeCV(bytesReader);\n      }\n      return tupleCV(tupleContents) as T;\n\n    case ClarityType.StringASCII:\n      const asciiStrLen = bytesReader.readUInt32BE();\n      const asciiStr = bytesToAscii(bytesReader.readBytes(asciiStrLen));\n      return stringAsciiCV(asciiStr) as T;\n\n    case ClarityType.StringUTF8:\n      const utf8StrLen = bytesReader.readUInt32BE();\n      const utf8Str = bytesToUtf8(bytesReader.readBytes(utf8StrLen));\n      return stringUtf8CV(utf8Str) as T;\n\n    default:\n      throw new DeserializationError(\n        'Unable to deserialize Clarity Value from Uint8Array. Could not find valid Clarity Type.'\n      );\n  }\n}\n","import {\n  concatArray,\n  concatBytes,\n  bigIntToBytes,\n  toTwos,\n  writeUInt32BE,\n  utf8ToBytes,\n  asciiToBytes,\n} from '@stacks/common';\nimport { serializeAddress, serializeLPString } from '../types';\nimport { createLPString } from '../postcondition-types';\nimport {\n  BooleanCV,\n  OptionalCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseCV,\n  ListCV,\n  TupleCV,\n  ClarityValue,\n} from '.';\nimport { ClarityType } from './constants';\n\nimport { SerializationError } from '../errors';\nimport { StringAsciiCV, StringUtf8CV } from './types/stringCV';\nimport { CLARITY_INT_BYTE_SIZE, CLARITY_INT_SIZE } from '../constants';\n\nfunction bytesWithTypeID(typeId: ClarityType, bytes: Uint8Array): Uint8Array {\n  return concatArray([typeId, bytes]);\n}\n\nfunction serializeBoolCV(value: BooleanCV): Uint8Array {\n  return new Uint8Array([value.type]);\n}\n\nfunction serializeOptionalCV(cv: OptionalCV): Uint8Array {\n  if (cv.type === ClarityType.OptionalNone) {\n    return new Uint8Array([cv.type]);\n  } else {\n    return bytesWithTypeID(cv.type, serializeCV(cv.value));\n  }\n}\n\nfunction serializeBufferCV(cv: BufferCV): Uint8Array {\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, cv.buffer.length, 0);\n  return bytesWithTypeID(cv.type, concatBytes(length, cv.buffer));\n}\n\nfunction serializeIntCV(cv: IntCV): Uint8Array {\n  const bytes = bigIntToBytes(toTwos(cv.value, BigInt(CLARITY_INT_SIZE)), CLARITY_INT_BYTE_SIZE);\n  return bytesWithTypeID(cv.type, bytes);\n}\n\nfunction serializeUIntCV(cv: UIntCV): Uint8Array {\n  const bytes = bigIntToBytes(cv.value, CLARITY_INT_BYTE_SIZE);\n  return bytesWithTypeID(cv.type, bytes);\n}\n\nfunction serializeStandardPrincipalCV(cv: StandardPrincipalCV): Uint8Array {\n  return bytesWithTypeID(cv.type, serializeAddress(cv.address));\n}\n\nfunction serializeContractPrincipalCV(cv: ContractPrincipalCV): Uint8Array {\n  return bytesWithTypeID(\n    cv.type,\n    concatBytes(serializeAddress(cv.address), serializeLPString(cv.contractName))\n  );\n}\n\nfunction serializeResponseCV(cv: ResponseCV) {\n  return bytesWithTypeID(cv.type, serializeCV(cv.value));\n}\n\nfunction serializeListCV(cv: ListCV) {\n  const bytesArray = [];\n\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, cv.list.length, 0);\n  bytesArray.push(length);\n\n  for (const value of cv.list) {\n    const serializedValue = serializeCV(value);\n    bytesArray.push(serializedValue);\n  }\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeTupleCV(cv: TupleCV) {\n  const bytesArray = [];\n\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, Object.keys(cv.data).length, 0);\n  bytesArray.push(length);\n\n  const lexicographicOrder = Object.keys(cv.data).sort((a, b) => a.localeCompare(b));\n\n  for (const key of lexicographicOrder) {\n    const nameWithLength = createLPString(key);\n    bytesArray.push(serializeLPString(nameWithLength));\n\n    const serializedValue = serializeCV(cv.data[key]);\n    bytesArray.push(serializedValue);\n  }\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeStringCV(cv: StringAsciiCV | StringUtf8CV, encoding: 'ascii' | 'utf8') {\n  const bytesArray = [];\n\n  const str = encoding == 'ascii' ? asciiToBytes(cv.data) : utf8ToBytes(cv.data);\n  const len = new Uint8Array(4);\n  writeUInt32BE(len, str.length, 0);\n\n  bytesArray.push(len);\n  bytesArray.push(str);\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeStringAsciiCV(cv: StringAsciiCV) {\n  return serializeStringCV(cv, 'ascii');\n}\n\nfunction serializeStringUtf8CV(cv: StringUtf8CV) {\n  return serializeStringCV(cv, 'utf8');\n}\n\n/**\n * Serializes clarity value to Uint8Array\n *\n * @param {ClarityValue} value to be converted to bytes\n *\n * @returns {Uint8Array} returns the bytes\n *\n * @example\n * ```\n *  import { intCV, serializeCV } from '@stacks/transactions';\n *\n *  const serialized = serializeCV(intCV(100)); // Similarly works for other clarity types as well like listCV, booleanCV ...\n *\n *  // <Uint8Array 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64>\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function serializeCV(value: ClarityValue): Uint8Array {\n  switch (value.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return serializeBoolCV(value);\n    case ClarityType.OptionalNone:\n    case ClarityType.OptionalSome:\n      return serializeOptionalCV(value);\n    case ClarityType.Buffer:\n      return serializeBufferCV(value);\n    case ClarityType.UInt:\n      return serializeUIntCV(value);\n    case ClarityType.Int:\n      return serializeIntCV(value);\n    case ClarityType.PrincipalStandard:\n      return serializeStandardPrincipalCV(value);\n    case ClarityType.PrincipalContract:\n      return serializeContractPrincipalCV(value);\n    case ClarityType.ResponseOk:\n    case ClarityType.ResponseErr:\n      return serializeResponseCV(value);\n    case ClarityType.List:\n      return serializeListCV(value);\n    case ClarityType.Tuple:\n      return serializeTupleCV(value);\n    case ClarityType.StringASCII:\n      return serializeStringAsciiCV(value);\n    case ClarityType.StringUTF8:\n      return serializeStringUtf8CV(value);\n    default:\n      throw new SerializationError('Unable to serialize. Invalid Clarity Value.');\n  }\n}\n","import { ClarityType } from '../constants';\n\ntype BooleanCV = TrueCV | FalseCV;\n\ninterface TrueCV {\n  type: ClarityType.BoolTrue;\n}\n\ninterface FalseCV {\n  type: ClarityType.BoolFalse;\n}\n\n/**\n * Converts true to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { trueCV } from '@stacks/transactions';\n *\n *  const trueCV = trueCV();\n *  // { type: 3 }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst trueCV = (): BooleanCV => ({ type: ClarityType.BoolTrue });\n\n/**\n * Converts false to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { falseCV } from '@stacks/transactions';\n *\n *  const falseCV = falseCV();\n *  // { type: 4 }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst falseCV = (): BooleanCV => ({ type: ClarityType.BoolFalse });\n\n/**\n * Converts a boolean to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { boolCV } from '@stacks/transactions';\n *\n *  const boolCV = boolCV(false);\n *  // { type: 4 }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst boolCV = (bool: boolean) => (bool ? trueCV() : falseCV());\n\nexport { BooleanCV, TrueCV, FalseCV, boolCV, trueCV, falseCV };\n","import { utf8ToBytes } from '@stacks/common';\nimport { ClarityType } from '../constants';\n\ninterface BufferCV {\n  readonly type: ClarityType.Buffer;\n  readonly buffer: Uint8Array;\n}\n\n/**\n * Converts a Uint8Array to a BufferCV clarity type\n *\n * @param {Uint8Array} buffer value to be converted to clarity type\n *\n * @returns {BufferCV} returns instance of type BufferCV\n *\n * @example\n * ```\n *  import { bufferCV } from '@stacks/transactions';\n *\n *  const buffer = utf8ToBytes('this is a test');\n *  const buf = bufferCV(buffer);\n *  // { type: 2, buffer: <Uint8Array 74 68 69 73 20 69 73 20 61 20 74 65 73 74> }\n *  const value = bytesToUtf8(buf.buffer);\n *  // this is a test\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst bufferCV = (buffer: Uint8Array): BufferCV => {\n  // max size 1024 * 1024 = 1MB; https://github.com/stacks-network/stacks-core/blob/c50a93088d7c0261f1dbe31ab24b95028a038447/clarity/src/vm/types/mod.rs#L47\n  if (buffer.byteLength > 1_048_576) {\n    throw new Error('Cannot construct clarity buffer that is greater than 1MB');\n  }\n\n  return { type: ClarityType.Buffer, buffer };\n};\n\n/**\n * Converts a string to BufferCV clarity type\n *\n * @param {str} string input to be converted to bufferCV clarity type\n *\n * @returns {BufferCV} returns instance of type BufferCV\n *\n * @example\n * ```\n *  import { bufferCVFromString } from '@stacks/transactions';\n *\n *  const str = 'this is a test';\n *  const buf = bufferCVFromString(str);\n *  // { type: 2, buffer: <Buffer 74 68 69 73 20 69 73 20 61 20 74 65 73 74> }\n *  const value = bytesToUtf8(buf.buffer);\n *  // this is a test\n *```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst bufferCVFromString = (str: string): BufferCV => bufferCV(utf8ToBytes(str));\n\nexport { BufferCV, bufferCV, bufferCVFromString };\n","import { IntegerType, intToBigInt } from '@stacks/common';\nimport { ClarityType } from '../constants';\n\nconst MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff'); // (2 ** 128 - 1)\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff'); // (2 ** 127 - 1)\n// no signed (negative) hex support in bigint constructor\nconst MIN_I128 = BigInt('-170141183460469231731687303715884105728'); // (-2 ** 127)\n\ninterface IntCV {\n  readonly type: ClarityType.Int;\n  readonly value: bigint;\n}\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to IntCV clarity type\n *\n * @returns {IntCV} returns instance of type IntCV\n *\n * @example\n * ```\n *  import { intCV } from '@stacks/transactions';\n *\n *  const value = intCV('100'); // parameter any of type: number | string | bigint | Uint8Array | BN\n *  // { type: 0, value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst intCV = (value: IntegerType): IntCV => {\n  const bigInt = intToBigInt(value, true);\n  if (bigInt > MAX_I128) {\n    throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128}`);\n  } else if (bigInt < MIN_I128) {\n    throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128}`);\n  }\n  return { type: ClarityType.Int, value: bigInt };\n};\n\ninterface UIntCV {\n  readonly type: ClarityType.UInt;\n  readonly value: bigint;\n}\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to UIntCV clarity type (Only unsigned integer is allowed otherwise throws exception)\n *\n * @returns {UIntCV} returns instance of type UIntCV\n *\n * @example\n * ```\n *  import { uintCV } from '@stacks/transactions';\n *\n *  const value = uintCV('100'); // parameter any of type: number | string | bigint | Uint8Array | BN\n *  // { type: 1, value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst uintCV = (value: IntegerType): UIntCV => {\n  const bigInt = intToBigInt(value, false);\n  if (bigInt < MIN_U128) {\n    throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n  } else if (bigInt > MAX_U128) {\n    throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128}`);\n  }\n  return { type: ClarityType.UInt, value: bigInt };\n};\n\nexport { IntCV, UIntCV, intCV, uintCV };\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\n\ninterface ListCV<T extends ClarityValue = ClarityValue> {\n  type: ClarityType.List;\n  list: T[];\n}\n\n/**\n * Create list of clarity types\n *\n * @param {ClarityValue[]} list of ClarityValues to be converted to ListCV clarity type\n *\n * @returns {ListCV<T>} instance of type ListCV<T> of the provided values\n *\n * @example\n * ```\n *  import { listCV, intCV } from '@stacks/transactions';\n *\n *  const list = listCV([intCV(1), intCV(2), intCV(3), intCV(-4)]);\n *  // { type: 11, list: [ { type: 0, value: 1n }, { type: 0, value: 2n }, { type: 0, value: 3n }, { type: 0, value: -4n } ] }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction listCV<T extends ClarityValue = ClarityValue>(values: T[]): ListCV<T> {\n  return { type: ClarityType.List, list: values };\n}\n\nexport { ListCV, listCV };\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\ntype OptionalCV<T extends ClarityValue = ClarityValue> = NoneCV | SomeCV<T>;\n\ninterface NoneCV {\n  readonly type: ClarityType.OptionalNone;\n}\n\ninterface SomeCV<T extends ClarityValue = ClarityValue> {\n  readonly type: ClarityType.OptionalSome;\n  readonly value: T;\n}\n\n/**\n * Create a null clarity type\n **\n * @returns {NoneCV} returns instance of type NoneCV\n *\n * @example\n * ```\n *  import { noneCV } from '@stacks/transactions';\n *\n *  const value = noneCV();\n *  // { type: 9 }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction noneCV(): NoneCV {\n  return { type: ClarityType.OptionalNone };\n}\n\n/**\n * Converts any ClarityValue in to OptionalCV clarity type\n *\n * @param {ClarityValue} value to be converted to OptionalCV clarity type\n *\n * @returns {OptionalCV} returns instance of type OptionalCV\n *\n * @example\n * ```\n *  import { someCV, trueCV } from '@stacks/transactions';\n *\n *  const value = someCV(trueCV());\n *  // { type: 10, value: { type: 3 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction someCV<T extends ClarityValue = ClarityValue>(value: T): OptionalCV<T> {\n  return { type: ClarityType.OptionalSome, value };\n}\n\nfunction optionalCVOf<T extends ClarityValue = ClarityValue>(value?: T): OptionalCV<T> {\n  if (value) {\n    return someCV(value);\n  } else {\n    return noneCV();\n  }\n}\n\nexport { OptionalCV, NoneCV, SomeCV, noneCV, someCV, optionalCVOf };\n","import { utf8ToBytes } from '@stacks/common';\nimport { Address, addressToString } from '../../common';\nimport { LengthPrefixedString, createAddress, createLPString } from '../../postcondition-types';\nimport { ClarityType } from '../constants';\n\ntype PrincipalCV = StandardPrincipalCV | ContractPrincipalCV;\n\ninterface StandardPrincipalCV {\n  readonly type: ClarityType.PrincipalStandard;\n  readonly address: Address;\n}\n\ninterface ContractPrincipalCV {\n  readonly type: ClarityType.PrincipalContract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n/** Returns a string in the format `address` or `address.contract-name` from a principal (standard or contract) */\nfunction principalToString(principal: PrincipalCV): string {\n  if (principal.type === ClarityType.PrincipalStandard) {\n    return addressToString(principal.address);\n  } else if (principal.type === ClarityType.PrincipalContract) {\n    const address = addressToString(principal.address);\n    return `${address}.${principal.contractName.content}`;\n  } else {\n    throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n  }\n}\n\nfunction principalCV(principal: string): PrincipalCV {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCV } from '@stacks/transactions';\n *\n *  const addr = standardPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B');\n *  // { type: 5, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction standardPrincipalCV(addressString: string): StandardPrincipalCV {\n  const addr = createAddress(addressString);\n  return { type: ClarityType.PrincipalStandard, address: addr };\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCVFromAddress, Address  } from '@stacks/transactions';\n *\n *  const address: Address = {\n *    type: 0,\n *    version: 22,\n *    hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6'\n *  };\n *\n *  const principalCV = standardPrincipalCVFromAddress(address);\n *  // { type: 5, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction standardPrincipalCVFromAddress(address: Address): StandardPrincipalCV {\n  return { type: ClarityType.PrincipalStandard, address };\n}\n\n/**\n * Converts stx address in to ContractPrincipalCV clarity type\n * @param {addressString} string value to be converted to ContractPrincipalCV clarity type\n * @param {contractName} string containing contract name\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCV } from '@stacks/transactions';\n *\n *  const contractAddress = contractPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B', 'test');\n *  // { type: 6, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction contractPrincipalCV(addressString: string, contractName: string): ContractPrincipalCV {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\n\n/**\n * Create ContractPrincipalCV from Address type\n * @param {address} address value to be converted to ContractPrincipalCV clarity type\n * @param {contractName} contract name of type LengthPrefixedString\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCVFromAddress, createLPString, createAddress } from '@stacks/transactions';\n *\n *  const contractAddressCV = contractPrincipalCVFromAddress(createAddress('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B'), createLPString('test'));\n *\n *  // { type: 6, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction contractPrincipalCVFromAddress(\n  address: Address,\n  contractName: LengthPrefixedString\n): ContractPrincipalCV {\n  if (utf8ToBytes(contractName.content).byteLength >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n  return { type: ClarityType.PrincipalContract, address, contractName };\n}\n\nfunction contractPrincipalCVFromStandard(\n  sp: StandardPrincipalCV,\n  contractName: string\n): ContractPrincipalCV {\n  const lengthPrefixedContractName = createLPString(contractName);\n  return {\n    type: ClarityType.PrincipalContract,\n    address: sp.address,\n    contractName: lengthPrefixedContractName,\n  };\n}\n\nexport {\n  PrincipalCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  principalCV,\n  principalToString,\n  standardPrincipalCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCV,\n  contractPrincipalCVFromAddress,\n  contractPrincipalCVFromStandard,\n};\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\n\ntype ResponseCV = ResponseErrorCV | ResponseOkCV;\n\ninterface ResponseErrorCV<T extends ClarityValue = ClarityValue> {\n  readonly type: ClarityType.ResponseErr;\n  readonly value: T;\n}\n\ninterface ResponseOkCV<T extends ClarityValue = ClarityValue> {\n  readonly type: ClarityType.ResponseOk;\n  readonly value: T;\n}\n\n/**\n * Converts ClarityValue to responseErrorCV\n *\n * @param {value} ClarityValue value to be converted to responseErrorCV clarity type\n *\n * @returns {responseErrorCV} returns instance of type responseErrorCV\n *\n * @example\n * ```\n *  import { responseErrorCV, intCV } from '@stacks/transactions';\n *\n *  const respErrorCV = responseErrorCV(intCV(1));\n *\n *  // { type: 8, value: { type: 0, value: 1n } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction responseErrorCV<T extends ClarityValue = ClarityValue>(value: T): ResponseErrorCV<T> {\n  return { type: ClarityType.ResponseErr, value };\n}\n\n/**\n * Converts ClarityValue to ResponseOkCV\n *\n * @param {value} ClarityValue value to be converted to ResponseOkCV clarity type\n *\n * @returns {ResponseOkCV} returns instance of type ResponseOkCV\n *\n * @example\n * ```\n *  import { responseOkCV, intCV } from '@stacks/transactions';\n *\n *  const respOKCV = responseOkCV(intCV(1));\n *\n *  // { type: 7, value: { type: 0, value: 1n } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction responseOkCV<T extends ClarityValue = ClarityValue>(value: T): ResponseOkCV<T> {\n  return { type: ClarityType.ResponseOk, value };\n}\n\nexport { ResponseCV, ResponseErrorCV, ResponseOkCV, responseErrorCV, responseOkCV };\n","import { ClarityType } from '../constants';\n\ninterface StringAsciiCV {\n  readonly type: ClarityType.StringASCII;\n  readonly data: string;\n}\n\ninterface StringUtf8CV {\n  readonly type: ClarityType.StringUTF8;\n  readonly data: string;\n}\n\n/**\n * Converts ClarityValue to stringAsciiCV\n *\n * @param {data} ClarityValue value to be converted to stringAsciiCV clarity type\n *\n * @returns {StringAsciiCV} returns instance of type StringAsciiCV\n *\n * @example\n * ```\n *  import { stringAsciiCV } from '@stacks/transactions';\n *\n *  const stringAscii = stringAsciiCV('test');\n *\n *  // { type: 13, data: 'hello' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst stringAsciiCV = (data: string): StringAsciiCV => {\n  return { type: ClarityType.StringASCII, data };\n};\n\n/**\n * Converts ClarityValue to stringUtf8CV\n *\n * @param {data} ClarityValue value to be converted to stringUtf8CV clarity type\n *\n * @returns {stringUtf8CV} returns instance of type stringUtf8CV\n *\n * @example\n * ```\n *  import { stringUtf8CV } from '@stacks/transactions';\n *\n *  const stringUTF8 = stringUtf8CV('test');\n *\n *  // { type: 13, data: 'hello' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nconst stringUtf8CV = (data: string): StringUtf8CV => {\n  return { type: ClarityType.StringUTF8, data };\n};\n\n/**\n * @ignore\n */\nconst stringCV = (data: string, encoding: 'ascii' | 'utf8'): StringAsciiCV | StringUtf8CV => {\n  switch (encoding) {\n    case 'ascii':\n      return stringAsciiCV(data);\n    case 'utf8':\n      return stringUtf8CV(data);\n  }\n};\n\nexport { StringAsciiCV, StringUtf8CV, stringAsciiCV, stringUtf8CV, stringCV };\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\nimport { isClarityName } from '../../utils';\n\ntype TupleData<T extends ClarityValue = ClarityValue> = { [key: string]: T };\n\ninterface TupleCV<T extends TupleData = TupleData> {\n  type: ClarityType.Tuple;\n  data: T;\n}\n\n/**\n * Create tuple of clarity values\n *\n * @param {tupleData} tuple value to be converted to tuple of clarity types\n *\n * @returns {TupleCV} returns instance of type clarity tuple\n *\n * @example\n * ```\n *  import { tupleCV, trueCV, falseCV } from '@stacks/transactions';\n *\n *  const tuple = tupleCV({\n *    c: trueCV(),\n *    b: falseCV(),\n *    a: trueCV(),\n *  });\n *  // { type: 12, data: { c: { type: 3 }, b: { type: 4 }, a: { type: 3 } } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction tupleCV<T extends ClarityValue = ClarityValue>(data: TupleData<T>): TupleCV<TupleData<T>> {\n  for (const key in data) {\n    if (!isClarityName(key)) {\n      throw new Error(`\"${key}\" is not a valid Clarity name`);\n    }\n  }\n\n  return { type: ClarityType.Tuple, data };\n}\n\nexport { TupleCV, tupleCV };\n","import {\n  AddressHashMode,\n  AddressVersion,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  StacksMessageType,\n  TransactionVersion,\n} from './constants';\n\nimport { c32address } from 'c32check';\nimport { hexToBytes } from '@stacks/common';\n\nexport interface Address {\n  readonly type: StacksMessageType.Address;\n  readonly version: AddressVersion;\n  readonly hash160: string;\n}\n\nexport interface MessageSignature {\n  readonly type: StacksMessageType.MessageSignature;\n  data: string;\n}\n\nexport function createMessageSignature(signature: string): MessageSignature {\n  const length = hexToBytes(signature).byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: signature,\n  };\n}\n\n/**\n * Translates the tx auth hash mode to the corresponding address version.\n * @see https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#transaction-authorization\n */\nexport function addressHashModeToVersion(\n  hashMode: AddressHashMode,\n  txVersion: TransactionVersion\n): AddressVersion {\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetSingleSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetSingleSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    case AddressHashMode.SerializeP2SH:\n    case AddressHashMode.SerializeP2WPKH:\n    case AddressHashMode.SerializeP2WSH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetMultiSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetMultiSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    default:\n      throw new Error(`Unexpected hashMode ${JSON.stringify(hashMode)}`);\n  }\n}\n\nexport function addressFromVersionHash(version: AddressVersion, hash: string): Address {\n  return { type: StacksMessageType.Address, version, hash160: hash };\n}\n\nexport function addressToString(address: Address): string {\n  return c32address(address.version, address.hash160);\n}\n","/**\n * The chain ID (unsigned 32-bit integer), used so transactions can't be replayed on other chains.\n * Similar to the {@link TransactionVersion}.\n */\nexport enum ChainID {\n  Testnet = 0x80000000,\n  Mainnet = 0x00000001,\n}\n\nexport const DEFAULT_CHAIN_ID = ChainID.Mainnet;\nexport const MAX_STRING_LENGTH_BYTES = 128;\nexport const CLARITY_INT_SIZE = 128;\nexport const CLARITY_INT_BYTE_SIZE = 16;\nexport const COINBASE_BYTES_LENGTH = 32;\nexport const VRF_PROOF_BYTES_LENGTH = 80;\nexport const RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;\nexport const COMPRESSED_PUBKEY_LENGTH_BYTES = 32;\nexport const UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;\nexport const MEMO_MAX_LENGTH_BYTES = 34;\nexport const DEFAULT_CORE_NODE_API_URL = 'https://api.mainnet.hiro.so';\n\n// todo: add explicit enum values\n/**\n * The type of message that is being serialized.\n * Used internally for serializing and deserializing messages.\n */\nexport enum StacksMessageType {\n  Address,\n  Principal,\n  LengthPrefixedString,\n  MemoString,\n  AssetInfo,\n  PostCondition,\n  PublicKey,\n  LengthPrefixedList,\n  Payload,\n  MessageSignature,\n  StructuredDataSignature,\n  TransactionAuthField,\n}\n\ntype WhenMessageTypeMap<T> = Record<StacksMessageType, T>;\n\nexport function whenMessageType(messageType: StacksMessageType) {\n  return <T>(messageTypeMap: WhenMessageTypeMap<T>): T => messageTypeMap[messageType];\n}\n\n/**\n * The type of transaction (payload) that is being serialized.\n * Used internally for serializing and deserializing transactions.\n */\nexport enum PayloadType {\n  TokenTransfer = 0x00,\n  SmartContract = 0x01,\n  VersionedSmartContract = 0x06,\n  ContractCall = 0x02,\n  PoisonMicroblock = 0x03,\n  Coinbase = 0x04,\n  CoinbaseToAltRecipient = 0x05,\n  TenureChange = 0x7,\n  NakamotoCoinbase = 0x08,\n}\n\n/**\n * The version of Clarity used to deploy a smart contract.\n * Most methods will default to the latest available version of Clarity.\n */\nexport enum ClarityVersion {\n  Clarity1 = 1,\n  Clarity2 = 2,\n}\n\n/**\n * How a transaction should get appended to the Stacks blockchain.\n *\n * In the Stacks blockchain, there are two kinds of blocks: anchored\n * blocks and streaming microblocks. A transactions AnchorMode specifies\n * which kind of block it should be included in.\n *\n * For more information about the kinds of Stacks blocks and the various\n * AnchorModes, check out {@link https://github.com/stacksgov/sips/blob/main/sips/sip-001/sip-001-burn-election.md SIP 001} and\n * {@link https://github.com/stacksgov/sips/blob/main/sips/sip-005/sip-005-blocks-and-transactions.md SIP 005}\n */\nexport enum AnchorMode {\n  /** The transaction MUST be included in an anchored block */\n  OnChainOnly = 0x01,\n  /** The transaction MUST be included in a microblock */\n  OffChainOnly = 0x02,\n  /** The leader can choose where to include the transaction (anchored block or microblock)*/\n  Any = 0x03,\n}\n\nexport const AnchorModeNames = ['onChainOnly', 'offChainOnly', 'any'] as const;\nexport type AnchorModeName = (typeof AnchorModeNames)[number];\n\nconst AnchorModeMap = {\n  [AnchorModeNames[0]]: AnchorMode.OnChainOnly,\n  [AnchorModeNames[1]]: AnchorMode.OffChainOnly,\n  [AnchorModeNames[2]]: AnchorMode.Any,\n  [AnchorMode.OnChainOnly]: AnchorMode.OnChainOnly,\n  [AnchorMode.OffChainOnly]: AnchorMode.OffChainOnly,\n  [AnchorMode.Any]: AnchorMode.Any,\n};\n\n/** @ignore */\nexport function anchorModeFromNameOrValue(mode: AnchorModeName | AnchorMode): AnchorMode {\n  if (mode in AnchorModeMap) return AnchorModeMap[mode];\n  throw new Error(`Invalid anchor mode \"${mode}\", must be one of: ${AnchorModeNames.join(', ')}`);\n}\n\n/**\n * The transaction version, used so transactions can't be replayed on other networks.\n * Similar to the {@link ChainID}.\n * Used internally for serializing and deserializing transactions.\n */\nexport enum TransactionVersion {\n  Mainnet = 0x00,\n  Testnet = 0x80,\n}\n\nexport const DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;\n\n/**\n * How to treat unspecified transfers of a transaction.\n * Used for creating transactions.\n *\n * Post-conditions are **always** be validated by nodes, regardless of the {@link PostConditionMode}.\n * `PostConditionMode.Allow` will allow additional (aka unspecified) transfers, while `PostConditionMode.Deny` will not.\n */\nexport enum PostConditionMode {\n  /** `Allow` — Allow unspecified transfers */\n  Allow = 0x01,\n  /** `Deny` — Do not allow unspecified transfers */\n  Deny = 0x02,\n}\n\n/**\n * The type of asset a post-condition is referring to.\n * Used for serializing post-conditions.\n */\nexport enum PostConditionType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\n/**\n * The sponsorship mode of a transaction.\n *\n * Specifies whether a transaction is sponsored or not.\n */\nexport enum AuthType {\n  /** `Standard` (not sponsored) — The transaction is not sponsored. The sender will need to spend fees. */\n  Standard = 0x04,\n  /** `Sponsored` — The transaction is sponsored. The sponsor will spend fees on behalf of the sender. */\n  Sponsored = 0x05,\n}\n\n/**\n * Serialization modes for public keys to addresses.\n * Four different modes are supported due to legacy compatibility with Stacks v1 addresses.\n */\nexport enum AddressHashMode {\n  /** `SingleSigHashMode` — hash160(public-key), same as bitcoin's p2pkh */\n  SerializeP2PKH = 0x00,\n  /** `MultiSigHashMode` — hash160(multisig-redeem-script), same as bitcoin's multisig p2sh */\n  SerializeP2SH = 0x01,\n  /** `SingleSigHashMode` — hash160(segwit-program-00(p2pkh)), same as bitcoin's p2sh-p2wpkh */\n  SerializeP2WPKH = 0x02,\n  /** `MultiSigHashMode` — hash160(segwit-program-00(public-keys)), same as bitcoin's p2sh-p2wsh */\n  SerializeP2WSH = 0x03,\n}\n\nexport type SingleSigHashMode = AddressHashMode.SerializeP2PKH | AddressHashMode.SerializeP2WPKH;\nexport type MultiSigHashMode = AddressHashMode.SerializeP2SH | AddressHashMode.SerializeP2WSH;\n\n/**\n * Address versions for identifying address types in an encoded Stacks address.\n * The address version is a single byte, indicating the address type.\n * Every Stacks address starts with `S` followed by a single character indicating the address version.\n * The second character is the c32-encoded AddressVersion byte.\n */\nexport enum AddressVersion {\n  /** `P` — A single-sig address for mainnet (starting with `SP`) */\n  MainnetSingleSig = 22,\n  /** `M` — A multi-sig address for mainnet (starting with `SM`) */\n  MainnetMultiSig = 20,\n  /** `T` — A single-sig address for testnet (starting with `ST`) */\n  TestnetSingleSig = 26,\n  /** `N` — A multi-sig address for testnet (starting with `SN`) */\n  TestnetMultiSig = 21,\n}\n\n// todo: try to remove this\nexport enum PubKeyEncoding {\n  Compressed = 0x00,\n  Uncompressed = 0x01,\n}\n\n/**\n * The type of fungible token post-condition comparison.\n * Used for serializing post-conditions.\n */\nexport enum FungibleConditionCode {\n  Equal = 0x01,\n  Greater = 0x02,\n  GreaterEqual = 0x03,\n  Less = 0x04,\n  LessEqual = 0x05,\n}\n\n/**\n * The type of non-fungible token post-condition comparison.\n * Used for serializing post-conditions.\n */\nexport enum NonFungibleConditionCode {\n  Sends = 0x10,\n  DoesNotSend = 0x11,\n}\n\n/**\n * The type of sender for a post-condition.\n */\nexport enum PostConditionPrincipalID {\n  Origin = 0x01,\n  Standard = 0x02,\n  Contract = 0x03,\n}\n\n/**\n * The type of asset used in a post-condition.\n */\nexport enum AssetType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\n// todo: refactor this, if only used in one place, just use a string\n/** @ignore */\nexport enum TxRejectedReason {\n  Serialization = 'Serialization',\n  Deserialization = 'Deserialization',\n  SignatureValidation = 'SignatureValidation',\n  FeeTooLow = 'FeeTooLow',\n  BadNonce = 'BadNonce',\n  NotEnoughFunds = 'NotEnoughFunds',\n  NoSuchContract = 'NoSuchContract',\n  NoSuchPublicFunction = 'NoSuchPublicFunction',\n  BadFunctionArgument = 'BadFunctionArgument',\n  ContractAlreadyExists = 'ContractAlreadyExists',\n  PoisonMicroblocksDoNotConflict = 'PoisonMicroblocksDoNotConflict',\n  PoisonMicroblockHasUnknownPubKeyHash = 'PoisonMicroblockHasUnknownPubKeyHash',\n  PoisonMicroblockIsInvalid = 'PoisonMicroblockIsInvalid',\n  BadAddressVersionByte = 'BadAddressVersionByte',\n  NoCoinbaseViaMempool = 'NoCoinbaseViaMempool',\n  ServerFailureNoSuchChainTip = 'ServerFailureNoSuchChainTip',\n  TooMuchChaining = 'TooMuchChaining',\n  ConflictingNonceInMempool = 'ConflictingNonceInMempool',\n  BadTransactionVersion = 'BadTransactionVersion',\n  TransferRecipientCannotEqualSender = 'TransferRecipientCannotEqualSender',\n  TransferAmountMustBePositive = 'TransferAmountMustBePositive',\n  ServerFailureDatabase = 'ServerFailureDatabase',\n  EstimatorError = 'EstimatorError',\n  TemporarilyBlacklisted = 'TemporarilyBlacklisted',\n  ServerFailureOther = 'ServerFailureOther',\n}\n","import { hexToBytes, utf8ToBytes } from '@stacks/common';\nimport {\n  ClarityType,\n  ClarityValue,\n  bufferCV,\n  bufferCVFromString,\n  contractPrincipalCV,\n  falseCV,\n  getCVTypeString,\n  intCV,\n  noneCV,\n  someCV,\n  standardPrincipalCV,\n  trueCV,\n  uintCV,\n} from './clarity';\nimport { stringAsciiCV, stringUtf8CV } from './clarity/types/stringCV';\nimport { NotImplementedError } from './errors';\nimport { ContractCallPayload } from './payload';\nimport { cloneDeep } from './utils';\n\n// From https://github.com/blockstack/stacks-blockchain-sidecar/blob/master/src/event-stream/contract-abi.ts\n\nexport type ClarityAbiTypeBuffer = { buffer: { length: number } };\nexport type ClarityAbiTypeStringAscii = { 'string-ascii': { length: number } };\nexport type ClarityAbiTypeStringUtf8 = { 'string-utf8': { length: number } };\nexport type ClarityAbiTypeResponse = { response: { ok: ClarityAbiType; error: ClarityAbiType } };\nexport type ClarityAbiTypeOptional = { optional: ClarityAbiType };\nexport type ClarityAbiTypeTuple = { tuple: { name: string; type: ClarityAbiType }[] };\nexport type ClarityAbiTypeList = { list: { type: ClarityAbiType; length: number } };\n\nexport type ClarityAbiTypeUInt128 = 'uint128';\nexport type ClarityAbiTypeInt128 = 'int128';\nexport type ClarityAbiTypeBool = 'bool';\nexport type ClarityAbiTypePrincipal = 'principal';\nexport type ClarityAbiTypeTraitReference = 'trait_reference';\nexport type ClarityAbiTypeNone = 'none';\n\nexport type ClarityAbiTypePrimitive =\n  | ClarityAbiTypeUInt128\n  | ClarityAbiTypeInt128\n  | ClarityAbiTypeBool\n  | ClarityAbiTypePrincipal\n  | ClarityAbiTypeTraitReference\n  | ClarityAbiTypeNone;\n\nexport type ClarityAbiType =\n  | ClarityAbiTypePrimitive\n  | ClarityAbiTypeBuffer\n  | ClarityAbiTypeResponse\n  | ClarityAbiTypeOptional\n  | ClarityAbiTypeTuple\n  | ClarityAbiTypeList\n  | ClarityAbiTypeStringAscii\n  | ClarityAbiTypeStringUtf8\n  | ClarityAbiTypeTraitReference;\n\nexport enum ClarityAbiTypeId {\n  ClarityAbiTypeUInt128 = 1,\n  ClarityAbiTypeInt128 = 2,\n  ClarityAbiTypeBool = 3,\n  ClarityAbiTypePrincipal = 4,\n  ClarityAbiTypeNone = 5,\n  ClarityAbiTypeBuffer = 6,\n  ClarityAbiTypeResponse = 7,\n  ClarityAbiTypeOptional = 8,\n  ClarityAbiTypeTuple = 9,\n  ClarityAbiTypeList = 10,\n  ClarityAbiTypeStringAscii = 11,\n  ClarityAbiTypeStringUtf8 = 12,\n  ClarityAbiTypeTraitReference = 13,\n}\n\nexport const isClarityAbiPrimitive = (val: ClarityAbiType): val is ClarityAbiTypePrimitive =>\n  typeof val === 'string';\nexport const isClarityAbiBuffer = (val: ClarityAbiType): val is ClarityAbiTypeBuffer =>\n  (val as ClarityAbiTypeBuffer).buffer !== undefined;\nexport const isClarityAbiStringAscii = (val: ClarityAbiType): val is ClarityAbiTypeStringAscii =>\n  (val as ClarityAbiTypeStringAscii)['string-ascii'] !== undefined;\nexport const isClarityAbiStringUtf8 = (val: ClarityAbiType): val is ClarityAbiTypeStringUtf8 =>\n  (val as ClarityAbiTypeStringUtf8)['string-utf8'] !== undefined;\nexport const isClarityAbiResponse = (val: ClarityAbiType): val is ClarityAbiTypeResponse =>\n  (val as ClarityAbiTypeResponse).response !== undefined;\nexport const isClarityAbiOptional = (val: ClarityAbiType): val is ClarityAbiTypeOptional =>\n  (val as ClarityAbiTypeOptional).optional !== undefined;\nexport const isClarityAbiTuple = (val: ClarityAbiType): val is ClarityAbiTypeTuple =>\n  (val as ClarityAbiTypeTuple).tuple !== undefined;\nexport const isClarityAbiList = (val: ClarityAbiType): val is ClarityAbiTypeList =>\n  (val as ClarityAbiTypeList).list !== undefined;\n\nexport type ClarityAbiTypeUnion =\n  | { id: ClarityAbiTypeId.ClarityAbiTypeUInt128; type: ClarityAbiTypeUInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeInt128; type: ClarityAbiTypeInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBool; type: ClarityAbiTypeBool }\n  | { id: ClarityAbiTypeId.ClarityAbiTypePrincipal; type: ClarityAbiTypePrincipal }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference; type: ClarityAbiTypeTraitReference }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeNone; type: ClarityAbiTypeNone }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBuffer; type: ClarityAbiTypeBuffer }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeResponse; type: ClarityAbiTypeResponse }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeOptional; type: ClarityAbiTypeOptional }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTuple; type: ClarityAbiTypeTuple }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeList; type: ClarityAbiTypeList }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii; type: ClarityAbiTypeStringAscii }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8; type: ClarityAbiTypeStringUtf8 };\n\nexport function getTypeUnion(val: ClarityAbiType): ClarityAbiTypeUnion {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'uint128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeUInt128, type: val };\n    } else if (val === 'int128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeInt128, type: val };\n    } else if (val === 'bool') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeBool, type: val };\n    } else if (val === 'principal') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypePrincipal, type: val };\n    } else if (val === 'trait_reference') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference, type: val };\n    } else if (val === 'none') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeNone, type: val };\n    } else {\n      throw new Error(`Unexpected Clarity ABI type primitive: ${JSON.stringify(val)}`);\n    }\n  } else if (isClarityAbiBuffer(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeBuffer, type: val };\n  } else if (isClarityAbiResponse(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeResponse, type: val };\n  } else if (isClarityAbiOptional(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeOptional, type: val };\n  } else if (isClarityAbiTuple(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeTuple, type: val };\n  } else if (isClarityAbiList(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeList, type: val };\n  } else if (isClarityAbiStringAscii(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii, type: val };\n  } else if (isClarityAbiStringUtf8(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8, type: val };\n  } else {\n    throw new Error(`Unexpected Clarity ABI type: ${JSON.stringify(val)}`);\n  }\n}\n\n/**\n * Convert a string to a Clarity value based on the ABI type.\n *\n * Currently does NOT support some nested Clarity ABI types:\n * - ClarityAbiTypeResponse\n * - ClarityAbiTypeTuple\n * - ClarityAbiTypeList\n */\nexport function encodeAbiClarityValue(\n  value: string,\n  type: ClarityAbiType | ClarityAbiTypeUnion\n): ClarityValue {\n  const union = (type as ClarityAbiTypeUnion).id\n    ? (type as ClarityAbiTypeUnion)\n    : getTypeUnion(type as ClarityAbiType);\n  switch (union.id) {\n    case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n      return uintCV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeInt128:\n      return intCV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeBool:\n      if (value === 'false' || value === '0') return falseCV();\n      else if (value === 'true' || value === '1') return trueCV();\n      else throw new Error(`Unexpected Clarity bool value: ${JSON.stringify(value)}`);\n    case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n      if (value.includes('.')) {\n        const [addr, name] = value.split('.');\n        return contractPrincipalCV(addr, name);\n      } else {\n        return standardPrincipalCV(value);\n      }\n    case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n      const [addr, name] = value.split('.');\n      return contractPrincipalCV(addr, name);\n    case ClarityAbiTypeId.ClarityAbiTypeNone:\n      return noneCV();\n    case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n      return bufferCV(hexToBytes(value));\n    case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n      return stringAsciiCV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n      return stringUtf8CV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeOptional:\n      return someCV(encodeAbiClarityValue(value, union.type.optional));\n    case ClarityAbiTypeId.ClarityAbiTypeResponse:\n    case ClarityAbiTypeId.ClarityAbiTypeTuple:\n    case ClarityAbiTypeId.ClarityAbiTypeList:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    default:\n      throw new Error(`Unexpected Clarity type ID: ${JSON.stringify(union)}`);\n  }\n}\n\n/** @deprecated due to a breaking bug for the buffer encoding case, this was fixed and renamed to {@link clarityAbiStringToCV} */\nexport function encodeClarityValue(type: ClarityAbiType, value: string): ClarityValue;\nexport function encodeClarityValue(type: ClarityAbiTypeUnion, value: string): ClarityValue;\nexport function encodeClarityValue(\n  type: ClarityAbiTypeUnion | ClarityAbiType,\n  value: string\n): ClarityValue {\n  const union = (type as ClarityAbiTypeUnion).id\n    ? (type as ClarityAbiTypeUnion)\n    : getTypeUnion(type as ClarityAbiType);\n\n  if (union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer) {\n    return bufferCV(utf8ToBytes(value)); // legacy behavior\n  }\n\n  return encodeAbiClarityValue(value, union);\n}\n\nexport function getTypeString(val: ClarityAbiType): string {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'int128') {\n      return 'int';\n    } else if (val === 'uint128') {\n      return 'uint';\n    }\n    return val;\n  } else if (isClarityAbiBuffer(val)) {\n    return `(buff ${val.buffer.length})`;\n  } else if (isClarityAbiStringAscii(val)) {\n    return `(string-ascii ${val['string-ascii'].length})`;\n  } else if (isClarityAbiStringUtf8(val)) {\n    return `(string-utf8 ${val['string-utf8'].length})`;\n  } else if (isClarityAbiResponse(val)) {\n    return `(response ${getTypeString(val.response.ok)} ${getTypeString(val.response.error)})`;\n  } else if (isClarityAbiOptional(val)) {\n    return `(optional ${getTypeString(val.optional)})`;\n  } else if (isClarityAbiTuple(val)) {\n    return `(tuple ${val.tuple.map(t => `(${t.name} ${getTypeString(t.type)})`).join(' ')})`;\n  } else if (isClarityAbiList(val)) {\n    return `(list ${val.list.length} ${getTypeString(val.list.type)})`;\n  } else {\n    throw new Error(`Type string unsupported for Clarity type: ${JSON.stringify(val)}`);\n  }\n}\n\nexport interface ClarityAbiFunction {\n  name: string;\n  access: 'private' | 'public' | 'read_only';\n  args: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  outputs: {\n    type: ClarityAbiType;\n  };\n}\n\nexport function abiFunctionToString(func: ClarityAbiFunction): string {\n  const access = func.access === 'read_only' ? 'read-only' : func.access;\n  return `(define-${access} (${func.name} ${func.args\n    .map(arg => `(${arg.name} ${getTypeString(arg.type)})`)\n    .join(' ')}))`;\n}\n\nexport interface ClarityAbiVariable {\n  name: string;\n  access: 'variable' | 'constant';\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbiMap {\n  name: string;\n  key: ClarityAbiType;\n  value: ClarityAbiType;\n}\n\nexport interface ClarityAbiTypeFungibleToken {\n  name: string;\n}\n\nexport interface ClarityAbiTypeNonFungibleToken {\n  name: string;\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbi {\n  functions: ClarityAbiFunction[];\n  variables: ClarityAbiVariable[];\n  maps: ClarityAbiMap[];\n  fungible_tokens: ClarityAbiTypeFungibleToken[];\n  non_fungible_tokens: ClarityAbiTypeNonFungibleToken[];\n}\n\nfunction matchType(cv: ClarityValue, abiType: ClarityAbiType): boolean {\n  const union = getTypeUnion(abiType);\n\n  switch (cv.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n    case ClarityType.Int:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n    case ClarityType.UInt:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n    case ClarityType.Buffer:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer &&\n        union.type.buffer.length >= cv.buffer.length\n      );\n    case ClarityType.StringASCII:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii &&\n        union.type['string-ascii'].length >= cv.data.length\n      );\n    case ClarityType.StringUTF8:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 &&\n        union.type['string-utf8'].length >= cv.data.length\n      );\n    case ClarityType.OptionalNone:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeNone ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional\n      );\n    case ClarityType.OptionalSome:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional &&\n        matchType(cv.value, union.type.optional)\n      );\n    case ClarityType.ResponseErr:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.error)\n      );\n    case ClarityType.ResponseOk:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.ok)\n      );\n    case ClarityType.PrincipalContract:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference\n      );\n    case ClarityType.PrincipalStandard:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n    case ClarityType.List:\n      return (\n        union.id == ClarityAbiTypeId.ClarityAbiTypeList &&\n        union.type.list.length >= cv.list.length &&\n        cv.list.every(val => matchType(val, union.type.list.type))\n      );\n    case ClarityType.Tuple:\n      if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n        const tuple = cloneDeep(cv.data);\n        for (let i = 0; i < union.type.tuple.length; i++) {\n          const abiTupleEntry = union.type.tuple[i];\n          const key = abiTupleEntry.name;\n          const val = tuple[key];\n\n          // if key exists in cv tuple, check if its type matches the abi\n          // return false if key doesn't exist\n          if (val) {\n            if (!matchType(val, abiTupleEntry.type)) {\n              return false;\n            }\n            delete tuple[key];\n          } else {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n}\n\n/**\n * Validates a contract-call payload with a contract ABI\n *\n * @param {ContractCallPayload} payload - a contract-call payload\n * @param {ClarityAbi} abi - a contract ABI\n *\n * @returns {boolean} true if the payloads functionArgs type check against those in the ABI\n */\nexport function validateContractCall(payload: ContractCallPayload, abi: ClarityAbi): boolean {\n  const filtered = abi.functions.filter(fn => fn.name === payload.functionName.content);\n  if (filtered.length === 1) {\n    const abiFunc = filtered[0];\n    const abiArgs = abiFunc.args;\n\n    if (payload.functionArgs.length !== abiArgs.length) {\n      throw new Error(\n        `Clarity function expects ${abiArgs.length} argument(s) but received ${payload.functionArgs.length}`\n      );\n    }\n\n    for (let i = 0; i < payload.functionArgs.length; i++) {\n      const payloadArg = payload.functionArgs[i];\n      const abiArg = abiArgs[i];\n\n      if (!matchType(payloadArg, abiArg.type)) {\n        const argNum = i + 1;\n        throw new Error(\n          `Clarity function \\`${\n            payload.functionName.content\n          }\\` expects argument ${argNum} to be of type ${getTypeString(\n            abiArg.type\n          )}, not ${getCVTypeString(payloadArg)}`\n        );\n      }\n    }\n\n    return true;\n  } else if (filtered.length === 0) {\n    throw new Error(`ABI doesn't contain a function with the name ${payload.functionName.content}`);\n  } else {\n    throw new Error(\n      `Malformed ABI. Contains multiple functions with the name ${payload.functionName.content}`\n    );\n  }\n}\n\n/**\n * Convert string input to Clarity value based on contract ABI data. Only handles Clarity\n * primitives and buffers. Responses, optionals, tuples and lists are not supported.\n *\n * @param {string} input - string to be parsed into Clarity value\n * @param {ClarityAbiType} type - the contract function argument object\n *\n * @returns {ClarityValue} returns a Clarity value\n */\nexport function parseToCV(input: string, type: ClarityAbiType): ClarityValue {\n  const typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return uintCV(input);\n    } else if (type === 'int128') {\n      return intCV(input);\n    } else if (type === 'bool') {\n      if (input.toLowerCase() === 'true') {\n        return trueCV();\n      } else if (input.toLowerCase() === 'false') {\n        return falseCV();\n      } else {\n        throw new Error(`Invalid bool value: ${input}`);\n      }\n    } else if (type === 'principal') {\n      if (input.includes('.')) {\n        const [address, contractName] = input.split('.');\n        return contractPrincipalCV(address, contractName);\n      } else {\n        return standardPrincipalCV(input);\n      }\n    } else {\n      throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    const inputLength = utf8ToBytes(input).byteLength;\n    if (inputLength > type.buffer.length) {\n      throw new Error(`Input exceeds specified buffer length limit of ${type.buffer.length}`);\n    }\n    return bufferCVFromString(input);\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiList(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  }\n}\n","class TransactionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class SerializationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class DeserializationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Thrown when `NoEstimateAvailable` is received as an error reason from a\n * Stacks node. The Stacks node has not seen this kind of contract-call before,\n * and it cannot provide an estimate yet.\n * @see https://docs.hiro.so/api#tag/Fees/operation/post_fee_transaction\n */\nexport class NoEstimateAvailableError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class NotImplementedError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class SigningError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class VerificationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","import { hexToInt } from './utils';\nconst COORDINATE_BYTES = 32;\nexport function parseRecoverableSignatureVrs(signature) {\n    if (signature.length < COORDINATE_BYTES * 2 * 2 + 1) {\n        throw new Error('Invalid signature');\n    }\n    const recoveryIdHex = signature.slice(0, 2);\n    const r = signature.slice(2, 2 + COORDINATE_BYTES * 2);\n    const s = signature.slice(2 + COORDINATE_BYTES * 2);\n    return {\n        recoveryId: hexToInt(recoveryIdHex),\n        r,\n        s,\n    };\n}\nexport function signatureVrsToRsv(signature) {\n    return signature.slice(2) + signature.slice(0, 2);\n}\nexport function signatureRsvToVrs(signature) {\n    return signature.slice(-2) + signature.slice(0, -2);\n}\n//# sourceMappingURL=signatures.js.map","import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport {\n  getPublicKey as nobleGetPublicKey,\n  Point,\n  Signature,\n  signSync,\n  utils,\n} from '@noble/secp256k1';\nimport {\n  bytesToHex,\n  concatArray,\n  hexToBigInt,\n  hexToBytes,\n  intToHex,\n  parseRecoverableSignatureVrs,\n  privateKeyToBytes,\n  PRIVATE_KEY_COMPRESSED_LENGTH,\n  signatureRsvToVrs,\n  signatureVrsToRsv,\n} from '@stacks/common';\nimport { c32address } from 'c32check';\nimport { BytesReader } from './bytesReader';\nimport {\n  addressFromVersionHash,\n  addressHashModeToVersion,\n  addressToString,\n  createMessageSignature,\n  MessageSignature,\n} from './common';\nimport {\n  AddressHashMode,\n  AddressVersion,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  PubKeyEncoding,\n  StacksMessageType,\n  TransactionVersion,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n} from './constants';\nimport { hash160, hashP2PKH } from './utils';\nimport { StructuredDataSignature } from './message-types';\n\n/**\n * To use secp256k1.signSync set utils.hmacSha256Sync to a function using noble-hashes\n * secp256k1.signSync is the counter part of secp256k1.sign (async version)\n * secp256k1.signSync is used within signWithKey in this file\n * secp256k1.signSync is used to maintain the semantics of signWithKey while migrating from elliptic lib\n * utils.hmacSha256Sync docs: https://github.com/paulmillr/noble-secp256k1 readme file\n */\nutils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport interface StacksPublicKey {\n  readonly type: StacksMessageType.PublicKey;\n  readonly data: Uint8Array;\n}\n\n/** Creates a P2PKH address string from the given private key and tx version. */\nexport function getAddressFromPrivateKey(\n  /** Private key bytes or hex string */\n  privateKey: string | Uint8Array,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  const pubKey = pubKeyfromPrivKey(privateKey);\n  return getAddressFromPublicKey(pubKey.data, transactionVersion);\n}\n\n/** Creates a P2PKH address string from the given public key and tx version. */\nexport function getAddressFromPublicKey(\n  /** Public key bytes or hex string */\n  publicKey: string | Uint8Array,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  publicKey = typeof publicKey === 'string' ? publicKey : bytesToHex(publicKey);\n  const addrVer = addressHashModeToVersion(AddressHashMode.SerializeP2PKH, transactionVersion);\n  const addr = addressFromVersionHash(addrVer, hashP2PKH(hexToBytes(publicKey)));\n  const addrString = addressToString(addr);\n  return addrString;\n}\n\nexport function createStacksPublicKey(key: string): StacksPublicKey {\n  return {\n    type: StacksMessageType.PublicKey,\n    data: hexToBytes(key),\n  };\n}\n\nexport function publicKeyFromSignatureVrs(\n  messageHash: string,\n  messageSignature: MessageSignature | StructuredDataSignature,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n): string {\n  const parsedSignature = parseRecoverableSignatureVrs(messageSignature.data);\n  const signature = new Signature(hexToBigInt(parsedSignature.r), hexToBigInt(parsedSignature.s));\n  const point = Point.fromSignature(messageHash, signature, parsedSignature.recoveryId);\n  const compressed = pubKeyEncoding === PubKeyEncoding.Compressed;\n  return point.toHex(compressed);\n}\n\nexport function publicKeyFromSignatureRsv(\n  messageHash: string,\n  messageSignature: MessageSignature | StructuredDataSignature,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n): string {\n  return publicKeyFromSignatureVrs(\n    messageHash,\n    { ...messageSignature, data: signatureRsvToVrs(messageSignature.data) },\n    pubKeyEncoding\n  );\n}\n\nexport function publicKeyFromBytes(data: Uint8Array): StacksPublicKey {\n  return { type: StacksMessageType.PublicKey, data };\n}\n\nexport function isCompressed(key: StacksPublicKey): boolean {\n  return !bytesToHex(key.data).startsWith('04');\n}\n\nexport function publicKeyToString(key: StacksPublicKey): string {\n  return bytesToHex(key.data);\n}\n\nexport function serializePublicKey(key: StacksPublicKey): Uint8Array {\n  return key.data.slice();\n}\n\nexport function pubKeyfromPrivKey(privateKey: string | Uint8Array): StacksPublicKey {\n  const privKey = createStacksPrivateKey(privateKey);\n  const publicKey = nobleGetPublicKey(privKey.data.slice(0, 32), privKey.compressed);\n  return createStacksPublicKey(bytesToHex(publicKey));\n}\n\nexport function compressPublicKey(publicKey: string | Uint8Array): StacksPublicKey {\n  const hex = typeof publicKey === 'string' ? publicKey : bytesToHex(publicKey);\n  const compressed = Point.fromHex(hex).toHex(true);\n  return createStacksPublicKey(compressed);\n}\n\nexport function deserializePublicKey(bytesReader: BytesReader): StacksPublicKey {\n  const fieldId = bytesReader.readUInt8();\n  const keyLength =\n    fieldId === 4 ? UNCOMPRESSED_PUBKEY_LENGTH_BYTES : COMPRESSED_PUBKEY_LENGTH_BYTES;\n  return publicKeyFromBytes(concatArray([fieldId, bytesReader.readBytes(keyLength)]));\n}\n\nexport interface StacksPrivateKey {\n  // \"compressed\" private key is a misnomer: https://web.archive.org/web/20220131144208/https://www.oreilly.com/library/view/mastering-bitcoin/9781491902639/ch04.html#comp_priv\n  // it actually means: should public keys be generated as \"compressed\" or \"uncompressed\" from this private key\n  compressed: boolean;\n  data: Uint8Array;\n}\n\nexport function createStacksPrivateKey(key: string | Uint8Array): StacksPrivateKey {\n  const data = privateKeyToBytes(key);\n  const compressed = data.length == PRIVATE_KEY_COMPRESSED_LENGTH;\n  return { data, compressed };\n}\n\nexport function makeRandomPrivKey(): StacksPrivateKey {\n  return createStacksPrivateKey(utils.randomPrivateKey());\n}\n\n/**\n * @deprecated The Clarity compatible {@link signMessageHashRsv} is preferred, but differs in signature format\n * @returns A recoverable signature (in VRS order)\n */\nexport function signWithKey(privateKey: StacksPrivateKey, messageHash: string): MessageSignature {\n  const [rawSignature, recoveryId] = signSync(messageHash, privateKey.data.slice(0, 32), {\n    canonical: true,\n    recovered: true,\n  });\n  if (recoveryId == null) {\n    throw new Error('No signature recoveryId received');\n  }\n  const recoveryIdHex = intToHex(recoveryId, 1);\n  const recoverableSignatureString = recoveryIdHex + Signature.fromHex(rawSignature).toCompactHex(); // V + RS\n  return createMessageSignature(recoverableSignatureString);\n}\n\n/**\n * Signs a message using a private key. The resulting signature along with the\n * original message can be verified using {@link verifyMessageSignatureRsv}\n * @returns A recoverable signature (in RSV order)\n */\nexport function signMessageHashRsv({\n  messageHash,\n  privateKey,\n}: {\n  messageHash: string;\n  privateKey: StacksPrivateKey;\n}): MessageSignature {\n  const messageSignature = signWithKey(privateKey, messageHash);\n  return { ...messageSignature, data: signatureVrsToRsv(messageSignature.data) };\n}\n\nexport function getPublicKey(privateKey: StacksPrivateKey): StacksPublicKey {\n  return pubKeyfromPrivKey(privateKey.data);\n}\n\nexport function privateKeyToString(privateKey: StacksPrivateKey): string {\n  return bytesToHex(privateKey.data);\n}\n\nexport function publicKeyToAddress(version: AddressVersion, publicKey: StacksPublicKey): string {\n  return c32address(version, bytesToHex(hash160(publicKey.data)));\n}\n","import { hexToBytes } from './utils';\nexport function privateKeyToBytes(privateKey) {\n    const privateKeyBuffer = typeof privateKey === 'string' ? hexToBytes(privateKey) : privateKey;\n    if (privateKeyBuffer.length != 32 && privateKeyBuffer.length != 33) {\n        throw new Error(`Improperly formatted private-key. Private-key byte length should be 32 or 33. Length provided: ${privateKeyBuffer.length}`);\n    }\n    if (privateKeyBuffer.length == 33 && privateKeyBuffer[32] !== 1) {\n        throw new Error('Improperly formatted private-key. 33 bytes indicate compressed key, but the last byte must be == 01');\n    }\n    return privateKeyBuffer;\n}\n//# sourceMappingURL=keys.js.map","import {\n  bytesToHex,\n  concatArray,\n  hexToBytes,\n  IntegerType,\n  intToBigInt,\n  intToBytes,\n  writeUInt32BE,\n  writeUInt8,\n} from '@stacks/common';\nimport { BytesReader } from './bytesReader';\nimport {\n  ClarityType,\n  ClarityValue,\n  deserializeCV,\n  noneCV,\n  OptionalCV,\n  serializeCV,\n  someCV,\n} from './clarity/';\nimport { PrincipalCV, principalCV } from './clarity/types/principalCV';\nimport { Address } from './common';\nimport {\n  ClarityVersion,\n  COINBASE_BYTES_LENGTH,\n  PayloadType,\n  StacksMessageType,\n  VRF_PROOF_BYTES_LENGTH,\n} from './constants';\nimport { createAddress, createLPString, LengthPrefixedString } from './postcondition-types';\nimport {\n  codeBodyString,\n  createMemoString,\n  deserializeAddress,\n  deserializeLPString,\n  deserializeMemoString,\n  MemoString,\n  serializeStacksMessage,\n} from './types';\n\nexport type Payload =\n  | TokenTransferPayload\n  | ContractCallPayload\n  | SmartContractPayload\n  | VersionedSmartContractPayload\n  | PoisonPayload\n  | CoinbasePayload\n  | CoinbasePayloadToAltRecipient\n  | NakamotoCoinbasePayload\n  | TenureChangePayload;\n\nexport function isTokenTransferPayload(p: Payload): p is TokenTransferPayload {\n  return p.payloadType === PayloadType.TokenTransfer;\n}\nexport function isContractCallPayload(p: Payload): p is ContractCallPayload {\n  return p.payloadType === PayloadType.ContractCall;\n}\nexport function isSmartContractPayload(p: Payload): p is SmartContractPayload {\n  return p.payloadType === PayloadType.SmartContract;\n}\nexport function isPoisonPayload(p: Payload): p is PoisonPayload {\n  return p.payloadType === PayloadType.PoisonMicroblock;\n}\nexport function isCoinbasePayload(p: Payload): p is CoinbasePayload {\n  return p.payloadType === PayloadType.Coinbase;\n}\n\nexport interface TokenTransferPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.TokenTransfer;\n  readonly recipient: PrincipalCV;\n  readonly amount: bigint;\n  readonly memo: MemoString;\n}\n\nexport type PayloadInput =\n  | (TokenTransferPayload | (Omit<TokenTransferPayload, 'amount'> & { amount: IntegerType }))\n  | ContractCallPayload\n  | SmartContractPayload\n  | VersionedSmartContractPayload\n  | PoisonPayload\n  | CoinbasePayload\n  | CoinbasePayloadToAltRecipient\n  | NakamotoCoinbasePayload\n  | TenureChangePayload;\n\nexport function createTokenTransferPayload(\n  recipient: string | PrincipalCV,\n  amount: IntegerType,\n  memo?: string | MemoString\n): TokenTransferPayload {\n  if (typeof recipient === 'string') {\n    recipient = principalCV(recipient);\n  }\n  if (typeof memo === 'string') {\n    memo = createMemoString(memo);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.TokenTransfer,\n    recipient,\n    amount: intToBigInt(amount, false),\n    memo: memo ?? createMemoString(''),\n  };\n}\n\nexport interface ContractCallPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.ContractCall;\n  readonly contractAddress: Address;\n  readonly contractName: LengthPrefixedString;\n  readonly functionName: LengthPrefixedString;\n  readonly functionArgs: ClarityValue[];\n}\n\nexport function createContractCallPayload(\n  contractAddress: string | Address,\n  contractName: string | LengthPrefixedString,\n  functionName: string | LengthPrefixedString,\n  functionArgs: ClarityValue[]\n): ContractCallPayload {\n  if (typeof contractAddress === 'string') {\n    contractAddress = createAddress(contractAddress);\n  }\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof functionName === 'string') {\n    functionName = createLPString(functionName);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.ContractCall,\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n  };\n}\n\nexport interface SmartContractPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.SmartContract;\n  readonly contractName: LengthPrefixedString;\n  readonly codeBody: LengthPrefixedString;\n}\n\nexport interface VersionedSmartContractPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.VersionedSmartContract;\n  readonly clarityVersion: ClarityVersion;\n  readonly contractName: LengthPrefixedString;\n  readonly codeBody: LengthPrefixedString;\n}\n\nexport function createSmartContractPayload(\n  contractName: string | LengthPrefixedString,\n  codeBody: string | LengthPrefixedString,\n  clarityVersion?: ClarityVersion\n): SmartContractPayload | VersionedSmartContractPayload {\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof codeBody === 'string') {\n    codeBody = codeBodyString(codeBody);\n  }\n\n  if (typeof clarityVersion === 'number') {\n    return {\n      type: StacksMessageType.Payload,\n      payloadType: PayloadType.VersionedSmartContract,\n      clarityVersion,\n      contractName,\n      codeBody,\n    };\n  }\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.SmartContract,\n    contractName,\n    codeBody,\n  };\n}\n\nexport interface PoisonPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.PoisonMicroblock;\n}\n\nexport function createPoisonPayload(): PoisonPayload {\n  return { type: StacksMessageType.Payload, payloadType: PayloadType.PoisonMicroblock };\n}\n\nexport interface CoinbasePayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.Coinbase;\n  readonly coinbaseBytes: Uint8Array;\n}\n\nexport interface CoinbasePayloadToAltRecipient {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.CoinbaseToAltRecipient;\n  readonly coinbaseBytes: Uint8Array;\n  readonly recipient: PrincipalCV;\n}\n\nexport function createCoinbasePayload(\n  coinbaseBytes: Uint8Array,\n  altRecipient?: PrincipalCV\n): CoinbasePayload | CoinbasePayloadToAltRecipient {\n  if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n    throw Error(`Coinbase buffer size must be ${COINBASE_BYTES_LENGTH} bytes`);\n  }\n\n  if (altRecipient != undefined) {\n    return {\n      type: StacksMessageType.Payload,\n      payloadType: PayloadType.CoinbaseToAltRecipient,\n      coinbaseBytes,\n      recipient: altRecipient,\n    };\n  }\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.Coinbase,\n    coinbaseBytes,\n  };\n}\n\nexport interface NakamotoCoinbasePayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.NakamotoCoinbase;\n  readonly coinbaseBytes: Uint8Array;\n  readonly recipient?: PrincipalCV;\n  readonly vrfProof: Uint8Array;\n}\n\nexport function createNakamotoCoinbasePayload(\n  coinbaseBytes: Uint8Array,\n  recipient: OptionalCV<PrincipalCV>,\n  vrfProof: Uint8Array\n): NakamotoCoinbasePayload {\n  if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n    throw Error(`Coinbase buffer size must be ${COINBASE_BYTES_LENGTH} bytes`);\n  }\n\n  if (vrfProof.byteLength != VRF_PROOF_BYTES_LENGTH) {\n    throw Error(`VRF proof buffer size must be ${VRF_PROOF_BYTES_LENGTH} bytes`);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.NakamotoCoinbase,\n    coinbaseBytes,\n    recipient: recipient.type === ClarityType.OptionalSome ? recipient.value : undefined,\n    vrfProof,\n  };\n}\n\nexport enum TenureChangeCause {\n  /** A valid winning block-commit */\n  BlockFound = 0,\n  /** The next burnchain block is taking too long, so extend the runtime budget */\n  Extended = 1,\n}\n\nexport interface TenureChangePayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.TenureChange;\n  /**\n   * The consensus hash of this tenure (hex string). Corresponds to the\n   * sortition in which the miner of this block was chosen. It may be the case\n   * that this miner's tenure gets _extended_ acrosssubsequent sortitions; if\n   * this happens, then this `consensus_hash` value _remains the same _as the\n   * sortition in which the winning block-commit was mined.\n   */\n  readonly tenureHash: string;\n  /**\n   * The consensus hash (hex string) of the previous tenure.  Corresponds to the\n   * sortition of the previous winning block-commit.\n   */\n  readonly previousTenureHash: string;\n  /**\n   * Current consensus hash (hex string) on the underlying burnchain.\n   * Corresponds to the last-seen sortition.\n   */\n  readonly burnViewHash: string;\n  /** Stacks block hash (hex string) */\n  readonly previousTenureEnd: string;\n  /** The number of blocks produced since the last sortition-linked tenure */\n  readonly previousTenureBlocks: number;\n  /** The cause of change in mining tenure */\n  readonly cause: TenureChangeCause;\n  /** The public key hash of the current tenure (hex string) */\n  readonly publicKeyHash: string;\n}\n\nexport function createTenureChangePayload(\n  tenureHash: string,\n  previousTenureHash: string,\n  burnViewHash: string,\n  previousTenureEnd: string,\n  previousTenureBlocks: number,\n  cause: TenureChangeCause,\n  publicKeyHash: string\n): TenureChangePayload {\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.TenureChange,\n    tenureHash,\n    previousTenureHash,\n    burnViewHash,\n    previousTenureEnd,\n    previousTenureBlocks,\n    cause,\n    publicKeyHash,\n  };\n}\n\nexport function serializePayload(payload: PayloadInput): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(payload.payloadType);\n\n  switch (payload.payloadType) {\n    case PayloadType.TokenTransfer:\n      bytesArray.push(serializeCV(payload.recipient));\n      bytesArray.push(intToBytes(payload.amount, false, 8));\n      bytesArray.push(serializeStacksMessage(payload.memo));\n      break;\n    case PayloadType.ContractCall:\n      bytesArray.push(serializeStacksMessage(payload.contractAddress));\n      bytesArray.push(serializeStacksMessage(payload.contractName));\n      bytesArray.push(serializeStacksMessage(payload.functionName));\n      const numArgs = new Uint8Array(4);\n      writeUInt32BE(numArgs, payload.functionArgs.length, 0);\n      bytesArray.push(numArgs);\n      payload.functionArgs.forEach(arg => {\n        bytesArray.push(serializeCV(arg));\n      });\n      break;\n    case PayloadType.SmartContract:\n      bytesArray.push(serializeStacksMessage(payload.contractName));\n      bytesArray.push(serializeStacksMessage(payload.codeBody));\n      break;\n    case PayloadType.VersionedSmartContract:\n      bytesArray.push(payload.clarityVersion);\n      bytesArray.push(serializeStacksMessage(payload.contractName));\n      bytesArray.push(serializeStacksMessage(payload.codeBody));\n      break;\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      break;\n    case PayloadType.Coinbase:\n      bytesArray.push(payload.coinbaseBytes);\n      break;\n    case PayloadType.CoinbaseToAltRecipient:\n      bytesArray.push(payload.coinbaseBytes);\n      bytesArray.push(serializeCV(payload.recipient));\n      break;\n    case PayloadType.NakamotoCoinbase:\n      bytesArray.push(payload.coinbaseBytes);\n      bytesArray.push(serializeCV(payload.recipient ? someCV(payload.recipient) : noneCV()));\n      bytesArray.push(payload.vrfProof);\n      break;\n    case PayloadType.TenureChange:\n      bytesArray.push(hexToBytes(payload.tenureHash));\n      bytesArray.push(hexToBytes(payload.previousTenureHash));\n      bytesArray.push(hexToBytes(payload.burnViewHash));\n      bytesArray.push(hexToBytes(payload.previousTenureEnd));\n      bytesArray.push(writeUInt32BE(new Uint8Array(4), payload.previousTenureBlocks));\n      bytesArray.push(writeUInt8(new Uint8Array(1), payload.cause));\n      bytesArray.push(hexToBytes(payload.publicKeyHash));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializePayload(bytesReader: BytesReader): Payload {\n  const payloadType = bytesReader.readUInt8Enum(PayloadType, n => {\n    throw new Error(`Cannot recognize PayloadType: ${n}`);\n  });\n\n  switch (payloadType) {\n    case PayloadType.TokenTransfer:\n      const recipient = deserializeCV(bytesReader) as PrincipalCV;\n      const amount = intToBigInt(bytesReader.readBytes(8), false);\n      const memo = deserializeMemoString(bytesReader);\n      return createTokenTransferPayload(recipient, amount, memo);\n    case PayloadType.ContractCall:\n      const contractAddress = deserializeAddress(bytesReader);\n      const contractCallName = deserializeLPString(bytesReader);\n      const functionName = deserializeLPString(bytesReader);\n      const functionArgs: ClarityValue[] = [];\n      const numberOfArgs = bytesReader.readUInt32BE();\n      for (let i = 0; i < numberOfArgs; i++) {\n        const clarityValue = deserializeCV(bytesReader);\n        functionArgs.push(clarityValue);\n      }\n      return createContractCallPayload(\n        contractAddress,\n        contractCallName,\n        functionName,\n        functionArgs\n      );\n    case PayloadType.SmartContract:\n      const smartContractName = deserializeLPString(bytesReader);\n      const codeBody = deserializeLPString(bytesReader, 4, 100_000);\n      return createSmartContractPayload(smartContractName, codeBody);\n\n    case PayloadType.VersionedSmartContract: {\n      const clarityVersion = bytesReader.readUInt8Enum(ClarityVersion, n => {\n        throw new Error(`Cannot recognize ClarityVersion: ${n}`);\n      });\n      const smartContractName = deserializeLPString(bytesReader);\n      const codeBody = deserializeLPString(bytesReader, 4, 100_000);\n      return createSmartContractPayload(smartContractName, codeBody, clarityVersion);\n    }\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      return createPoisonPayload();\n    case PayloadType.Coinbase: {\n      const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      return createCoinbasePayload(coinbaseBytes);\n    }\n    case PayloadType.CoinbaseToAltRecipient: {\n      const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      const altRecipient = deserializeCV(bytesReader) as PrincipalCV;\n      return createCoinbasePayload(coinbaseBytes, altRecipient);\n    }\n    case PayloadType.NakamotoCoinbase: {\n      const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      const recipient = deserializeCV(bytesReader) as OptionalCV<PrincipalCV>;\n      const vrfProof = bytesReader.readBytes(VRF_PROOF_BYTES_LENGTH);\n      return createNakamotoCoinbasePayload(coinbaseBytes, recipient, vrfProof);\n    }\n    case PayloadType.TenureChange:\n      const tenureHash = bytesToHex(bytesReader.readBytes(20));\n      const previousTenureHash = bytesToHex(bytesReader.readBytes(20));\n      const burnViewHash = bytesToHex(bytesReader.readBytes(20));\n      const previousTenureEnd = bytesToHex(bytesReader.readBytes(32));\n      const previousTenureBlocks = bytesReader.readUInt32BE();\n      const cause = bytesReader.readUInt8Enum(TenureChangeCause, n => {\n        throw new Error(`Cannot recognize TenureChangeCause: ${n}`);\n      });\n      const publicKeyHash = bytesToHex(bytesReader.readBytes(20));\n      return createTenureChangePayload(\n        tenureHash,\n        previousTenureHash,\n        burnViewHash,\n        previousTenureEnd,\n        previousTenureBlocks,\n        cause,\n        publicKeyHash\n      );\n  }\n}\n","import { IntegerType } from '@stacks/common';\nimport {\n  makeContractFungiblePostCondition,\n  makeContractNonFungiblePostCondition,\n  makeContractSTXPostCondition,\n  makeStandardFungiblePostCondition,\n  makeStandardNonFungiblePostCondition,\n  makeStandardSTXPostCondition,\n} from './builders';\nimport { ClarityValue } from './clarity';\nimport { FungibleConditionCode, NonFungibleConditionCode } from './constants';\nimport { createAssetInfo, NonFungiblePostCondition } from './postcondition-types';\n\n/// `Pc.` Post Condition Builder\n//\n// This is a behavioral helper interface for constructing post conditions.\n//\n// The general pattern is:\n//   PRINCIPAL -> [AMOUNT] -> CODE -> ASSET\n//\n\n/**\n * An address string encoded as c32check\n */\ntype AddressString = string;\n\n/**\n * A contract identifier string given as `<address>.<contract-name>`\n */\ntype ContractIdString = `${string}.${string}`;\n\n/**\n * An asset identifier string given as `<contract-id>::<token-name>` aka `<contract-address>.<contract-name>::<token-name>`\n */\ntype NftString = `${ContractIdString}::${string}`;\n\n/**\n * ### `Pc.` Post Condition Builder\n * @beta Interface may be subject to change in future releases.\n * @param {AddressString | ContractIdString} principal The principal to check, which should/should-not be sending assets. A string in the format \"address\" or \"address.contractId\".\n * @returns A partial post condition builder, which can be chained into a final post condition.\n * @example\n * ```\n * import { Pc } from '@stacks/transactions';\n * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendEq(10000).ustx();\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport function principal(principal: AddressString | ContractIdString) {\n  if (isContractIdString(principal)) {\n    // `principal` is a ContractIdString here\n    const [address, name] = parseContractId(principal);\n    return new PartialPcWithPrincipal(address, name);\n  }\n\n  return new PartialPcWithPrincipal(principal, undefined);\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcWithPrincipal {\n  constructor(\n    private address: string,\n    private contractName?: string\n  ) {}\n\n  // todo: split FT and STX into separate methods? e.g. `willSendSTXEq` and `willSendFtEq`\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Equal` (equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendEq(100).stx();\n   * ```\n   */\n  willSendEq(amount: IntegerType) {\n    return new PartialPcFtWithCode(\n      this.address,\n      amount,\n      FungibleConditionCode.Equal,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.LessEqual` (less-than or equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendLte(100).stx();\n   * ```\n   */\n  willSendLte(amount: IntegerType) {\n    return new PartialPcFtWithCode(\n      this.address,\n      amount,\n      FungibleConditionCode.LessEqual,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Less` (less-than) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendLt(100).stx();\n   * ```\n   */\n  willSendLt(amount: IntegerType) {\n    return new PartialPcFtWithCode(\n      this.address,\n      amount,\n      FungibleConditionCode.Less,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.GreaterEqual` (greater-than or equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendGte(100).stx();\n   * ```\n   */\n  willSendGte(amount: IntegerType) {\n    return new PartialPcFtWithCode(\n      this.address,\n      amount,\n      FungibleConditionCode.GreaterEqual,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Greater` (greater-than) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendGt(100).stx();\n   * ```\n   */\n  willSendGt(amount: IntegerType) {\n    return new PartialPcFtWithCode(\n      this.address,\n      amount,\n      FungibleConditionCode.Greater,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### NFT Post Condition\n   * A post-condition which `NonFungibleConditionCode.Sends` an NFT.\n   * Finalize with the chained `.nft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB4…K6.nft-contract').willSendAsset().nft('STB4…K6.super-nft::super', uintCV(1));\n   * ```\n   */\n  willSendAsset() {\n    return new PartialPcNftWithCode(\n      this.address,\n      NonFungibleConditionCode.Sends,\n      this.contractName\n    );\n  }\n\n  /**\n   * ### NFT Post Condition\n   * A post-condition which `NonFungibleConditionCode.DoesNotSend` an NFT.\n   * Finalize with the chained `.nft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB4…K6.nft-contract').willNotSendAsset().nft('STB4…K6.super-nft::super', uintCV(1));\n   * ```\n   */\n  willNotSendAsset() {\n    return new PartialPcNftWithCode(\n      this.address,\n      NonFungibleConditionCode.DoesNotSend,\n      this.contractName\n    );\n  }\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcFtWithCode {\n  constructor(\n    private address: string,\n    private amount: IntegerType,\n    private code: FungibleConditionCode,\n    private contractName?: string\n  ) {}\n\n  /**\n   * ### STX Post Condition\n   * ⚠ Amount of STX is denoted in uSTX (micro-STX)\n   */\n  ustx() {\n    // todo: rename to `uSTX`?\n    if (this.contractName) {\n      return makeContractSTXPostCondition(this.address, this.contractName, this.code, this.amount);\n    }\n    return makeStandardSTXPostCondition(this.address, this.code, this.amount);\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * ⚠ Amount of fungible tokens is denoted in the smallest unit of the token\n   */\n  ft(contractId: ContractIdString, tokenName: string) {\n    const [address, name] = parseContractId(contractId);\n    if (this.contractName) {\n      return makeContractFungiblePostCondition(\n        this.address,\n        this.contractName,\n        this.code,\n        this.amount,\n        createAssetInfo(address, name, tokenName)\n      );\n    }\n    return makeStandardFungiblePostCondition(\n      this.address,\n      this.code,\n      this.amount,\n      createAssetInfo(address, name, tokenName)\n    );\n  }\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcNftWithCode {\n  constructor(\n    private principal: string,\n    private code: NonFungibleConditionCode,\n    private contractName?: string\n  ) {}\n\n  /**\n   * ### Non-Fungible Token Post Condition\n   * @param assetName - The name of the NFT asset. Formatted as `<contract-address>.<contract-name>::<token-name>`.\n   * @param assetId - The asset identifier of the NFT. A Clarity value defining the single NFT instance.\n   */\n  nft(assetName: NftString, assetId: ClarityValue): NonFungiblePostCondition;\n  /**\n   * ### Non-Fungible Token Post Condition\n   * @param contractId - The contract identifier of the NFT. Formatted as `<contract-address>.<contract-name>`.\n   * @param tokenName - The name of the NFT asset.\n   * @param assetId - The asset identifier of the NFT. A Clarity value defining the single NFT instance.\n   */\n  nft(\n    contractId: ContractIdString,\n    tokenName: string,\n    assetId: ClarityValue\n  ): NonFungiblePostCondition;\n  nft(...args: [any, any] | [any, any, any]): NonFungiblePostCondition {\n    const { contractAddress, contractName, tokenName, assetId } = getNftArgs(\n      ...(args as [any, any, any])\n    );\n\n    if (this.contractName) {\n      return makeContractNonFungiblePostCondition(\n        this.principal,\n        this.contractName,\n        this.code,\n        createAssetInfo(contractAddress, contractName, tokenName),\n        assetId\n      );\n    }\n\n    return makeStandardNonFungiblePostCondition(\n      this.principal,\n      this.code,\n      createAssetInfo(contractAddress, contractName, tokenName),\n      assetId\n    );\n  }\n}\n\n/** @internal */\nfunction parseContractId(contractId: ContractIdString) {\n  const [address, name] = contractId.split('.');\n  if (!address || !name) throw new Error(`Invalid contract identifier: ${contractId}`);\n  return [address, name];\n}\n\n/** @internal */\nfunction parseNft(nftAssetName: NftString) {\n  const [principal, tokenName] = nftAssetName.split('::') as [ContractIdString, string];\n  if (!principal || !tokenName)\n    throw new Error(`Invalid fully-qualified nft asset name: ${nftAssetName}`);\n  const [address, name] = parseContractId(principal);\n  return { contractAddress: address, contractName: name, tokenName };\n}\n\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nfunction isContractIdString(value: AddressString | ContractIdString): value is ContractIdString {\n  return value.includes('.');\n}\n\n/**\n * Helper method for `PartialPcNftWithCode.nft` to parse the arguments.\n * @internal\n */\nfunction getNftArgs(\n  assetName: NftString,\n  assetId: ClarityValue\n): { contractAddress: string; contractName: string; tokenName: string; assetId: ClarityValue };\nfunction getNftArgs(\n  contractId: ContractIdString,\n  tokenName: string,\n  assetId: ClarityValue\n): { contractAddress: string; contractName: string; tokenName: string; assetId: ClarityValue };\nfunction getNftArgs(...args: [any, any] | [any, any, any]): {\n  contractAddress: string;\n  contractName: string;\n  tokenName: string;\n  assetId: ClarityValue;\n} {\n  if (args.length === 2) {\n    const [assetName, assetId] = args;\n    return { ...parseNft(assetName), assetId };\n  }\n\n  // args.length === 3\n  const [contractId, tokenName, assetId] = args;\n  const [address, name] = parseContractId(contractId);\n  return { contractAddress: address, contractName: name, tokenName, assetId };\n}\n","import {\n  FungibleConditionCode,\n  MAX_STRING_LENGTH_BYTES,\n  NonFungibleConditionCode,\n  PostConditionPrincipalID,\n  PostConditionType,\n  StacksMessageType,\n} from './constants';\nimport { c32addressDecode } from 'c32check';\nimport { Address } from './common';\nimport { ClarityValue } from './clarity';\nimport { exceedsMaxLengthBytes } from './utils';\n\nexport interface StandardPrincipal {\n  readonly type: StacksMessageType.Principal;\n  readonly prefix: PostConditionPrincipalID.Standard;\n  readonly address: Address;\n}\n\nexport interface ContractPrincipal {\n  readonly type: StacksMessageType.Principal;\n  readonly prefix: PostConditionPrincipalID.Contract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n\nexport interface LengthPrefixedString {\n  readonly type: StacksMessageType.LengthPrefixedString;\n  readonly content: string;\n  readonly lengthPrefixBytes: number;\n  readonly maxLengthBytes: number;\n}\n\nexport interface AssetInfo {\n  readonly type: StacksMessageType.AssetInfo;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n  readonly assetName: LengthPrefixedString;\n}\n\nexport interface STXPostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.STX;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: bigint;\n}\n\nexport interface FungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.Fungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: bigint;\n  readonly assetInfo: AssetInfo;\n}\n\nexport interface NonFungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.NonFungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: NonFungibleConditionCode;\n  /** Structure that identifies the token type. */\n  readonly assetInfo: AssetInfo;\n  /** The Clarity value that names the token instance. */\n  readonly assetName: ClarityValue;\n}\n\nexport function parseAssetInfoString(id: string): AssetInfo {\n  const [assetAddress, assetContractName, assetTokenName] = id.split(/\\.|::/);\n  const assetInfo = createAssetInfo(assetAddress, assetContractName, assetTokenName);\n  return assetInfo;\n}\n\nexport function createLPString(content: string): LengthPrefixedString;\nexport function createLPString(content: string, lengthPrefixBytes: number): LengthPrefixedString;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes: number,\n  maxLengthBytes: number\n): LengthPrefixedString;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes?: number,\n  maxLengthBytes?: number\n): LengthPrefixedString {\n  const prefixLength = lengthPrefixBytes || 1;\n  const maxLength = maxLengthBytes || MAX_STRING_LENGTH_BYTES;\n  if (exceedsMaxLengthBytes(content, maxLength)) {\n    throw new Error(`String length exceeds maximum bytes ${maxLength}`);\n  }\n  return {\n    type: StacksMessageType.LengthPrefixedString,\n    content,\n    lengthPrefixBytes: prefixLength,\n    maxLengthBytes: maxLength,\n  };\n}\n\nexport function createAssetInfo(\n  addressString: string,\n  contractName: string,\n  assetName: string\n): AssetInfo {\n  return {\n    type: StacksMessageType.AssetInfo,\n    address: createAddress(addressString),\n    contractName: createLPString(contractName),\n    assetName: createLPString(assetName),\n  };\n}\n\nexport function createAddress(c32AddressString: string): Address {\n  const addressData = c32addressDecode(c32AddressString);\n  return {\n    type: StacksMessageType.Address,\n    version: addressData[0],\n    hash160: addressData[1],\n  };\n}\n\n/**\n * Parses a principal string for either a standard principal or contract principal.\n * @param principalString - String in the format `{address}.{contractName}`\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G.example-contract\"\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G\"\n */\nexport function parsePrincipalString(\n  principalString: string\n): StandardPrincipal | ContractPrincipal {\n  if (principalString.includes('.')) {\n    const [address, contractName] = principalString.split('.');\n    return createContractPrincipal(address, contractName);\n  } else {\n    return createStandardPrincipal(principalString);\n  }\n}\n\nexport function createContractPrincipal(\n  addressString: string,\n  contractName: string\n): ContractPrincipal {\n  const addr = createAddress(addressString);\n  const name = createLPString(contractName);\n  return {\n    type: StacksMessageType.Principal,\n    prefix: PostConditionPrincipalID.Contract,\n    address: addr,\n    contractName: name,\n  };\n}\n\nexport function createStandardPrincipal(addressString: string): StandardPrincipal {\n  const addr = createAddress(addressString);\n  return {\n    type: StacksMessageType.Principal,\n    prefix: PostConditionPrincipalID.Standard,\n    address: addr,\n  };\n}\n\nexport type PostCondition = STXPostCondition | FungiblePostCondition | NonFungiblePostCondition;\n\nexport type PostConditionPrincipal = StandardPrincipal | ContractPrincipal;\n","import { IntegerType, intToBigInt } from '@stacks/common';\nimport { ClarityValue } from './clarity';\nimport {\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  PostConditionType,\n  StacksMessageType,\n} from './constants';\nimport {\n  AssetInfo,\n  FungiblePostCondition,\n  NonFungiblePostCondition,\n  PostConditionPrincipal,\n  STXPostCondition,\n  parseAssetInfoString,\n  parsePrincipalString,\n} from './postcondition-types';\n\nexport function createSTXPostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType\n): STXPostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n  };\n}\n\nexport function createFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n    assetInfo,\n  };\n}\n\nexport function createNonFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal,\n    conditionCode,\n    assetInfo,\n    assetName,\n  };\n}\n","import { BytesReader } from './bytesReader';\nimport { DeserializationError } from './errors';\nimport { PubKeyEncoding, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, StacksMessageType } from './constants';\nimport {\n  compressPublicKey,\n  deserializePublicKey,\n  serializePublicKey,\n  StacksPublicKey,\n} from './keys';\n\nimport { createMessageSignature, MessageSignature } from './common';\n\n// @ts-ignore\nimport { bytesToHex, concatArray, hexToBytes } from '@stacks/common';\n\nexport enum AuthFieldType {\n  PublicKeyCompressed = 0x00,\n  PublicKeyUncompressed = 0x01,\n  SignatureCompressed = 0x02,\n  SignatureUncompressed = 0x03,\n}\n\nexport interface TransactionAuthField {\n  type: StacksMessageType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContents;\n}\n\nexport type TransactionAuthFieldContents = StacksPublicKey | MessageSignature;\n\nexport function deserializeMessageSignature(bytesReader: BytesReader): MessageSignature {\n  return createMessageSignature(\n    bytesToHex(bytesReader.readBytes(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES))\n  );\n}\n\nexport interface TransactionAuthField {\n  type: StacksMessageType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContents;\n}\n\nexport function createTransactionAuthField(\n  pubKeyEncoding: PubKeyEncoding,\n  contents: TransactionAuthFieldContents\n): TransactionAuthField {\n  return {\n    pubKeyEncoding,\n    type: StacksMessageType.TransactionAuthField,\n    contents,\n  };\n}\n\nexport function deserializeTransactionAuthField(bytesReader: BytesReader): TransactionAuthField {\n  const authFieldType = bytesReader.readUInt8Enum(AuthFieldType, n => {\n    throw new DeserializationError(`Could not read ${n} as AuthFieldType`);\n  });\n\n  switch (authFieldType) {\n    case AuthFieldType.PublicKeyCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializePublicKey(bytesReader)\n      );\n    case AuthFieldType.PublicKeyUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializePublicKey(bytesReader)\n      );\n    case AuthFieldType.SignatureCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializeMessageSignature(bytesReader)\n      );\n    case AuthFieldType.SignatureUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializeMessageSignature(bytesReader)\n      );\n    default:\n      throw new Error(`Unknown auth field type: ${JSON.stringify(authFieldType)}`);\n  }\n}\n\nexport function serializeMessageSignature(messageSignature: MessageSignature): Uint8Array {\n  return hexToBytes(messageSignature.data);\n}\n\nexport function serializeTransactionAuthField(field: TransactionAuthField): Uint8Array {\n  const bytesArray = [];\n\n  switch (field.contents.type) {\n    case StacksMessageType.PublicKey:\n      if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n        bytesArray.push(AuthFieldType.PublicKeyCompressed);\n        bytesArray.push(serializePublicKey(field.contents));\n      } else {\n        bytesArray.push(AuthFieldType.PublicKeyUncompressed);\n        bytesArray.push(serializePublicKey(compressPublicKey(field.contents.data)));\n      }\n      break;\n    case StacksMessageType.MessageSignature:\n      if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n        bytesArray.push(AuthFieldType.SignatureCompressed);\n      } else {\n        bytesArray.push(AuthFieldType.SignatureUncompressed);\n      }\n      bytesArray.push(serializeMessageSignature(field.contents));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n","import { StacksTransaction } from './transaction';\n\nimport { StacksPrivateKey, StacksPublicKey } from './keys';\nimport { isSingleSig, nextVerification, SpendingConditionOpts } from './authorization';\nimport { cloneDeep } from './utils';\nimport { AuthType, PubKeyEncoding, StacksMessageType } from './constants';\nimport { SigningError } from './errors';\n\nexport class TransactionSigner {\n  transaction: StacksTransaction;\n  sigHash: string;\n  originDone: boolean;\n  checkOversign: boolean;\n  checkOverlap: boolean;\n\n  constructor(transaction: StacksTransaction) {\n    this.transaction = transaction;\n    this.sigHash = transaction.signBegin();\n    this.originDone = false;\n    this.checkOversign = true;\n    this.checkOverlap = true;\n\n    // If multi-sig spending condition exists, iterate over\n    // auth fields and reconstruct sigHash\n    const spendingCondition = transaction.auth.spendingCondition;\n    if (spendingCondition && !isSingleSig(spendingCondition)) {\n      if (\n        spendingCondition.fields.filter(\n          field => field.contents.type === StacksMessageType.MessageSignature\n        ).length >= spendingCondition.signaturesRequired\n      ) {\n        throw new Error('SpendingCondition has more signatures than are expected');\n      }\n\n      spendingCondition.fields.forEach(field => {\n        if (field.contents.type === StacksMessageType.MessageSignature) {\n          const signature = field.contents;\n          const nextVerify = nextVerification(\n            this.sigHash,\n            transaction.auth.authType,\n            spendingCondition.fee,\n            spendingCondition.nonce,\n            PubKeyEncoding.Compressed, // always compressed for multisig\n            signature\n          );\n          this.sigHash = nextVerify.nextSigHash;\n        }\n      });\n    }\n  }\n\n  static createSponsorSigner(\n    transaction: StacksTransaction,\n    spendingCondition: SpendingConditionOpts\n  ) {\n    if (transaction.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot add sponsor to non-sponsored transaction');\n    }\n\n    const tx: StacksTransaction = cloneDeep(transaction);\n    tx.setSponsor(spendingCondition);\n    const originSigHash = tx.verifyOrigin();\n    const signer = new this(tx);\n    signer.originDone = true;\n    signer.sigHash = originSigHash;\n    signer.checkOversign = true;\n    signer.checkOverlap = true;\n    return signer;\n  }\n\n  signOrigin(privateKey: StacksPrivateKey) {\n    if (this.checkOverlap && this.originDone) {\n      throw new SigningError('Cannot sign origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new SigningError('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    if (!isSingleSig(this.transaction.auth.spendingCondition)) {\n      const spendingCondition = this.transaction.auth.spendingCondition;\n      if (\n        this.checkOversign &&\n        spendingCondition.fields.filter(\n          field => field.contents.type === StacksMessageType.MessageSignature\n        ).length >= spendingCondition.signaturesRequired\n      ) {\n        throw new Error('Origin would have too many signatures');\n      }\n    }\n\n    const nextSighash = this.transaction.signNextOrigin(this.sigHash, privateKey);\n    this.sigHash = nextSighash;\n  }\n\n  appendOrigin(publicKey: StacksPublicKey) {\n    if (this.checkOverlap && this.originDone) {\n      throw Error('Cannot append public key to origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new Error('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new Error('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    this.transaction.appendPubkey(publicKey);\n  }\n\n  signSponsor(privateKey: StacksPrivateKey) {\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.authType !== AuthType.Sponsored) {\n      throw new SigningError('\"transaction.auth.authType\" is not AuthType.Sponsored');\n    }\n\n    const nextSighash = this.transaction.signNextSponsor(this.sigHash, privateKey);\n    this.sigHash = nextSighash;\n    this.originDone = true;\n  }\n\n  getTxInComplete(): StacksTransaction {\n    return cloneDeep(this.transaction);\n  }\n\n  resume(transaction: StacksTransaction) {\n    this.transaction = cloneDeep(transaction);\n    this.sigHash = transaction.signBegin();\n  }\n}\n","import { sha256 } from '@noble/hashes/sha256';\nimport { bytesToHex, concatBytes, utf8ToBytes } from '@stacks/common';\n\nimport { ClarityType, ClarityValue, serializeCV } from './clarity';\nimport { StacksMessageType } from './constants';\nimport { signMessageHashRsv, StacksPrivateKey } from './keys';\nimport { StructuredDataSignature } from './message-types';\n\n// Refer to SIP018 https://github.com/stacksgov/sips/\n// > asciiToBytes('SIP018')\nexport const STRUCTURED_DATA_PREFIX = new Uint8Array([0x53, 0x49, 0x50, 0x30, 0x31, 0x38]);\n\nexport function hashStructuredData(structuredData: ClarityValue): Uint8Array {\n  return sha256(serializeCV(structuredData));\n}\n\nconst hash256BytesLength = 32;\n\nfunction isDomain(value: ClarityValue): boolean {\n  if (value.type !== ClarityType.Tuple) return false;\n  // Check that the tuple has at least 'name', 'version' and 'chain-id'\n  if (!['name', 'version', 'chain-id'].every(key => key in value.data)) return false;\n  // Check each key is of the right type\n  if (!['name', 'version'].every(key => value.data[key].type === ClarityType.StringASCII))\n    return false;\n\n  if (value.data['chain-id'].type !== ClarityType.UInt) return false;\n  return true;\n}\n\nexport function encodeStructuredData({\n  message,\n  domain,\n}: {\n  message: ClarityValue;\n  domain: ClarityValue;\n}): Uint8Array {\n  const structuredDataHash: Uint8Array = hashStructuredData(message);\n  if (!isDomain(domain)) {\n    throw new Error(\n      \"domain parameter must be a valid domain of type TupleCV with keys 'name', 'version', 'chain-id' with respective types StringASCII, StringASCII, UInt\"\n    );\n  }\n  const domainHash: Uint8Array = hashStructuredData(domain);\n\n  return concatBytes(STRUCTURED_DATA_PREFIX, domainHash, structuredDataHash);\n}\n\nexport type DecodedStructuredData = {\n  domainHash: Uint8Array;\n  messageHash: Uint8Array;\n};\n\nexport function decodeStructuredDataSignature(\n  signature: string | Uint8Array\n): DecodedStructuredData {\n  const encodedMessageBytes: Uint8Array =\n    typeof signature === 'string' ? utf8ToBytes(signature) : signature;\n  const domainHash = encodedMessageBytes.slice(\n    STRUCTURED_DATA_PREFIX.length,\n    STRUCTURED_DATA_PREFIX.length + hash256BytesLength\n  );\n  const messageHash = encodedMessageBytes.slice(STRUCTURED_DATA_PREFIX.length + hash256BytesLength);\n  return {\n    domainHash,\n    messageHash,\n  };\n}\n\n/**\n * Signs a structured message (ClarityValue) and a domain (ClarityValue) using a private key.\n * The resulting signature along with the original message can be verified using {@link verifyMessageSignature}\n * @returns A recoverable signature (in RSV order)\n */\nexport function signStructuredData({\n  message,\n  domain,\n  privateKey,\n}: {\n  message: ClarityValue;\n  domain: ClarityValue;\n  privateKey: StacksPrivateKey;\n}): StructuredDataSignature {\n  const structuredDataHash: string = bytesToHex(sha256(encodeStructuredData({ message, domain })));\n\n  const { data } = signMessageHashRsv({\n    messageHash: structuredDataHash,\n    privateKey,\n  });\n  return {\n    data,\n    type: StacksMessageType.StructuredDataSignature,\n  };\n}\n","import {\n  bytesToHex,\n  concatArray,\n  hexToBytes,\n  IntegerType,\n  intToBigInt,\n  writeUInt32BE,\n} from '@stacks/common';\nimport {\n  Authorization,\n  deserializeAuthorization,\n  intoInitialSighashAuth,\n  isSingleSig,\n  nextSignature,\n  serializeAuthorization,\n  setFee,\n  setNonce,\n  setSponsor,\n  setSponsorNonce,\n  SpendingConditionOpts,\n  verifyOrigin,\n} from './authorization';\nimport { BytesReader } from './bytesReader';\nimport {\n  AnchorMode,\n  anchorModeFromNameOrValue,\n  AnchorModeName,\n  AuthType,\n  ChainID,\n  DEFAULT_CHAIN_ID,\n  PayloadType,\n  PostConditionMode,\n  PubKeyEncoding,\n  StacksMessageType,\n  TransactionVersion,\n} from './constants';\nimport { SerializationError, SigningError } from './errors';\nimport { isCompressed, StacksPrivateKey, StacksPublicKey } from './keys';\nimport { deserializePayload, Payload, PayloadInput, serializePayload } from './payload';\nimport { createTransactionAuthField } from './signature';\nimport { createLPList, deserializeLPList, LengthPrefixedList, serializeLPList } from './types';\nimport { cloneDeep, txidFromData } from './utils';\n\nexport class StacksTransaction {\n  version: TransactionVersion;\n  chainId: ChainID;\n  auth: Authorization;\n  anchorMode: AnchorMode;\n  payload: Payload;\n  postConditionMode: PostConditionMode;\n  postConditions: LengthPrefixedList;\n\n  constructor(\n    version: TransactionVersion,\n    auth: Authorization,\n    payload: PayloadInput,\n    postConditions?: LengthPrefixedList,\n    postConditionMode?: PostConditionMode,\n    anchorMode?: AnchorModeName | AnchorMode,\n    chainId?: ChainID\n  ) {\n    this.version = version;\n    this.auth = auth;\n    if ('amount' in payload) {\n      this.payload = {\n        ...payload,\n        amount: intToBigInt(payload.amount, false),\n      };\n    } else {\n      this.payload = payload;\n    }\n    this.chainId = chainId ?? DEFAULT_CHAIN_ID;\n    this.postConditionMode = postConditionMode ?? PostConditionMode.Deny;\n    this.postConditions = postConditions ?? createLPList([]);\n\n    if (anchorMode) {\n      this.anchorMode = anchorModeFromNameOrValue(anchorMode);\n    } else {\n      switch (payload.payloadType) {\n        case PayloadType.Coinbase:\n        case PayloadType.CoinbaseToAltRecipient:\n        case PayloadType.NakamotoCoinbase:\n        case PayloadType.PoisonMicroblock:\n        case PayloadType.TenureChange:\n          this.anchorMode = AnchorMode.OnChainOnly;\n          break;\n        case PayloadType.ContractCall:\n        case PayloadType.SmartContract:\n        case PayloadType.VersionedSmartContract:\n        case PayloadType.TokenTransfer:\n          this.anchorMode = AnchorMode.Any;\n          break;\n      }\n    }\n  }\n\n  signBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = intoInitialSighashAuth(tx.auth);\n    return tx.txid();\n  }\n\n  verifyBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = intoInitialSighashAuth(tx.auth);\n    return tx.txid();\n  }\n\n  verifyOrigin(): string {\n    return verifyOrigin(this.auth, this.verifyBegin());\n  }\n\n  signNextOrigin(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.spendingCondition === undefined) {\n      throw new Error('\"auth.spendingCondition\" is undefined');\n    }\n    if (this.auth.authType === undefined) {\n      throw new Error('\"auth.authType\" is undefined');\n    }\n    return this.signAndAppend(this.auth.spendingCondition, sigHash, AuthType.Standard, privateKey);\n  }\n\n  signNextSponsor(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.authType === AuthType.Sponsored) {\n      return this.signAndAppend(\n        this.auth.sponsorSpendingCondition,\n        sigHash,\n        AuthType.Sponsored,\n        privateKey\n      );\n    } else {\n      throw new Error('\"auth.sponsorSpendingCondition\" is undefined');\n    }\n  }\n\n  appendPubkey(publicKey: StacksPublicKey) {\n    const cond = this.auth.spendingCondition;\n    if (cond && !isSingleSig(cond)) {\n      const compressed = isCompressed(publicKey);\n      cond.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          publicKey\n        )\n      );\n    } else {\n      throw new Error(`Can't append public key to a singlesig condition`);\n    }\n  }\n\n  signAndAppend(\n    condition: SpendingConditionOpts,\n    curSigHash: string,\n    authType: AuthType,\n    privateKey: StacksPrivateKey\n  ): string {\n    const { nextSig, nextSigHash } = nextSignature(\n      curSigHash,\n      authType,\n      condition.fee,\n      condition.nonce,\n      privateKey\n    );\n    if (isSingleSig(condition)) {\n      condition.signature = nextSig;\n    } else {\n      const compressed = bytesToHex(privateKey.data).endsWith('01');\n      condition.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          nextSig\n        )\n      );\n    }\n\n    return nextSigHash;\n  }\n\n  txid(): string {\n    const serialized = this.serialize();\n    return txidFromData(serialized);\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingConditionOpts) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth = setSponsor(this.auth, sponsorSpendingCondition);\n  }\n\n  /**\n   * Set the total fee to be paid for this transaction\n   *\n   * @param fee - the fee amount in microstacks\n   */\n  setFee(amount: IntegerType) {\n    this.auth = setFee(this.auth, amount);\n  }\n\n  /**\n   * Set the transaction nonce\n   *\n   * @param nonce - the nonce value\n   */\n  setNonce(nonce: IntegerType) {\n    this.auth = setNonce(this.auth, nonce);\n  }\n\n  /**\n   * Set the transaction sponsor nonce\n   *\n   * @param nonce - the sponsor nonce value\n   */\n  setSponsorNonce(nonce: IntegerType) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth = setSponsorNonce(this.auth, nonce);\n  }\n\n  serialize(): Uint8Array {\n    if (this.version === undefined) {\n      throw new SerializationError('\"version\" is undefined');\n    }\n    if (this.chainId === undefined) {\n      throw new SerializationError('\"chainId\" is undefined');\n    }\n    if (this.auth === undefined) {\n      throw new SerializationError('\"auth\" is undefined');\n    }\n    if (this.anchorMode === undefined) {\n      throw new SerializationError('\"anchorMode\" is undefined');\n    }\n    if (this.payload === undefined) {\n      throw new SerializationError('\"payload\" is undefined');\n    }\n\n    const bytesArray = [];\n\n    bytesArray.push(this.version);\n    const chainIdBytes = new Uint8Array(4);\n    writeUInt32BE(chainIdBytes, this.chainId, 0);\n    bytesArray.push(chainIdBytes);\n    bytesArray.push(serializeAuthorization(this.auth));\n    bytesArray.push(this.anchorMode);\n    bytesArray.push(this.postConditionMode);\n    bytesArray.push(serializeLPList(this.postConditions));\n    bytesArray.push(serializePayload(this.payload));\n\n    return concatArray(bytesArray);\n  }\n}\n\n/**\n * @param tx hex string or bytes of serialized transaction\n */\nexport function deserializeTransaction(tx: string | Uint8Array | BytesReader) {\n  let bytesReader: BytesReader;\n  if (typeof tx === 'string') {\n    if (tx.slice(0, 2).toLowerCase() === '0x') {\n      bytesReader = new BytesReader(hexToBytes(tx.slice(2)));\n    } else {\n      bytesReader = new BytesReader(hexToBytes(tx));\n    }\n  } else if (tx instanceof Uint8Array) {\n    bytesReader = new BytesReader(tx);\n  } else {\n    bytesReader = tx;\n  }\n  const version = bytesReader.readUInt8Enum(TransactionVersion, n => {\n    throw new Error(`Could not parse ${n} as TransactionVersion`);\n  });\n  const chainId = bytesReader.readUInt32BE();\n  const auth = deserializeAuthorization(bytesReader);\n  const anchorMode = bytesReader.readUInt8Enum(AnchorMode, n => {\n    throw new Error(`Could not parse ${n} as AnchorMode`);\n  });\n  const postConditionMode = bytesReader.readUInt8Enum(PostConditionMode, n => {\n    throw new Error(`Could not parse ${n} as PostConditionMode`);\n  });\n  const postConditions = deserializeLPList(bytesReader, StacksMessageType.PostCondition);\n  const payload = deserializePayload(bytesReader);\n\n  return new StacksTransaction(\n    version,\n    auth,\n    payload,\n    postConditions,\n    postConditionMode,\n    anchorMode,\n    chainId\n  );\n}\n","import {\n  bytesToHex,\n  bytesToUtf8,\n  concatArray,\n  hexToBytes,\n  hexToInt,\n  intToBytes,\n  intToHex,\n  utf8ToBytes,\n} from '@stacks/common';\nimport {\n  MEMO_MAX_LENGTH_BYTES,\n  AddressHashMode,\n  AddressVersion,\n  TransactionVersion,\n  StacksMessageType,\n  PostConditionPrincipalID,\n  PostConditionType,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n} from './constants';\n\nimport { StacksPublicKey, serializePublicKey, deserializePublicKey, isCompressed } from './keys';\n\nimport {\n  exceedsMaxLengthBytes,\n  hashP2PKH,\n  rightPadHexToLength,\n  hashP2SH,\n  hashP2WSH,\n  hashP2WPKH,\n} from './utils';\n\nimport { BytesReader } from './bytesReader';\nimport {\n  PostCondition,\n  StandardPrincipal,\n  ContractPrincipal,\n  PostConditionPrincipal,\n  LengthPrefixedString,\n  AssetInfo,\n  createLPString,\n} from './postcondition-types';\nimport { Payload, deserializePayload, serializePayload } from './payload';\nimport { DeserializationError, SerializationError } from './errors';\nimport {\n  deserializeTransactionAuthField,\n  deserializeMessageSignature,\n  serializeMessageSignature,\n  serializeTransactionAuthField,\n  TransactionAuthField,\n} from './signature';\nimport {\n  MessageSignature,\n  Address,\n  addressHashModeToVersion,\n  addressFromVersionHash,\n} from './common';\nimport { deserializeCV, serializeCV } from './clarity';\nexport type StacksMessage =\n  | Address\n  | PostConditionPrincipal\n  | LengthPrefixedString\n  | LengthPrefixedList\n  | Payload\n  | MemoString\n  | AssetInfo\n  | PostCondition\n  | StacksPublicKey\n  | TransactionAuthField\n  | MessageSignature;\n\nexport function serializeStacksMessage(message: StacksMessage): Uint8Array {\n  switch (message.type) {\n    case StacksMessageType.Address:\n      return serializeAddress(message);\n    case StacksMessageType.Principal:\n      return serializePrincipal(message);\n    case StacksMessageType.LengthPrefixedString:\n      return serializeLPString(message);\n    case StacksMessageType.MemoString:\n      return serializeMemoString(message);\n    case StacksMessageType.AssetInfo:\n      return serializeAssetInfo(message);\n    case StacksMessageType.PostCondition:\n      return serializePostCondition(message);\n    case StacksMessageType.PublicKey:\n      return serializePublicKey(message);\n    case StacksMessageType.LengthPrefixedList:\n      return serializeLPList(message);\n    case StacksMessageType.Payload:\n      return serializePayload(message);\n    case StacksMessageType.TransactionAuthField:\n      return serializeTransactionAuthField(message);\n    case StacksMessageType.MessageSignature:\n      return serializeMessageSignature(message);\n  }\n}\n\nexport function deserializeStacksMessage(\n  bytesReader: BytesReader,\n  type: StacksMessageType,\n  listType?: StacksMessageType\n): StacksMessage {\n  switch (type) {\n    case StacksMessageType.Address:\n      return deserializeAddress(bytesReader);\n    case StacksMessageType.Principal:\n      return deserializePrincipal(bytesReader);\n    case StacksMessageType.LengthPrefixedString:\n      return deserializeLPString(bytesReader);\n    case StacksMessageType.MemoString:\n      return deserializeMemoString(bytesReader);\n    case StacksMessageType.AssetInfo:\n      return deserializeAssetInfo(bytesReader);\n    case StacksMessageType.PostCondition:\n      return deserializePostCondition(bytesReader);\n    case StacksMessageType.PublicKey:\n      return deserializePublicKey(bytesReader);\n    case StacksMessageType.Payload:\n      return deserializePayload(bytesReader);\n    case StacksMessageType.LengthPrefixedList:\n      if (!listType) {\n        throw new DeserializationError('No List Type specified');\n      }\n      return deserializeLPList(bytesReader, listType);\n    case StacksMessageType.MessageSignature:\n      return deserializeMessageSignature(bytesReader);\n    default:\n      throw new Error('Could not recognize StacksMessageType');\n  }\n}\n\nexport function createEmptyAddress(): Address {\n  return {\n    type: StacksMessageType.Address,\n    version: AddressVersion.MainnetSingleSig,\n    hash160: '0'.repeat(40),\n  };\n}\n\nexport function addressFromHashMode(\n  hashMode: AddressHashMode,\n  txVersion: TransactionVersion,\n  data: string\n): Address {\n  const version = addressHashModeToVersion(hashMode, txVersion);\n  return addressFromVersionHash(version, data);\n}\n\nexport function addressFromPublicKeys(\n  version: AddressVersion,\n  hashMode: AddressHashMode,\n  numSigs: number,\n  publicKeys: StacksPublicKey[]\n): Address {\n  if (publicKeys.length === 0) {\n    throw Error('Invalid number of public keys');\n  }\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    if (publicKeys.length !== 1 || numSigs !== 1) {\n      throw Error('Invalid number of public keys or signatures');\n    }\n  }\n\n  if (hashMode === AddressHashMode.SerializeP2WPKH || hashMode === AddressHashMode.SerializeP2WSH) {\n    for (let i = 0; i < publicKeys.length; i++) {\n      if (!isCompressed(publicKeys[i])) {\n        throw Error('Public keys must be compressed for segwit');\n      }\n    }\n  }\n\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      return addressFromVersionHash(version, hashP2PKH(publicKeys[0].data));\n    case AddressHashMode.SerializeP2WPKH:\n      return addressFromVersionHash(version, hashP2WPKH(publicKeys[0].data));\n    case AddressHashMode.SerializeP2SH:\n      return addressFromVersionHash(version, hashP2SH(numSigs, publicKeys.map(serializePublicKey)));\n    case AddressHashMode.SerializeP2WSH:\n      return addressFromVersionHash(\n        version,\n        hashP2WSH(numSigs, publicKeys.map(serializePublicKey))\n      );\n  }\n}\n\nexport function serializeAddress(address: Address): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(hexToBytes(intToHex(address.version, 1)));\n  bytesArray.push(hexToBytes(address.hash160));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAddress(bytesReader: BytesReader): Address {\n  const version = hexToInt(bytesToHex(bytesReader.readBytes(1)));\n  const data = bytesToHex(bytesReader.readBytes(20));\n\n  return { type: StacksMessageType.Address, version, hash160: data };\n}\n\nexport function serializePrincipal(principal: PostConditionPrincipal): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(principal.prefix);\n  bytesArray.push(serializeAddress(principal.address));\n  if (principal.prefix === PostConditionPrincipalID.Contract) {\n    bytesArray.push(serializeLPString(principal.contractName));\n  }\n  return concatArray(bytesArray);\n}\n\nexport function deserializePrincipal(bytesReader: BytesReader): PostConditionPrincipal {\n  const prefix = bytesReader.readUInt8Enum(PostConditionPrincipalID, n => {\n    throw new DeserializationError(`Unexpected Principal payload type: ${n}`);\n  });\n  const address = deserializeAddress(bytesReader);\n  if (prefix === PostConditionPrincipalID.Standard) {\n    return { type: StacksMessageType.Principal, prefix, address } as StandardPrincipal;\n  }\n  const contractName = deserializeLPString(bytesReader);\n  return {\n    type: StacksMessageType.Principal,\n    prefix,\n    address,\n    contractName,\n  } as ContractPrincipal;\n}\n\nexport function serializeLPString(lps: LengthPrefixedString) {\n  const bytesArray = [];\n  const contentBytes = utf8ToBytes(lps.content);\n  const length = contentBytes.byteLength;\n  bytesArray.push(hexToBytes(intToHex(length, lps.lengthPrefixBytes)));\n  bytesArray.push(contentBytes);\n  return concatArray(bytesArray);\n}\n\nexport function deserializeLPString(\n  bytesReader: BytesReader,\n  prefixBytes?: number,\n  maxLength?: number\n): LengthPrefixedString {\n  prefixBytes = prefixBytes ? prefixBytes : 1;\n  const length = hexToInt(bytesToHex(bytesReader.readBytes(prefixBytes)));\n  const content = bytesToUtf8(bytesReader.readBytes(length));\n  return createLPString(content, prefixBytes, maxLength ?? 128);\n}\n\nexport function codeBodyString(content: string): LengthPrefixedString {\n  return createLPString(content, 4, 100_000);\n}\n\nexport interface MemoString {\n  readonly type: StacksMessageType.MemoString;\n  readonly content: string;\n}\n\nexport function createMemoString(content: string): MemoString {\n  if (content && exceedsMaxLengthBytes(content, MEMO_MAX_LENGTH_BYTES)) {\n    throw new Error(`Memo exceeds maximum length of ${MEMO_MAX_LENGTH_BYTES} bytes`);\n  }\n  return { type: StacksMessageType.MemoString, content };\n}\n\nexport function serializeMemoString(memoString: MemoString): Uint8Array {\n  const bytesArray = [];\n  const contentBytes = utf8ToBytes(memoString.content);\n  const paddedContent = rightPadHexToLength(bytesToHex(contentBytes), MEMO_MAX_LENGTH_BYTES * 2);\n  bytesArray.push(hexToBytes(paddedContent));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeMemoString(bytesReader: BytesReader): MemoString {\n  let content = bytesToUtf8(bytesReader.readBytes(MEMO_MAX_LENGTH_BYTES));\n  content = content.replace(/\\u0000*$/, ''); // remove all trailing unicode null characters\n  return { type: StacksMessageType.MemoString, content };\n}\n\nexport function serializeAssetInfo(info: AssetInfo): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(serializeAddress(info.address));\n  bytesArray.push(serializeLPString(info.contractName));\n  bytesArray.push(serializeLPString(info.assetName));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAssetInfo(bytesReader: BytesReader): AssetInfo {\n  return {\n    type: StacksMessageType.AssetInfo,\n    address: deserializeAddress(bytesReader),\n    contractName: deserializeLPString(bytesReader),\n    assetName: deserializeLPString(bytesReader),\n  };\n}\n\nexport interface LengthPrefixedList {\n  readonly type: StacksMessageType.LengthPrefixedList;\n  readonly lengthPrefixBytes: number;\n  readonly values: StacksMessage[];\n}\n\nexport function createLPList<T extends StacksMessage>(\n  values: T[],\n  lengthPrefixBytes?: number\n): LengthPrefixedList {\n  return {\n    type: StacksMessageType.LengthPrefixedList,\n    lengthPrefixBytes: lengthPrefixBytes || 4,\n    values,\n  };\n}\n\nexport function serializeLPList(lpList: LengthPrefixedList): Uint8Array {\n  const list = lpList.values;\n  const bytesArray = [];\n  bytesArray.push(hexToBytes(intToHex(list.length, lpList.lengthPrefixBytes)));\n  for (const l of list) {\n    bytesArray.push(serializeStacksMessage(l));\n  }\n  return concatArray(bytesArray);\n}\n\nexport function deserializeLPList(\n  bytesReader: BytesReader,\n  type: StacksMessageType,\n  lengthPrefixBytes?: number\n): LengthPrefixedList {\n  const length = hexToInt(bytesToHex(bytesReader.readBytes(lengthPrefixBytes || 4)));\n\n  const l: StacksMessage[] = [];\n  for (let index = 0; index < length; index++) {\n    switch (type) {\n      case StacksMessageType.Address:\n        l.push(deserializeAddress(bytesReader));\n        break;\n      case StacksMessageType.LengthPrefixedString:\n        l.push(deserializeLPString(bytesReader));\n        break;\n      case StacksMessageType.MemoString:\n        l.push(deserializeMemoString(bytesReader));\n        break;\n      case StacksMessageType.AssetInfo:\n        l.push(deserializeAssetInfo(bytesReader));\n        break;\n      case StacksMessageType.PostCondition:\n        l.push(deserializePostCondition(bytesReader));\n        break;\n      case StacksMessageType.PublicKey:\n        l.push(deserializePublicKey(bytesReader));\n        break;\n      case StacksMessageType.TransactionAuthField:\n        l.push(deserializeTransactionAuthField(bytesReader));\n        break;\n    }\n  }\n  return createLPList(l, lengthPrefixBytes);\n}\n\nexport function serializePostCondition(postCondition: PostCondition): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(postCondition.conditionType);\n  bytesArray.push(serializePrincipal(postCondition.principal));\n\n  if (\n    postCondition.conditionType === PostConditionType.Fungible ||\n    postCondition.conditionType === PostConditionType.NonFungible\n  ) {\n    bytesArray.push(serializeAssetInfo(postCondition.assetInfo));\n  }\n\n  if (postCondition.conditionType === PostConditionType.NonFungible) {\n    bytesArray.push(serializeCV(postCondition.assetName));\n  }\n\n  bytesArray.push(postCondition.conditionCode);\n\n  if (\n    postCondition.conditionType === PostConditionType.STX ||\n    postCondition.conditionType === PostConditionType.Fungible\n  ) {\n    // SIP-005: Maximal length of amount is 8 bytes\n    if (postCondition.amount > BigInt('0xffffffffffffffff'))\n      throw new SerializationError('The post-condition amount may not be larger than 8 bytes');\n    bytesArray.push(intToBytes(postCondition.amount, false, 8));\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializePostCondition(bytesReader: BytesReader): PostCondition {\n  const postConditionType = bytesReader.readUInt8Enum(PostConditionType, n => {\n    throw new DeserializationError(`Could not read ${n} as PostConditionType`);\n  });\n\n  const principal = deserializePrincipal(bytesReader);\n\n  let conditionCode;\n  let assetInfo;\n  let amount: bigint;\n  switch (postConditionType) {\n    case PostConditionType.STX:\n      conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal,\n        conditionCode,\n        amount,\n      };\n    case PostConditionType.Fungible:\n      assetInfo = deserializeAssetInfo(bytesReader);\n      conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal,\n        conditionCode,\n        amount,\n        assetInfo,\n      };\n    case PostConditionType.NonFungible:\n      assetInfo = deserializeAssetInfo(bytesReader);\n      const assetName = deserializeCV(bytesReader);\n      conditionCode = bytesReader.readUInt8Enum(NonFungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal,\n        conditionCode,\n        assetInfo,\n        assetName,\n      };\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nexport class RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = wrapConstructor(() => new RIPEMD160());\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","import { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512_256 } from '@noble/hashes/sha512';\nimport { utils } from '@noble/secp256k1';\nimport { bytesToHex, concatArray, concatBytes, utf8ToBytes, with0x } from '@stacks/common';\nimport { c32addressDecode } from 'c32check';\nimport lodashCloneDeep from 'lodash.clonedeep';\nimport { ClarityValue, deserializeCV, serializeCV } from './clarity';\n\n// Export verify as utility method for signature verification\nexport { verify as verifySignature } from '@noble/secp256k1';\n\n/**\n * Use utils.randomBytes to replace randombytes dependency\n * Generates random bytes of given length\n * @param {number} bytesLength an optional bytes length, default is 32 bytes\n */\nexport const randomBytes = (bytesLength?: number): Uint8Array => utils.randomBytes(bytesLength);\n\nexport const leftPadHex = (hexString: string): string =>\n  hexString.length % 2 == 0 ? hexString : `0${hexString}`;\n\nexport const leftPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padStart(length, '0');\n\nexport const rightPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padEnd(length, '0');\n\nexport const exceedsMaxLengthBytes = (string: string, maxLengthBytes: number): boolean =>\n  string ? utf8ToBytes(string).length > maxLengthBytes : false;\n\n/** @ignore */\nexport function cloneDeep<T>(obj: T): T {\n  return lodashCloneDeep(obj);\n}\n\nexport function omit<T, K extends keyof any>(obj: T, prop: K): Omit<T, K> {\n  const clone = cloneDeep(obj);\n  // @ts-expect-error\n  delete clone[prop];\n  return clone;\n}\n\nexport const hash160 = (input: Uint8Array): Uint8Array => {\n  return ripemd160(sha256(input));\n};\n\n/** @deprecated renamed to {@link txidFromBytes} */\nexport const txidFromData = (data: Uint8Array): string => {\n  return bytesToHex(sha512_256(data));\n};\n\n/**\n * Computes the transaction ID of the bytes from a serialized transaction (or any other bytes using the same hash function).\n */\nexport const txidFromBytes = txidFromData;\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address (p2pkh)\n/** @ignore */\nexport const hashP2PKH = (input: Uint8Array): string => {\n  return bytesToHex(hash160(input));\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address over p2sh (p2h-p2wpkh)\n/** @ignore */\nexport const hashP2WPKH = (input: Uint8Array): string => {\n  const keyHash = hash160(input);\n  const redeemScript = concatBytes(new Uint8Array([0]), new Uint8Array([keyHash.length]), keyHash);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multi-sig address (p2sh)\n/** @ignore */\nexport const hashP2SH = (numSigs: number, pubKeys: Uint8Array[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2SH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const bytesArray = [];\n  // OP_n\n  bytesArray.push(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    bytesArray.push(pubKey.length);\n    bytesArray.push(pubKey);\n  });\n  // OP_m\n  bytesArray.push(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  bytesArray.push(174);\n\n  const redeemScript = concatArray(bytesArray);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multisig address over p2sh (p2sh-p2wsh)\n/** @ignore */\nexport const hashP2WSH = (numSigs: number, pubKeys: Uint8Array[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2WSH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const scriptArray = [];\n  // OP_n\n  scriptArray.push(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    scriptArray.push(pubKey.length);\n    scriptArray.push(pubKey);\n  });\n  // OP_m\n  scriptArray.push(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  scriptArray.push(174);\n\n  const script = concatArray(scriptArray);\n  const digest = sha256(script);\n\n  const bytesArray = [];\n  bytesArray.push(0);\n  bytesArray.push(digest.length);\n  bytesArray.push(digest);\n\n  const redeemScript = concatArray(bytesArray);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\nexport function isClarityName(name: string) {\n  const regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;\n  return regex.test(name) && name.length < 128;\n}\n\n/**\n * Converts a clarity value to a hex encoded string with `0x` prefix\n * @param {ClarityValue} cv  - the clarity value to convert\n */\nexport function cvToHex(cv: ClarityValue) {\n  const serialized = serializeCV(cv);\n  return `0x${bytesToHex(serialized)}`;\n}\n\n/**\n * Converts a hex encoded string to a clarity value\n * @param {string} hex - the hex encoded string with or without `0x` prefix\n */\nexport function hexToCV(hex: string) {\n  return deserializeCV(hex);\n}\n/**\n * Read only function response object\n *\n * @param {Boolean} okay - the status of the response\n * @param {string} result - serialized hex clarity value\n */\n\nexport interface ReadOnlyFunctionSuccessResponse {\n  okay: true;\n  result: string;\n}\n\nexport interface ReadOnlyFunctionErrorResponse {\n  okay: false;\n  cause: string;\n}\n\nexport type ReadOnlyFunctionResponse =\n  | ReadOnlyFunctionSuccessResponse\n  | ReadOnlyFunctionErrorResponse;\n\n/**\n * Converts the response of a read-only function call into its Clarity Value\n * @param param\n */\nexport const parseReadOnlyResponse = (response: ReadOnlyFunctionResponse): ClarityValue => {\n  if (response.okay) return hexToCV(response.result);\n  throw new Error(response.cause);\n};\n\nexport const validateStacksAddress = (stacksAddress: string): boolean => {\n  try {\n    c32addressDecode(stacksAddress);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const validateTxId = (txid: string): boolean => {\n  if (txid === 'success') return true; // Bypass fetchMock tests // todo: move this line into mocks in test files\n  const value = with0x(txid).toLowerCase();\n  if (value.length !== 66) return false;\n  return with0x(BigInt(value).toString(16).padStart(64, '0')) === value;\n};\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","export function equals(a, b) {\n    if (a.byteLength !== b.byteLength)\n        return false;\n    for (let i = 0; i < a.byteLength; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\nexport function alloc(length, value) {\n    const a = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n        a[i] = value;\n    }\n    return a;\n}\nexport function readUInt16BE(source, offset) {\n    return ((source[offset + 0] << 8) | source[offset + 1]) >>> 0;\n}\nexport function writeUInt16BE(destination, value, offset = 0) {\n    destination[offset + 0] = value >>> 8;\n    destination[offset + 1] = value >>> 0;\n    return destination;\n}\nexport function readUInt8(source, offset) {\n    return source[offset];\n}\nexport function writeUInt8(destination, value, offset = 0) {\n    destination[offset] = value;\n    return destination;\n}\nexport function readUInt16LE(source, offset) {\n    return ((source[offset + 0] << 0) >>> 0) | ((source[offset + 1] << 8) >>> 0);\n}\nexport function writeUInt16LE(destination, value, offset = 0) {\n    destination[offset + 0] = value & 255;\n    value >>>= 8;\n    destination[offset + 1] = value & 255;\n    return destination;\n}\nexport function readUInt32BE(source, offset) {\n    return (source[offset] * 2 ** 24 +\n        source[offset + 1] * 2 ** 16 +\n        source[offset + 2] * 2 ** 8 +\n        source[offset + 3]);\n}\nexport function writeUInt32BE(destination, value, offset = 0) {\n    destination[offset + 3] = value;\n    value >>>= 8;\n    destination[offset + 2] = value;\n    value >>>= 8;\n    destination[offset + 1] = value;\n    value >>>= 8;\n    destination[offset] = value;\n    return destination;\n}\nexport function readUInt32LE(source, offset) {\n    return (((source[offset + 0] << 0) >>> 0) |\n        ((source[offset + 1] << 8) >>> 0) |\n        ((source[offset + 2] << 16) >>> 0) |\n        ((source[offset + 3] << 24) >>> 0));\n}\nexport function writeUInt32LE(destination, value, offset = 0) {\n    destination[offset + 0] = value & 255;\n    value >>>= 8;\n    destination[offset + 1] = value & 255;\n    value >>>= 8;\n    destination[offset + 2] = value & 255;\n    value >>>= 8;\n    destination[offset + 3] = value & 255;\n    return destination;\n}\n//# sourceMappingURL=buffer.js.map","export var ChainID;\n(function (ChainID) {\n    ChainID[ChainID[\"Testnet\"] = 2147483648] = \"Testnet\";\n    ChainID[ChainID[\"Mainnet\"] = 1] = \"Mainnet\";\n})(ChainID || (ChainID = {}));\nexport var TransactionVersion;\n(function (TransactionVersion) {\n    TransactionVersion[TransactionVersion[\"Mainnet\"] = 0] = \"Mainnet\";\n    TransactionVersion[TransactionVersion[\"Testnet\"] = 128] = \"Testnet\";\n})(TransactionVersion || (TransactionVersion = {}));\nexport var PeerNetworkID;\n(function (PeerNetworkID) {\n    PeerNetworkID[PeerNetworkID[\"Mainnet\"] = 385875968] = \"Mainnet\";\n    PeerNetworkID[PeerNetworkID[\"Testnet\"] = 4278190080] = \"Testnet\";\n})(PeerNetworkID || (PeerNetworkID = {}));\nexport const PRIVATE_KEY_COMPRESSED_LENGTH = 33;\nexport const PRIVATE_KEY_UNCOMPRESSED_LENGTH = 32;\nexport const BLOCKSTACK_DEFAULT_GAIA_HUB_URL = 'https://hub.blockstack.org';\n//# sourceMappingURL=constants.js.map","import { Logger } from './logger';\nexport const BLOCKSTACK_HANDLER = 'blockstack';\nexport function nextYear() {\n    return new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n}\nexport function nextMonth() {\n    return new Date(new Date().setMonth(new Date().getMonth() + 1));\n}\nexport function nextHour() {\n    return new Date(new Date().setHours(new Date().getHours() + 1));\n}\nexport function megabytesToBytes(megabytes) {\n    if (!Number.isFinite(megabytes)) {\n        return 0;\n    }\n    return Math.floor(megabytes * 1024 * 1024);\n}\nexport function getAesCbcOutputLength(inputByteLength) {\n    const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n    return cipherTextLength;\n}\nexport function getBase64OutputLength(inputByteLength) {\n    const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n    return encodedLength;\n}\nexport function updateQueryStringParameter(uri, key, value) {\n    const re = new RegExp(`([?&])${key}=.*?(&|$)`, 'i');\n    const separator = uri.indexOf('?') !== -1 ? '&' : '?';\n    if (uri.match(re)) {\n        return uri.replace(re, `$1${key}=${value}$2`);\n    }\n    else {\n        return `${uri}${separator}${key}=${value}`;\n    }\n}\nexport function isLaterVersion(v1, v2) {\n    if (v1 === undefined || v1 === '') {\n        v1 = '0.0.0';\n    }\n    if (v2 === undefined || v1 === '') {\n        v2 = '0.0.0';\n    }\n    const v1tuple = v1.split('.').map(x => parseInt(x, 10));\n    const v2tuple = v2.split('.').map(x => parseInt(x, 10));\n    for (let index = 0; index < v2.length; index++) {\n        if (index >= v1.length) {\n            v2tuple.push(0);\n        }\n        if (v1tuple[index] < v2tuple[index]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function makeUUID4() {\n    let d = new Date().getTime();\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n        d += performance.now();\n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n}\nexport function isSameOriginAbsoluteUrl(uri1, uri2) {\n    try {\n        const parsedUri1 = new URL(uri1);\n        const parsedUri2 = new URL(uri2);\n        const port1 = parseInt(parsedUri1.port || '0', 10) | 0 || (parsedUri1.protocol === 'https:' ? 443 : 80);\n        const port2 = parseInt(parsedUri2.port || '0', 10) | 0 || (parsedUri2.protocol === 'https:' ? 443 : 80);\n        const match = {\n            scheme: parsedUri1.protocol === parsedUri2.protocol,\n            hostname: parsedUri1.hostname === parsedUri2.hostname,\n            port: port1 === port2,\n            absolute: (uri1.includes('http://') || uri1.includes('https://')) &&\n                (uri2.includes('http://') || uri2.includes('https://')),\n        };\n        return match.scheme && match.hostname && match.port && match.absolute;\n    }\n    catch (error) {\n        console.log(error);\n        console.log('Parsing error in same URL origin check');\n        return false;\n    }\n}\nexport function getGlobalScope() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('Unexpected runtime environment - no supported global scope (`window`, `self`, `global`) available');\n}\nfunction getAPIUsageErrorMessage(scopeObject, apiName, usageDesc) {\n    if (usageDesc) {\n        return `Use of '${usageDesc}' requires \\`${apiName}\\` which is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n    }\n    else {\n        return `\\`${apiName}\\` is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n    }\n}\nexport function getGlobalObject(name, { throwIfUnavailable, usageDesc, returnEmptyObject } = {}) {\n    let globalScope = undefined;\n    try {\n        globalScope = getGlobalScope();\n        if (globalScope) {\n            const obj = globalScope[name];\n            if (obj) {\n                return obj;\n            }\n        }\n    }\n    catch (error) {\n        Logger.error(`Error getting object '${name}' from global scope '${globalScope}': ${error}`);\n    }\n    if (throwIfUnavailable) {\n        const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n        Logger.error(errMsg);\n        throw new Error(errMsg);\n    }\n    if (returnEmptyObject) {\n        return {};\n    }\n    return undefined;\n}\nexport function getGlobalObjects(names, { throwIfUnavailable, usageDesc, returnEmptyObject } = {}) {\n    let globalScope;\n    try {\n        globalScope = getGlobalScope();\n    }\n    catch (error) {\n        Logger.error(`Error getting global scope: ${error}`);\n        if (throwIfUnavailable) {\n            const errMsg = getAPIUsageErrorMessage(globalScope, names[0].toString(), usageDesc);\n            Logger.error(errMsg);\n            throw errMsg;\n        }\n        else if (returnEmptyObject) {\n            globalScope = {};\n        }\n    }\n    const result = {};\n    for (let i = 0; i < names.length; i++) {\n        const name = names[i];\n        try {\n            if (globalScope) {\n                const obj = globalScope[name];\n                if (obj) {\n                    result[name] = obj;\n                }\n                else if (throwIfUnavailable) {\n                    const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n                    Logger.error(errMsg);\n                    throw new Error(errMsg);\n                }\n                else if (returnEmptyObject) {\n                    result[name] = {};\n                }\n            }\n        }\n        catch (error) {\n            if (throwIfUnavailable) {\n                const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n                Logger.error(errMsg);\n                throw new Error(errMsg);\n            }\n        }\n    }\n    return result;\n}\nexport function intToBytes(value, signed, byteLength) {\n    return bigIntToBytes(intToBigInt(value, signed), byteLength);\n}\nexport function intToBigInt(value, signed) {\n    let parsedValue = value;\n    if (typeof parsedValue === 'number') {\n        if (!Number.isInteger(parsedValue)) {\n            throw new RangeError(`Invalid value. Values of type 'number' must be an integer.`);\n        }\n        if (parsedValue > Number.MAX_SAFE_INTEGER) {\n            throw new RangeError(`Invalid value. Values of type 'number' must be less than or equal to ${Number.MAX_SAFE_INTEGER}. For larger values, try using a BigInt instead.`);\n        }\n        return BigInt(parsedValue);\n    }\n    if (typeof parsedValue === 'string') {\n        if (parsedValue.toLowerCase().startsWith('0x')) {\n            let hex = parsedValue.slice(2);\n            hex = hex.padStart(hex.length + (hex.length % 2), '0');\n            parsedValue = hexToBytes(hex);\n        }\n        else {\n            try {\n                return BigInt(parsedValue);\n            }\n            catch (error) {\n                if (error instanceof SyntaxError) {\n                    throw new RangeError(`Invalid value. String integer '${parsedValue}' is not finite.`);\n                }\n            }\n        }\n    }\n    if (typeof parsedValue === 'bigint') {\n        return parsedValue;\n    }\n    if (parsedValue instanceof Uint8Array) {\n        if (signed) {\n            const bn = fromTwos(BigInt(`0x${bytesToHex(parsedValue)}`), BigInt(parsedValue.byteLength * 8));\n            return BigInt(bn.toString());\n        }\n        else {\n            return BigInt(`0x${bytesToHex(parsedValue)}`);\n        }\n    }\n    if (parsedValue != null &&\n        typeof parsedValue === 'object' &&\n        parsedValue.constructor.name === 'BN') {\n        return BigInt(parsedValue.toString());\n    }\n    throw new TypeError(`Invalid value type. Must be a number, bigint, integer-string, hex-string, or Uint8Array.`);\n}\nexport function with0x(value) {\n    return value.startsWith('0x') ? value : `0x${value}`;\n}\nexport function hexToBigInt(hex) {\n    if (typeof hex !== 'string')\n        throw new TypeError(`hexToBigInt: expected string, got ${typeof hex}`);\n    return BigInt(`0x${hex}`);\n}\nexport function intToHex(integer, lengthBytes = 8) {\n    const value = typeof integer === 'bigint' ? integer : intToBigInt(integer, false);\n    return value.toString(16).padStart(lengthBytes * 2, '0');\n}\nexport function hexToInt(hex) {\n    return parseInt(hex, 16);\n}\nexport function bigIntToBytes(value, length = 16) {\n    const hex = intToHex(value, length);\n    return hexToBytes(hex);\n}\nexport function toTwos(value, width) {\n    if (value < -(BigInt(1) << (width - BigInt(1))) ||\n        (BigInt(1) << (width - BigInt(1))) - BigInt(1) < value) {\n        throw `Unable to represent integer in width: ${width}`;\n    }\n    if (value >= BigInt(0)) {\n        return BigInt(value);\n    }\n    return value + (BigInt(1) << width);\n}\nfunction nthBit(value, n) {\n    return value & (BigInt(1) << n);\n}\nexport function fromTwos(value, width) {\n    if (nthBit(value, width - BigInt(1))) {\n        return value - (BigInt(1) << width);\n    }\n    return value;\n}\nconst hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\nexport function bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (const u of uint8a) {\n        hex += hexes[u];\n    }\n    return hex;\n}\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError(`hexToBytes: expected string, got ${typeof hex}`);\n    }\n    const paddedHex = hex.length % 2 ? `0${hex}` : hex;\n    const array = new Uint8Array(paddedHex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = paddedHex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexport function utf8ToBytes(str) {\n    return new TextEncoder().encode(str);\n}\nexport function bytesToUtf8(arr) {\n    return new TextDecoder().decode(arr);\n}\nexport function asciiToBytes(str) {\n    const byteArray = [];\n    for (let i = 0; i < str.length; i++) {\n        byteArray.push(str.charCodeAt(i) & 0xff);\n    }\n    return new Uint8Array(byteArray);\n}\nexport function bytesToAscii(arr) {\n    return String.fromCharCode.apply(null, arr);\n}\nfunction isNotOctet(octet) {\n    return !Number.isInteger(octet) || octet < 0 || octet > 255;\n}\nexport function octetsToBytes(numbers) {\n    if (numbers.some(isNotOctet))\n        throw new Error('Some values are invalid bytes.');\n    return new Uint8Array(numbers);\n}\nexport function concatBytes(...arrays) {\n    if (!arrays.every(a => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexport function concatArray(elements) {\n    return concatBytes(...elements.map(e => {\n        if (typeof e === 'number')\n            return octetsToBytes([e]);\n        if (e instanceof Array)\n            return octetsToBytes(e);\n        return e;\n    }));\n}\nexport function isInstance(object, type) {\n    return object instanceof type || object?.constructor?.name?.toLowerCase() === type.name;\n}\n//# sourceMappingURL=utils.js.map","export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};"],"names":["root","factory","exports","module","define","amd","this","leafPrototypes","getProto","number","n","Number","isSafeInteger","Error","bool","b","bytes","lengths","Uint8Array","TypeError","length","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","Object","defineProperty","value","assert","SHA2","_assert_js_1","utils_js_1","Hash","constructor","padOffset","isLE","super","pos","buffer","view","createView","update","data","default","len","toBytes","take","Math","set","subarray","process","dataView","roundClean","digestInto","fill","i","byteOffset","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digest","res","slice","destroy","_cloneInto","to","crypto","node","undefined","web","self","sha224","sha256","_sha2_js_1","Maj","a","c","SHA256_K","Uint32Array","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","SHA224","wrapConstructor","randomBytes","wrapConstructorWithOpts","checkOpts","concatBytes","utf8ToBytes","asyncLoop","nextTick","hexToBytes","bytesToHex","u32","u8","crypto_1","arr","byteLength","floor","DataView","word","shift","hexes","Array","from","v","toString","padStart","str","TextEncoder","encode","uint8a","hex","array","j","hexByte","byte","parseInt","isNaN","async","iters","tick","cb","ts","Date","now","diff","arrays","every","reduce","result","pad","clone","defaults","opts","obj","prototype","call","assign","hashConstructor","hashC","message","tmp","hashCons","msg","bytesLength","getRandomValues","ALPHABET","BASE_MAP","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","it4","vch","ArrayBuffer","isView","isArray","pbegin","pend","b58","it1","it2","repeat","decode","string","c32ToB58","b58ToC32","c32addressDecode","c32address","versions","checksum_1","base58check","utils_1","mainnet","p2pkh","p2sh","testnet","ADDR_BITCOIN_TO_STACKS","ADDR_STACKS_TO_BITCOIN","version","hash160hex","match","c32checkEncode","c32addr","c32checkDecode","b58check","addrInfo","hash160String","addrVersion","prefix","stacksVersion","c32string","bitcoinVersion","sha256_1","basex","dataBytes","prefixBytes","checksum","forEach","check","index","encoding_1","c32checksum","dataHex","dataHash","toLowerCase","versionHex","checksumHex","c32str","c32encode","c32","c32data","c32normalize","c32decode","versionChar","indexOf","substring","c32input","toUpperCase","replace","inputHex","minLength","currentCode","nextCode","nextBits","nextLowBits","curC32Digit","unshift","C32leadingZeros","zeroPrefix","TextDecoder","numLeadingZeroBytesInHex","count","join","numLeadingZeroBytes","carryBits","currentValue","currentHexDigit","hexLeadingZeros","hexStr","address_1","enumerable","support","Symbol","Blob","e","viewClasses","isArrayBufferView","normalizeName","name","String","test","normalizeValue","iteratorFor","items","iterator","next","done","Headers","headers","map","append","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","onerror","error","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","type","rejected","arrayBuffer","then","text","readAsText","chars","fromCharCode","readArrayBufferAsText","formData","json","JSON","parse","oldValue","has","hasOwnProperty","callback","thisArg","keys","push","values","entries","methods","Request","input","options","method","upcased","url","credentials","mode","signal","referrer","form","trim","split","decodeURIComponent","Response","bodyInit","status","ok","statusText","response","redirectStatuses","redirect","RangeError","location","DOMException","err","stack","fetch","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","rawHeaders","getAllResponseHeaders","line","parts","key","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","emptyMessageSignature","MessageSignature","createSingleSigSpendingCondition","hashMode","pubKey","nonce","fee","signer","hash160","keyEncoding","Compressed","Uncompressed","signature","createMultiSigSpendingCondition","numSigs","pubKeys","stacksPublicKeys","fields","signaturesRequired","isSingleSig","condition","clearCondition","cloned","serializeSingleSigSpendingCondition","bytesArray","serializeMultiSigSpendingCondition","deserializeSingleSigSpendingCondition","bytesReader","readBytes","readUInt8Enum","SerializeP2WPKH","deserializeMultiSigSpendingCondition","TransactionAuthField","haveUncompressed","field","contents","PublicKey","pubKeyEncoding","readUInt16BE","SerializeP2SH","serializeSpendingCondition","deserializeSpendingCondition","SerializeP2PKH","makeSigHashPreSign","curSigHash","authType","sigHash","makeSigHashPostSign","hashLength","sigHashBytes","nextSignature","privateKey","sigHashPreSign","nextSig","nextSigHash","nextVerification","initialSigHash","publicKey","createStandardAuth","spendingCondition","Standard","createSponsoredAuth","sponsorSpendingCondition","Sponsored","intoInitialSighashAuth","auth","newInitialSigHash","verifyOrigin","addrBytes","verifySingleSig","publicKeys","foundPubKey","verifyMultiSig","verify","setFee","amount","getFee","setNonce","setSponsorNonce","setSponsor","sc","serializeAuthorization","deserializeAuthorization","defaultFetchOpts","referrerPolicy","fetchWrapper","fetchOpts","createFetchFn","args","fetchLib","middlewares","argsForCreateFetchFn","fetchParams","middleware","pre","post","StacksNetworks","StacksNetwork","networkConfig","Mainnet","chainId","bnsLookupUrl","broadcastEndpoint","transferFeeEstimateEndpoint","transactionFeeEstimateEndpoint","accountEndpoint","contractAbiEndpoint","readOnlyFunctionCallEndpoint","isMainnet","getBroadcastApiUrl","coreApiUrl","getTransferFeeEstimateApiUrl","getTransactionFeeEstimateApiUrl","getAccountApiUrl","address","getAccountExtendedBalancesApiUrl","getAbiApiUrl","contract","getReadOnlyFunctionCallApiUrl","contractAddress","contractName","functionName","encodeURIComponent","getInfoUrl","getBlockTimeInfoUrl","getPoxInfoUrl","getRewardsUrl","limit","getRewardsTotalUrl","getRewardHoldersUrl","getStackerInfoUrl","getDataVarUrl","dataVarName","getMapEntryUrl","mapName","fetchFn","getNameInfo","fullyQualifiedName","nameLookupURL","resp","nameInfo","fromName","networkName","StacksMainnet","StacksTestnet","StacksDevnet","StacksMocknet","fromNameOrNetwork","network","Testnet","getNonce","derivedNetwork","estimateTransfer","transaction","payload","payloadType","TokenTransfer","estimateTransferUnsafe","deriveNetwork","Accept","feeRateResult","txBytes","serialize","estimateTransaction","transactionPayload","estimatedLen","stringify","transaction_payload","estimated_len","reason","reason_data","estimations","broadcastTransaction","attachment","rawTx","broadcastRawTransaction","tx","txid","getAbi","catch","makeUnsignedSTXTokenTransfer","txOptions","defaultOptions","memo","sponsored","recipient","authorization","numSignatures","anchorMode","estimateTransactionFeeWithFallback","addressVersion","MainnetSingleSig","TestnetSingleSig","senderAddress","txNonce","makeSTXTokenTransfer","senderKey","privKey","signOrigin","signerKeys","filter","pk","appendOrigin","estimateContractDeploy","SmartContract","VersionedSmartContract","makeContractDeploy","makeUnsignedContractDeploy","postConditionMode","Deny","clarityVersion","Clarity2","codeBody","postConditions","postCondition","lpPostConditions","estimateContractFunctionCall","ContractCall","makeUnsignedContractCall","functionArgs","validateWithAbi","abi","makeContractCall","makeStandardSTXPostCondition","conditionCode","makeContractSTXPostCondition","makeStandardFungiblePostCondition","assetInfo","makeContractFungiblePostCondition","makeStandardNonFungiblePostCondition","assetId","makeContractNonFungiblePostCondition","callReadOnlyFunction","readOnlyFunctionOptions","arg","sender","arguments","responseJson","getContractMapEntry","getContractMapEntryOptions","mapKey","serializedKeyBytes","serializedKeyHex","fetchOptions","responseBody","deserializedCv","deserialize","sponsorTransaction","sponsorOptions","sponsorNonce","sponsorAddressHashmode","sponsorPubKey","sponsorPrivateKey","txFee","estimateTransactionByteLength","createSponsorSigner","signSponsor","SerializeP2WSH","multiSigSpendingCondition","existingSignatures","totalSignatureLength","enumCheckFunctions","Map","isEnum","enumVariable","checker","newChecker","enumValues","enumValueSet","Set","createEnumChecker","BytesReader","readUInt32BE","readUInt8","readBigUIntLE","reverse","readBigUIntBE","readOffset","val","internalBytes","invalidEnumErrorFormatter","num","formatSpace","space","depth","end","prettyPrintWithDepth","cv","BoolFalse","BoolTrue","Int","UInt","StringASCII","StringUTF8","PrincipalContract","PrincipalStandard","Buffer","OptionalNone","OptionalSome","ResponseOk","ResponseErr","List","list","spaceBefore","endSpace","formatList","Tuple","sort","formatTuple","param","exhaustiveCheck","prettyPrint","intCV","uint","principal","addr","contractPrincipal","standardPrincipal","listCV","stringAscii","stringUtf8","bufferCV","bufferFromHex","bufferFromAscii","ascii","bufferFromUtf8","utf8","none","some","tuple","tupleCV","cvToString","encoding","cvToValue","strictJsonCompat","cvToJSON","getCVTypeString","success","isClarityType","withType","ClarityType","deserializeCV","serializedClarityValue","hasHexPrefix","bufferLength","sAddress","cAddress","listLength","listContents","tupleLength","tupleContents","clarityName","content","asciiStrLen","asciiStr","utf8StrLen","utf8Str","bytesWithTypeID","typeId","serializeStringCV","serializeCV","serializeBoolCV","serializeBufferCV","serializeUIntCV","serializeIntCV","serializeStandardPrincipalCV","serializeContractPrincipalCV","serializeResponseCV","serializedValue","serializeListCV","lexicographicOrder","localeCompare","nameWithLength","serializeTupleCV","serializeStringAsciiCV","serializeStringUtf8CV","trueCV","falseCV","boolCV","bufferCVFromString","MAX_U128","MIN_U128","MAX_I128","MIN_I128","bigInt","uintCV","noneCV","someCV","optionalCVOf","principalToString","principalCV","contractPrincipalCV","standardPrincipalCV","addressString","standardPrincipalCVFromAddress","contractPrincipalCVFromAddress","contractPrincipalCVFromStandard","sp","lengthPrefixedContractName","responseErrorCV","responseOkCV","stringAsciiCV","stringUtf8CV","stringCV","createMessageSignature","addressHashModeToVersion","txVersion","MainnetMultiSig","TestnetMultiSig","addressFromVersionHash","Address","addressToString","ChainID","DEFAULT_CHAIN_ID","MAX_STRING_LENGTH_BYTES","CLARITY_INT_SIZE","CLARITY_INT_BYTE_SIZE","COINBASE_BYTES_LENGTH","VRF_PROOF_BYTES_LENGTH","RECOVERABLE_ECDSA_SIG_LENGTH_BYTES","COMPRESSED_PUBKEY_LENGTH_BYTES","UNCOMPRESSED_PUBKEY_LENGTH_BYTES","MEMO_MAX_LENGTH_BYTES","DEFAULT_CORE_NODE_API_URL","StacksMessageType","whenMessageType","messageType","messageTypeMap","PayloadType","ClarityVersion","AnchorMode","AnchorModeNames","AnchorModeMap","anchorModeFromNameOrValue","TransactionVersion","DEFAULT_TRANSACTION_VERSION","PostConditionMode","PostConditionType","AuthType","AddressHashMode","AddressVersion","PubKeyEncoding","FungibleConditionCode","NonFungibleConditionCode","PostConditionPrincipalID","AssetType","TxRejectedReason","ClarityAbiTypeId","isClarityAbiPrimitive","isClarityAbiBuffer","isClarityAbiStringAscii","isClarityAbiStringUtf8","isClarityAbiResponse","isClarityAbiOptional","optional","isClarityAbiTuple","isClarityAbiList","getTypeUnion","id","encodeAbiClarityValue","union","encodeClarityValue","getTypeString","t","abiFunctionToString","func","access","matchType","abiType","abiTupleEntry","validateContractCall","filtered","functions","fn","abiArgs","payloadArg","abiArg","argNum","parseToCV","typeString","TransactionError","captureStackTrace","SerializationError","DeserializationError","NoEstimateAvailableError","NotImplementedError","SigningError","VerificationError","HMAC","_key","iHash","oHash","getPrototypeOf","hmac","COORDINATE_BYTES","getAddressFromPrivateKey","transactionVersion","getAddressFromPublicKey","pubKeyfromPrivKey","addrVer","createStacksPublicKey","publicKeyFromSignatureVrs","messageHash","messageSignature","parsedSignature","recoveryIdHex","r","s","recoveryId","parseRecoverableSignatureVrs","point","fromSignature","compressed","toHex","publicKeyFromSignatureRsv","publicKeyFromBytes","isCompressed","startsWith","publicKeyToString","serializePublicKey","createStacksPrivateKey","compressPublicKey","fromHex","deserializePublicKey","fieldId","keyLength","privateKeyBuffer","privateKeyToBytes","makeRandomPrivKey","randomPrivateKey","signWithKey","rawSignature","canonical","recovered","recoverableSignatureString","toCompactHex","signMessageHashRsv","getPublicKey","privateKeyToString","publicKeyToAddress","hmacSha256Sync","msgs","isTokenTransferPayload","p","isContractCallPayload","isSmartContractPayload","isPoisonPayload","PoisonMicroblock","isCoinbasePayload","Coinbase","createTokenTransferPayload","Payload","createContractCallPayload","createSmartContractPayload","createCoinbasePayload","coinbaseBytes","altRecipient","CoinbaseToAltRecipient","TenureChangeCause","serializePayload","numArgs","NakamotoCoinbase","vrfProof","TenureChange","tenureHash","previousTenureHash","burnViewHash","previousTenureEnd","previousTenureBlocks","cause","publicKeyHash","deserializePayload","contractCallName","numberOfArgs","clarityValue","createNakamotoCoinbasePayload","parseContractId","PartialPcWithPrincipal","willSendEq","PartialPcFtWithCode","Equal","willSendLte","LessEqual","willSendLt","Less","willSendGte","GreaterEqual","willSendGt","Greater","willSendAsset","PartialPcNftWithCode","Sends","willNotSendAsset","DoesNotSend","code","ustx","ft","contractId","tokenName","nft","assetName","nftAssetName","parseNft","getNftArgs","parseAssetInfoString","assetAddress","assetContractName","assetTokenName","createAssetInfo","createLPString","lengthPrefixBytes","maxLengthBytes","prefixLength","maxLength","LengthPrefixedString","AssetInfo","createAddress","c32AddressString","addressData","parsePrincipalString","principalString","createContractPrincipal","createStandardPrincipal","Principal","Contract","createSTXPostCondition","PostCondition","conditionType","STX","createFungiblePostCondition","Fungible","createNonFungiblePostCondition","NonFungible","AuthFieldType","deserializeMessageSignature","createTransactionAuthField","deserializeTransactionAuthField","authFieldType","serializeMessageSignature","serializeTransactionAuthField","TransactionSigner","signBegin","originDone","checkOversign","checkOverlap","nextVerify","originSigHash","nextSighash","signNextOrigin","appendPubkey","signNextSponsor","getTxInComplete","resume","STRUCTURED_DATA_PREFIX","hashStructuredData","structuredData","hash256BytesLength","encodeStructuredData","domain","structuredDataHash","domainHash","decodeStructuredDataSignature","encodedMessageBytes","signStructuredData","StructuredDataSignature","StacksTransaction","OnChainOnly","Any","verifyBegin","signAndAppend","cond","endsWith","serialized","chainIdBytes","deserializeTransaction","serializeStacksMessage","serializeAddress","serializePrincipal","serializeLPString","MemoString","serializeMemoString","serializeAssetInfo","serializePostCondition","LengthPrefixedList","serializeLPList","deserializeStacksMessage","listType","deserializeAddress","deserializePrincipal","deserializeLPString","deserializeMemoString","deserializeAssetInfo","deserializePostCondition","deserializeLPList","createEmptyAddress","addressFromHashMode","addressFromPublicKeys","lps","contentBytes","codeBodyString","createMemoString","memoString","paddedContent","info","createLPList","lpList","postConditionType","Rho","Id","_","Pi","idxL","idxR","k","shifts","shiftsL","idx","shiftsR","Kl","Kr","rotl","f","group","y","z","BUF","RIPEMD160","h0","h1","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","ripemd160","U32_MASK64","fromBig","le","lst","Ah","Al","Bh","Bl","Cl","low","Ch","Dl","Dh","Eh","El","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512_256","leftPadHex","hexString","leftPadHexToLength","rightPadHexToLength","padEnd","exceedsMaxLengthBytes","cloneDeep","omit","prop","txidFromData","txidFromBytes","hashP2PKH","hashP2WPKH","keyHash","redeemScript","redeemScriptHash","hashP2SH","hashP2WSH","scriptArray","script","isClarityName","cvToHex","hexToCV","parseReadOnlyResponse","okay","validateStacksAddress","stacksAddress","validateTxId","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","g","freeSelf","Function","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","add","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","transform","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","getPrototype","objectCreate","propertyIsEnumerable","splice","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","initCloneArray","copyArray","tag","getTag","isFunc","copy","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","newValue","getMapData","getValue","isFunction","baseIsNative","pop","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","writeUInt16BE","destination","writeUInt8","writeUInt32BE","PeerNetworkID","PRIVATE_KEY_COMPRESSED_LENGTH","intToBytes","signed","bigIntToBytes","intToBigInt","parsedValue","isInteger","SyntaxError","bn","width","nthBit","fromTwos","with0x","hexToBigInt","intToHex","integer","lengthBytes","hexToInt","toTwos","u","paddedHex","bytesToUtf8","asciiToBytes","byteArray","bytesToAscii","apply","isNotOctet","octet","octetsToBytes","numbers","concatArray","elements","_0n","_1n","_2n","_3n","_8n","CURVE","freeze","P","Gx","Gy","beta","divNearest","endo","splitScalar","a1","b1","a2","b2","POW_2_128","c1","c2","k1","mod","k2","k1neg","k2neg","fieldLen","groupLen","hashLen","compressedLen","uncompressedLen","weierstrass","x2","x3","USE_ENDOMORPHISM","ShaError","assertJacPoint","JacobianPoint","fromAffine","Point","equals","ZERO","toAffineBatch","points","toInv","nums","scratch","inverted","invert","acc","reduceRight","invertBatch","toAffine","normalizeZ","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","x1b","X3","Y3","Z3","HH","HHH","V","subtract","multiplyUnsafe","scalar","P0","normalizeScalar","d","k1p","k2p","precomputeWindow","W","windows","base","window","wNAF","affinePoint","_WINDOW_SIZE","precomputes","pointPrecomputes","windowSize","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","constTimeNegate","multiply","fake","f1p","f2p","invZ","is0","iz1","iz2","iz3","ax","ay","zz","item","neg","_setWindowSize","delete","hasEvenY","fromCompressedHex","isShort","bytesToNumber","isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","pow2","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","rt","sqrtMod","isYOdd","assertValidity","fromUncompressedHex","ensureBytes","fromPrivateKey","normalizePrivateKey","msgHash","recovery","normalizeSignature","truncateHash","radj","rinv","u1","u2","R","numTo32bStr","Q","multiplyAndAddUnsafe","toRawBytes","toHexX","toRawX","left","aP","bQ","sum","sliceDER","parseDERInt","Signature","fromCompact","hexToNumber","fromDER","sBytes","rBytesLeft","parseDERSignature","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","sHexL","rHexL","sLen","rLen","toCompactRawBytes","POW_2_256","numTo32b","power","modulo","q","m","truncateOnly","delta","bits2int_2","_sha256Sync","_hmacSha256Sync","HmacDrbg","qByteLen","counter","utils","hmacSha256","hmacSync","checkSync","incr","reseed","seed","reseedSync","generate","generateSync","kmdToSig","kBytes","lowS","kinv","sig","bits2int","bits2octets","z1","z2","int2octets","signSync","extraEntropy","seedArgs","initSigArgs","drbg","recSig","der","hashed","finalizeSig","vopts","strict","normalizePublicKey","sinv","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","minLen","precompute","cached","messages","subtle","createHash","ckey","importKey","sign","createHmac","sha256Sync","taggedHash","tagP","tagH","taggedHashSync","_JacobianPoint","defineProperties","configurable","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","getter","__esModule","ns","def","current","definition","o","globalThis","toStringTag","nmd","paths","children"],"sourceRoot":""}