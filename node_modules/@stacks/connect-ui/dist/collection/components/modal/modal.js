import { h } from '@stencil/core';
import { getProviderFromId } from '../../providers';
import { setSelectedProviderId } from '../../session';
import CloseIcon from './assets/close-icon.svg';
import { getBrowser, getPlatform } from './utils';
export class Modal {
  constructor() {
    this.defaultProviders = undefined;
    this.installedProviders = undefined;
    this.persistSelection = undefined;
    this.callback = undefined;
    this.cancelCallback = undefined;
  }
  handleSelectProvider(providerId) {
    if (this.persistSelection)
      setSelectedProviderId(providerId);
    this.callback(getProviderFromId(providerId));
  }
  handleCloseModal() {
    this.cancelCallback();
  }
  // todo: nice to have:
  // getComment(provider: WebBTCProvider, browser: string, isMobile?: string) {
  //   if (!provider) return null;
  //   const hasExtension = this.getBrowserUrl(provider);
  //   const hasMobile = this.getMobileUrl(provider);
  //   if (isMobile && hasExtension && !hasMobile) return 'Extension Only';
  //   if (!isMobile && !hasExtension && hasMobile) return 'Mobile Only';
  //   if (!isMobile && !browser) return 'Current browser not supported';
  //   return null;
  // }
  getBrowserUrl(provider) {
    var _a;
    return (_a = provider.chromeWebStoreUrl) !== null && _a !== void 0 ? _a : provider.mozillaAddOnsUrl;
  }
  getMobileUrl(provider) {
    var _a;
    return (_a = provider.iOSAppStoreUrl) !== null && _a !== void 0 ? _a : provider.googlePlayStoreUrl;
  }
  getInstallUrl(provider, browser, platform) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    if (platform === 'IOS') {
      return (_b = (_a = provider.iOSAppStoreUrl) !== null && _a !== void 0 ? _a : this.getBrowserUrl(provider)) !== null && _b !== void 0 ? _b : provider.webUrl;
    }
    else if (browser === 'Chrome') {
      return (_d = (_c = provider.chromeWebStoreUrl) !== null && _c !== void 0 ? _c : this.getMobileUrl(provider)) !== null && _d !== void 0 ? _d : provider.webUrl;
    }
    else if (browser === 'Firefox') {
      return (_f = (_e = provider.mozillaAddOnsUrl) !== null && _e !== void 0 ? _e : this.getMobileUrl(provider)) !== null && _f !== void 0 ? _f : provider.webUrl;
    }
    else if (platform === 'Android') {
      return (_h = (_g = provider.googlePlayStoreUrl) !== null && _g !== void 0 ? _g : this.getBrowserUrl(provider)) !== null && _h !== void 0 ? _h : provider.webUrl;
    }
    else {
      return (_k = (_j = this.getBrowserUrl(provider)) !== null && _j !== void 0 ? _j : provider.webUrl) !== null && _k !== void 0 ? _k : this.getMobileUrl(provider);
    }
  }
  render() {
    const browser = getBrowser();
    const mobile = getPlatform();
    const notInstalledProviders = this.defaultProviders.filter(p => this.installedProviders.findIndex(i => i.id === p.id) === -1 // keep providers NOT already in installed list
    );
    const hasInstalled = this.installedProviders.length > 0;
    const hasMore = notInstalledProviders.length > 0;
    return (h("div", { class: "modal-container animate-in fade-in fixed inset-0 z-[8999] box-border flex h-full w-full items-end bg-[#00000040] md:items-center md:justify-center" }, h("div", { class: "fixed inset-0 z-[8999]", onClick: () => this.handleCloseModal() }), h("div", { class: "modal-body animate-in md:zoom-in-50 slide-in-from-bottom md:slide-in-from-bottom-0 z-[9000] box-border flex max-h-[calc(100%-24px)] w-full max-w-full cursor-default flex-col overflow-y-scroll rounded-2xl rounded-b-none bg-white p-6 text-sm leading-snug shadow-[0_4px_5px_0_#00000005,0_16px_40px_0_#00000014] md:max-h-[calc(100%-48px)] md:w-[400px] md:rounded-b-2xl" }, h("div", { class: "flex flex-col space-y-[10px]" }, h("div", { class: "flex items-center" }, h("div", { class: "flex-1 text-xl font-medium text-[#242629]" }, "Connect a wallet"), h("button", { class: "rounded-full bg-transparent p-1 transition-colors hover:bg-gray-100 active:scale-95", onClick: () => this.handleCloseModal() }, h("span", { class: "sr-only" }, "Close popup"), h("img", { src: CloseIcon }))), hasInstalled ? (h("p", null, "Select the wallet you want to connect to.")) : (h("p", null, "You don't have any wallets in your browser that support this app. You need to install a wallet to proceed."))), !mobile && !browser && (h("div", { class: "mx-auto mt-4 rounded-xl bg-gray-200 px-3 py-1.5 text-sm font-medium text-gray-500" }, "Unfortunately, your browser isn't supported")), hasInstalled && (h("div", { class: "mt-6" }, h("p", { class: "mb-4 text-sm font-medium" }, "Installed wallets"), h("ul", { class: "space-y-3" }, this.installedProviders.map((provider) => (h("li", { class: "flex items-center gap-3 rounded-[10px] border border-[#EFEFF2] p-[14px]" }, h("div", { class: "aspect-square basis-9 overflow-hidden" }, h("img", { src: provider.icon, class: "h-full w-full rounded-[10px] bg-gray-700" })), h("div", { class: "flex-1" }, h("div", { class: "text-sm font-medium text-[#242629]" }, provider.name), provider.webUrl && (h("a", { href: provider.webUrl, class: "text-sm", rel: "noopener noreferrer" }, new URL(provider.webUrl).hostname))), h("button", { class: "rounded-[10px] border border-[#333] bg-[#323232] px-4 py-2 text-sm font-medium text-[#EFEFEF] shadow-[0_1px_2px_0_#0000000A] outline-[#FFBD7A] transition-all hover:bg-[#0C0C0D] hover:text-white hover:shadow-[0_8px_16px_0_#00000020] focus:outline focus:outline-[3px] active:scale-95", onClick: () => this.handleSelectProvider(provider.id) }, "Connect"))))))), hasMore && (h("div", { class: "mt-6" }, hasInstalled ? (h("p", { class: "mb-4 text-sm font-medium" }, "Other wallets")) : (h("div", { class: "mb-5 flex justify-between" }, h("p", { class: "text-sm font-medium" }, "Recommended wallets"), h("a", { class: "flex cursor-pointer items-center space-x-[5px] text-xs transition-colors hover:text-[#242629] hover:underline focus:underline", href: "https://docs.hiro.so/what-is-a-wallet", rel: "noopener noreferrer", target: "_blank" }, h("svg", { xmlns: "http://www.w3.org/2000/svg", width: "14", height: "14", viewBox: "0 0 16 16", fill: "none" }, h("path", { stroke: "#74777D", "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "1.2", d: "M8.006 15a7 7 0 1 0 0-14 7 7 0 0 0 0 14Z" }), h("path", { stroke: "#74777D", "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "1.2", d: "M5.97 5.9a2.1 2.1 0 0 1 4.08.7c0 1.4-2.1 2.1-2.1 2.1M8.006 11.5h.01" })), h("p", null, "What is a wallet?\u2009", h("span", { class: "align-text-bottom text-[9px]" }, "\u2197"))))), h("ul", { class: "space-y-3" }, notInstalledProviders.map((provider) => (h("li", { class: "flex items-center gap-3 rounded-[10px] border border-[#EFEFF2] p-[14px]" }, h("div", { class: "aspect-square basis-9 overflow-hidden" }, h("img", { src: provider.icon, class: "h-full w-full rounded-[10px] bg-gray-700" })), h("div", { class: "flex-1" }, h("div", { class: "text-sm font-medium text-[#242629]" }, provider.name), provider.webUrl && (h("a", { href: provider.webUrl, class: "text-sm", rel: "noopener noreferrer" }, new URL(provider.webUrl).hostname))), this.getInstallUrl(provider, browser, mobile) && (h("a", { class: "rounded-[10px] border border-[#EFEFF2] px-4 py-2 text-sm font-medium shadow-[0_1px_2px_0_#0000000A] outline-[#FFBD7A] transition-colors hover:text-[#242629] hover:shadow-[0_1px_2px_0_#00000010] focus:outline focus:outline-[3px] active:scale-95", href: this.getInstallUrl(provider, browser, mobile), rel: "noopener noreferrer", target: "_blank" }, "Install \u2192")))))))))));
  }
  static get is() { return "connect-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modal.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modal.css"]
    };
  }
  static get assetsDirs() { return ["assets"]; }
  static get properties() {
    return {
      "defaultProviders": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "WebBTCProvider[]",
          "resolved": "WebBTCProvider[]",
          "references": {
            "WebBTCProvider": {
              "location": "import",
              "path": "../../providers"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      },
      "installedProviders": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "WebBTCProvider[]",
          "resolved": "WebBTCProvider[]",
          "references": {
            "WebBTCProvider": {
              "location": "import",
              "path": "../../providers"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      },
      "persistSelection": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "persist-selection",
        "reflect": false
      },
      "callback": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Function",
          "resolved": "Function",
          "references": {
            "Function": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      },
      "cancelCallback": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Function",
          "resolved": "Function",
          "references": {
            "Function": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      }
    };
  }
  static get elementRef() { return "modalEl"; }
}
